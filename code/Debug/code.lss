
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014a  00800060  000032ba  0000334e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  008001aa  008001aa  00003498  2**0
                  ALLOC
  3 .stab         00004158  00000000  00000000  00003498  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003c35  00000000  00000000  000075f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000b225  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000b3c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000b5b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000d9c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000ed48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000ff20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  000100e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  000103d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010d44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea eb       	ldi	r30, 0xBA	; 186
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3a       	cpi	r26, 0xAA	; 170
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ea       	ldi	r26, 0xAA	; 170
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3b       	cpi	r26, 0xB8	; 184
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9f 18 	call	0x313e	; 0x313e <main>
      8a:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a8 18 	jmp	0x3150	; 0x3150 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c4 18 	jmp	0x3188	; 0x3188 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b4 18 	jmp	0x3168	; 0x3168 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d0 18 	jmp	0x31a0	; 0x31a0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b4 18 	jmp	0x3168	; 0x3168 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d0 18 	jmp	0x31a0	; 0x31a0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a8 18 	jmp	0x3150	; 0x3150 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c4 18 	jmp	0x3188	; 0x3188 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b0 18 	jmp	0x3160	; 0x3160 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 cc 18 	jmp	0x3198	; 0x3198 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b4 18 	jmp	0x3168	; 0x3168 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d0 18 	jmp	0x31a0	; 0x31a0 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b4 18 	jmp	0x3168	; 0x3168 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d0 18 	jmp	0x31a0	; 0x31a0 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b4 18 	jmp	0x3168	; 0x3168 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d0 18 	jmp	0x31a0	; 0x31a0 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 b8 18 	jmp	0x3170	; 0x3170 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 d4 18 	jmp	0x31a8	; 0x31a8 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 b0 18 	jmp	0x3160	; 0x3160 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 cc 18 	jmp	0x3198	; 0x3198 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <CalculateSettings>:
};											// we use Zeros at the end for padding
/*******************************************************************************
 *                              Functions Definitions                           *
 *******************************************************************************/
static TIMER_STATE CalculateSettings(en_Timer _which, uint8 _clk, uint16 _duration, uint16* _start, uint16* _overflows)
{
     e2e:	af 92       	push	r10
     e30:	bf 92       	push	r11
     e32:	cf 92       	push	r12
     e34:	df 92       	push	r13
     e36:	ef 92       	push	r14
     e38:	ff 92       	push	r15
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	66 97       	sbiw	r28, 0x16	; 22
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61
     e52:	8f 87       	std	Y+15, r24	; 0x0f
     e54:	68 8b       	std	Y+16, r22	; 0x10
     e56:	5a 8b       	std	Y+18, r21	; 0x12
     e58:	49 8b       	std	Y+17, r20	; 0x11
     e5a:	3c 8b       	std	Y+20, r19	; 0x14
     e5c:	2b 8b       	std	Y+19, r18	; 0x13
     e5e:	1e 8b       	std	Y+22, r17	; 0x16
     e60:	0d 8b       	std	Y+21, r16	; 0x15
	uint32_t MAX_Step = 0x0 ;
     e62:	19 86       	std	Y+9, r1	; 0x09
     e64:	1a 86       	std	Y+10, r1	; 0x0a
     e66:	1b 86       	std	Y+11, r1	; 0x0b
     e68:	1c 86       	std	Y+12, r1	; 0x0c
	if(_which == TIMER_0 || _which == TIMER_2)    // the determination for the type of timer.
     e6a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e6c:	88 23       	and	r24, r24
     e6e:	19 f0       	breq	.+6      	; 0xe76 <CalculateSettings+0x48>
     e70:	8f 85       	ldd	r24, Y+15	; 0x0f
     e72:	82 30       	cpi	r24, 0x02	; 2
     e74:	49 f4       	brne	.+18     	; 0xe88 <CalculateSettings+0x5a>
		MAX_Step = MAX_8 + 1;
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	91 e0       	ldi	r25, 0x01	; 1
     e7a:	a0 e0       	ldi	r26, 0x00	; 0
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	89 87       	std	Y+9, r24	; 0x09
     e80:	9a 87       	std	Y+10, r25	; 0x0a
     e82:	ab 87       	std	Y+11, r26	; 0x0b
     e84:	bc 87       	std	Y+12, r27	; 0x0c
     e86:	08 c0       	rjmp	.+16     	; 0xe98 <CalculateSettings+0x6a>
	else
		MAX_Step = MAX_16 + 1;
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	a1 e0       	ldi	r26, 0x01	; 1
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	89 87       	std	Y+9, r24	; 0x09
     e92:	9a 87       	std	Y+10, r25	; 0x0a
     e94:	ab 87       	std	Y+11, r26	; 0x0b
     e96:	bc 87       	std	Y+12, r27	; 0x0c
	 * For System Clock=1Mhz and timer prescaler is F_CPU/1024.
	 * Timer frequency will be around 1Khz, Ttimer = 1ms
	 * For initial timer counter = 6, overflow will occur every 250ms (6 --> 255 --> 6)
	 * Overflow interrupt will be generated every 250ms, so we need two overflow interrupts to count 0.5second.
	 */
	volatile uint16 prescaler = prescalers[_which][_clk];
     e98:	8f 85       	ldd	r24, Y+15	; 0x0f
     e9a:	48 2f       	mov	r20, r24
     e9c:	50 e0       	ldi	r21, 0x00	; 0
     e9e:	88 89       	ldd	r24, Y+16	; 0x10
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	ca 01       	movw	r24, r20
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	88 0f       	add	r24, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	82 0f       	add	r24, r18
     eb4:	93 1f       	adc	r25, r19
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	fc 01       	movw	r30, r24
     ebc:	e8 59       	subi	r30, 0x98	; 152
     ebe:	fe 4f       	sbci	r31, 0xFE	; 254
     ec0:	80 81       	ld	r24, Z
     ec2:	91 81       	ldd	r25, Z+1	; 0x01
     ec4:	9e 87       	std	Y+14, r25	; 0x0e
     ec6:	8d 87       	std	Y+13, r24	; 0x0d
	float T_tick = prescaler/(F_CPU *1.0f)*1000 ;		// from micro to milli    T_tick( time of one clock )
     ec8:	8d 85       	ldd	r24, Y+13	; 0x0d
     eca:	9e 85       	ldd	r25, Y+14	; 0x0e
     ecc:	cc 01       	movw	r24, r24
     ece:	a0 e0       	ldi	r26, 0x00	; 0
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	bc 01       	movw	r22, r24
     ed4:	cd 01       	movw	r24, r26
     ed6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     eda:	dc 01       	movw	r26, r24
     edc:	cb 01       	movw	r24, r22
     ede:	bc 01       	movw	r22, r24
     ee0:	cd 01       	movw	r24, r26
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	34 e2       	ldi	r19, 0x24	; 36
     ee6:	44 e7       	ldi	r20, 0x74	; 116
     ee8:	59 e4       	ldi	r21, 0x49	; 73
     eea:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     eee:	dc 01       	movw	r26, r24
     ef0:	cb 01       	movw	r24, r22
     ef2:	bc 01       	movw	r22, r24
     ef4:	cd 01       	movw	r24, r26
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	4a e7       	ldi	r20, 0x7A	; 122
     efc:	54 e4       	ldi	r21, 0x44	; 68
     efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f02:	dc 01       	movw	r26, r24
     f04:	cb 01       	movw	r24, r22
     f06:	8d 83       	std	Y+5, r24	; 0x05
     f08:	9e 83       	std	Y+6, r25	; 0x06
     f0a:	af 83       	std	Y+7, r26	; 0x07
     f0c:	b8 87       	std	Y+8, r27	; 0x08
	float T_max = T_tick * MAX_Step ;
     f0e:	69 85       	ldd	r22, Y+9	; 0x09
     f10:	7a 85       	ldd	r23, Y+10	; 0x0a
     f12:	8b 85       	ldd	r24, Y+11	; 0x0b
     f14:	9c 85       	ldd	r25, Y+12	; 0x0c
     f16:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	bc 01       	movw	r22, r24
     f20:	cd 01       	movw	r24, r26
     f22:	2d 81       	ldd	r18, Y+5	; 0x05
     f24:	3e 81       	ldd	r19, Y+6	; 0x06
     f26:	4f 81       	ldd	r20, Y+7	; 0x07
     f28:	58 85       	ldd	r21, Y+8	; 0x08
     f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f2e:	dc 01       	movw	r26, r24
     f30:	cb 01       	movw	r24, r22
     f32:	89 83       	std	Y+1, r24	; 0x01
     f34:	9a 83       	std	Y+2, r25	; 0x02
     f36:	ab 83       	std	Y+3, r26	; 0x03
     f38:	bc 83       	std	Y+4, r27	; 0x04
	if( T_max == _duration ){
     f3a:	89 89       	ldd	r24, Y+17	; 0x11
     f3c:	9a 89       	ldd	r25, Y+18	; 0x12
     f3e:	cc 01       	movw	r24, r24
     f40:	a0 e0       	ldi	r26, 0x00	; 0
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	bc 01       	movw	r22, r24
     f46:	cd 01       	movw	r24, r26
     f48:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	bc 01       	movw	r22, r24
     f52:	cd 01       	movw	r24, r26
     f54:	29 81       	ldd	r18, Y+1	; 0x01
     f56:	3a 81       	ldd	r19, Y+2	; 0x02
     f58:	4b 81       	ldd	r20, Y+3	; 0x03
     f5a:	5c 81       	ldd	r21, Y+4	; 0x04
     f5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
     f60:	88 23       	and	r24, r24
     f62:	39 f4       	brne	.+14     	; 0xf72 <CalculateSettings+0x144>
		* _start=_duration;
     f64:	eb 89       	ldd	r30, Y+19	; 0x13
     f66:	fc 89       	ldd	r31, Y+20	; 0x14
     f68:	89 89       	ldd	r24, Y+17	; 0x11
     f6a:	9a 89       	ldd	r25, Y+18	; 0x12
     f6c:	91 83       	std	Z+1, r25	; 0x01
     f6e:	80 83       	st	Z, r24
     f70:	a6 c0       	rjmp	.+332    	; 0x10be <CalculateSettings+0x290>
	}else if ( _duration < T_max ){
     f72:	89 89       	ldd	r24, Y+17	; 0x11
     f74:	9a 89       	ldd	r25, Y+18	; 0x12
     f76:	cc 01       	movw	r24, r24
     f78:	a0 e0       	ldi	r26, 0x00	; 0
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	bc 01       	movw	r22, r24
     f7e:	cd 01       	movw	r24, r26
     f80:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     f84:	dc 01       	movw	r26, r24
     f86:	cb 01       	movw	r24, r22
     f88:	bc 01       	movw	r22, r24
     f8a:	cd 01       	movw	r24, r26
     f8c:	29 81       	ldd	r18, Y+1	; 0x01
     f8e:	3a 81       	ldd	r19, Y+2	; 0x02
     f90:	4b 81       	ldd	r20, Y+3	; 0x03
     f92:	5c 81       	ldd	r21, Y+4	; 0x04
     f94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f98:	88 23       	and	r24, r24
     f9a:	44 f5       	brge	.+80     	; 0xfec <CalculateSettings+0x1be>
		*_start = (T_max - _duration) / T_tick ;
     f9c:	89 89       	ldd	r24, Y+17	; 0x11
     f9e:	9a 89       	ldd	r25, Y+18	; 0x12
     fa0:	cc 01       	movw	r24, r24
     fa2:	a0 e0       	ldi	r26, 0x00	; 0
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	bc 01       	movw	r22, r24
     fa8:	cd 01       	movw	r24, r26
     faa:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     fae:	9b 01       	movw	r18, r22
     fb0:	ac 01       	movw	r20, r24
     fb2:	69 81       	ldd	r22, Y+1	; 0x01
     fb4:	7a 81       	ldd	r23, Y+2	; 0x02
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	9c 81       	ldd	r25, Y+4	; 0x04
     fba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     fbe:	dc 01       	movw	r26, r24
     fc0:	cb 01       	movw	r24, r22
     fc2:	bc 01       	movw	r22, r24
     fc4:	cd 01       	movw	r24, r26
     fc6:	2d 81       	ldd	r18, Y+5	; 0x05
     fc8:	3e 81       	ldd	r19, Y+6	; 0x06
     fca:	4f 81       	ldd	r20, Y+7	; 0x07
     fcc:	58 85       	ldd	r21, Y+8	; 0x08
     fce:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     fd2:	dc 01       	movw	r26, r24
     fd4:	cb 01       	movw	r24, r22
     fd6:	bc 01       	movw	r22, r24
     fd8:	cd 01       	movw	r24, r26
     fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	eb 89       	ldd	r30, Y+19	; 0x13
     fe4:	fc 89       	ldd	r31, Y+20	; 0x14
     fe6:	91 83       	std	Z+1, r25	; 0x01
     fe8:	80 83       	st	Z, r24
     fea:	69 c0       	rjmp	.+210    	; 0x10be <CalculateSettings+0x290>
	}else
	{
		*_overflows = ceil(_duration / T_max);
     fec:	89 89       	ldd	r24, Y+17	; 0x11
     fee:	9a 89       	ldd	r25, Y+18	; 0x12
     ff0:	cc 01       	movw	r24, r24
     ff2:	a0 e0       	ldi	r26, 0x00	; 0
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	bc 01       	movw	r22, r24
     ff8:	cd 01       	movw	r24, r26
     ffa:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	bc 01       	movw	r22, r24
    1004:	cd 01       	movw	r24, r26
    1006:	29 81       	ldd	r18, Y+1	; 0x01
    1008:	3a 81       	ldd	r19, Y+2	; 0x02
    100a:	4b 81       	ldd	r20, Y+3	; 0x03
    100c:	5c 81       	ldd	r21, Y+4	; 0x04
    100e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	bc 01       	movw	r22, r24
    1018:	cd 01       	movw	r24, r26
    101a:	0e 94 df 18 	call	0x31be	; 0x31be <ceil>
    101e:	dc 01       	movw	r26, r24
    1020:	cb 01       	movw	r24, r22
    1022:	bc 01       	movw	r22, r24
    1024:	cd 01       	movw	r24, r26
    1026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    102a:	dc 01       	movw	r26, r24
    102c:	cb 01       	movw	r24, r22
    102e:	ed 89       	ldd	r30, Y+21	; 0x15
    1030:	fe 89       	ldd	r31, Y+22	; 0x16
    1032:	91 83       	std	Z+1, r25	; 0x01
    1034:	80 83       	st	Z, r24
		*_start = MAX_Step - ( _duration / T_tick) / *_overflows ;
    1036:	69 85       	ldd	r22, Y+9	; 0x09
    1038:	7a 85       	ldd	r23, Y+10	; 0x0a
    103a:	8b 85       	ldd	r24, Y+11	; 0x0b
    103c:	9c 85       	ldd	r25, Y+12	; 0x0c
    103e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1042:	5b 01       	movw	r10, r22
    1044:	6c 01       	movw	r12, r24
    1046:	89 89       	ldd	r24, Y+17	; 0x11
    1048:	9a 89       	ldd	r25, Y+18	; 0x12
    104a:	cc 01       	movw	r24, r24
    104c:	a0 e0       	ldi	r26, 0x00	; 0
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	bc 01       	movw	r22, r24
    1052:	cd 01       	movw	r24, r26
    1054:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	bc 01       	movw	r22, r24
    105e:	cd 01       	movw	r24, r26
    1060:	2d 81       	ldd	r18, Y+5	; 0x05
    1062:	3e 81       	ldd	r19, Y+6	; 0x06
    1064:	4f 81       	ldd	r20, Y+7	; 0x07
    1066:	58 85       	ldd	r21, Y+8	; 0x08
    1068:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	7c 01       	movw	r14, r24
    1072:	8d 01       	movw	r16, r26
    1074:	ed 89       	ldd	r30, Y+21	; 0x15
    1076:	fe 89       	ldd	r31, Y+22	; 0x16
    1078:	80 81       	ld	r24, Z
    107a:	91 81       	ldd	r25, Z+1	; 0x01
    107c:	cc 01       	movw	r24, r24
    107e:	a0 e0       	ldi	r26, 0x00	; 0
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	bc 01       	movw	r22, r24
    1084:	cd 01       	movw	r24, r26
    1086:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    108a:	9b 01       	movw	r18, r22
    108c:	ac 01       	movw	r20, r24
    108e:	c8 01       	movw	r24, r16
    1090:	b7 01       	movw	r22, r14
    1092:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1096:	dc 01       	movw	r26, r24
    1098:	cb 01       	movw	r24, r22
    109a:	9c 01       	movw	r18, r24
    109c:	ad 01       	movw	r20, r26
    109e:	c6 01       	movw	r24, r12
    10a0:	b5 01       	movw	r22, r10
    10a2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    10a6:	dc 01       	movw	r26, r24
    10a8:	cb 01       	movw	r24, r22
    10aa:	bc 01       	movw	r22, r24
    10ac:	cd 01       	movw	r24, r26
    10ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b2:	dc 01       	movw	r26, r24
    10b4:	cb 01       	movw	r24, r22
    10b6:	eb 89       	ldd	r30, Y+19	; 0x13
    10b8:	fc 89       	ldd	r31, Y+20	; 0x14
    10ba:	91 83       	std	Z+1, r25	; 0x01
    10bc:	80 83       	st	Z, r24
	}
	return TIM_SUCCESS;
    10be:	81 e0       	ldi	r24, 0x01	; 1
}
    10c0:	66 96       	adiw	r28, 0x16	; 22
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	f8 94       	cli
    10c6:	de bf       	out	0x3e, r29	; 62
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	cd bf       	out	0x3d, r28	; 61
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	1f 91       	pop	r17
    10d2:	0f 91       	pop	r16
    10d4:	ff 90       	pop	r15
    10d6:	ef 90       	pop	r14
    10d8:	df 90       	pop	r13
    10da:	cf 90       	pop	r12
    10dc:	bf 90       	pop	r11
    10de:	af 90       	pop	r10
    10e0:	08 95       	ret

000010e2 <Timer0_Init>:
/***************************    Timer0    ***************************/
TIMER_STATE Timer0_Init(en_WGM0 _WGM, en_COM0 _COM, uint8 _setInterrupt){
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	28 97       	sbiw	r28, 0x08	; 8
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	cd bf       	out	0x3d, r28	; 61
    10f6:	89 83       	std	Y+1, r24	; 0x01
    10f8:	6a 83       	std	Y+2, r22	; 0x02
    10fa:	4b 83       	std	Y+3, r20	; 0x03
	if(g_Timer0.initialized == 1)
    10fc:	80 91 aa 01 	lds	r24, 0x01AA
    1100:	81 30       	cpi	r24, 0x01	; 1
    1102:	11 f4       	brne	.+4      	; 0x1108 <Timer0_Init+0x26>
		return TIM_FAILURE;
    1104:	18 86       	std	Y+8, r1	; 0x08
    1106:	f1 c0       	rjmp	.+482    	; 0x12ea <Timer0_Init+0x208>
	SET_BIT(DDRB,3);                // set the OC0 pin to output mode
    1108:	a7 e3       	ldi	r26, 0x37	; 55
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e7 e3       	ldi	r30, 0x37	; 55
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	88 60       	ori	r24, 0x08	; 8
    1114:	8c 93       	st	X, r24
	switch (_WGM)
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	3f 83       	std	Y+7, r19	; 0x07
    111e:	2e 83       	std	Y+6, r18	; 0x06
    1120:	8e 81       	ldd	r24, Y+6	; 0x06
    1122:	9f 81       	ldd	r25, Y+7	; 0x07
    1124:	81 30       	cpi	r24, 0x01	; 1
    1126:	91 05       	cpc	r25, r1
    1128:	69 f1       	breq	.+90     	; 0x1184 <Timer0_Init+0xa2>
    112a:	2e 81       	ldd	r18, Y+6	; 0x06
    112c:	3f 81       	ldd	r19, Y+7	; 0x07
    112e:	22 30       	cpi	r18, 0x02	; 2
    1130:	31 05       	cpc	r19, r1
    1132:	2c f4       	brge	.+10     	; 0x113e <Timer0_Init+0x5c>
    1134:	8e 81       	ldd	r24, Y+6	; 0x06
    1136:	9f 81       	ldd	r25, Y+7	; 0x07
    1138:	00 97       	sbiw	r24, 0x00	; 0
    113a:	69 f0       	breq	.+26     	; 0x1156 <Timer0_Init+0x74>
    113c:	6b c0       	rjmp	.+214    	; 0x1214 <Timer0_Init+0x132>
    113e:	2e 81       	ldd	r18, Y+6	; 0x06
    1140:	3f 81       	ldd	r19, Y+7	; 0x07
    1142:	22 30       	cpi	r18, 0x02	; 2
    1144:	31 05       	cpc	r19, r1
    1146:	b1 f1       	breq	.+108    	; 0x11b4 <Timer0_Init+0xd2>
    1148:	8e 81       	ldd	r24, Y+6	; 0x06
    114a:	9f 81       	ldd	r25, Y+7	; 0x07
    114c:	83 30       	cpi	r24, 0x03	; 3
    114e:	91 05       	cpc	r25, r1
    1150:	09 f4       	brne	.+2      	; 0x1154 <Timer0_Init+0x72>
    1152:	48 c0       	rjmp	.+144    	; 0x11e4 <Timer0_Init+0x102>
    1154:	5f c0       	rjmp	.+190    	; 0x1214 <Timer0_Init+0x132>
			/* Configure the timer control register
		 * 1. Non PWM mode FOC0=1
		 * 2. Normal Mode WGM01=0 & WGM00=0
		 * 3. Normal Mode COM00=0 & COM01=0
		 */
			CLEAR_BIT(TCCR0, WGM00);
    1156:	a3 e5       	ldi	r26, 0x53	; 83
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e3 e5       	ldi	r30, 0x53	; 83
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	8f 7b       	andi	r24, 0xBF	; 191
    1162:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0, WGM01);
    1164:	a3 e5       	ldi	r26, 0x53	; 83
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e3 e5       	ldi	r30, 0x53	; 83
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	87 7f       	andi	r24, 0xF7	; 247
    1170:	8c 93       	st	X, r24
			( TIMSK |= ((unsigned) _setInterrupt << TOIE0));	// Enable Timer0 Overflow Interrupt
    1172:	a9 e5       	ldi	r26, 0x59	; 89
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e9 e5       	ldi	r30, 0x59	; 89
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	90 81       	ld	r25, Z
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	89 2b       	or	r24, r25
    1180:	8c 93       	st	X, r24
    1182:	4a c0       	rjmp	.+148    	; 0x1218 <Timer0_Init+0x136>
			break;
		}
		case WGM0_CTC:
		{

			CLEAR_BIT(TCCR0, WGM00);
    1184:	a3 e5       	ldi	r26, 0x53	; 83
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e3 e5       	ldi	r30, 0x53	; 83
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	8f 7b       	andi	r24, 0xBF	; 191
    1190:	8c 93       	st	X, r24
			SET_BIT(TCCR0, WGM01);
    1192:	a3 e5       	ldi	r26, 0x53	; 83
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e3 e5       	ldi	r30, 0x53	; 83
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	88 60       	ori	r24, 0x08	; 8
    119e:	8c 93       	st	X, r24
			( TIMSK |= ((unsigned) _setInterrupt << OCIE0));	// Enable Timer0 Overflow Interrupt
    11a0:	a9 e5       	ldi	r26, 0x59	; 89
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e9 e5       	ldi	r30, 0x59	; 89
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	90 81       	ld	r25, Z
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	88 0f       	add	r24, r24
    11ae:	89 2b       	or	r24, r25
    11b0:	8c 93       	st	X, r24
    11b2:	32 c0       	rjmp	.+100    	; 0x1218 <Timer0_Init+0x136>
			break;
		}
		case WGM0_FAST_PWM :
		{
			SET_BIT(TCCR0, WGM00);
    11b4:	a3 e5       	ldi	r26, 0x53	; 83
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e3 e5       	ldi	r30, 0x53	; 83
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	80 64       	ori	r24, 0x40	; 64
    11c0:	8c 93       	st	X, r24
			SET_BIT(TCCR0, WGM01);
    11c2:	a3 e5       	ldi	r26, 0x53	; 83
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e3 e5       	ldi	r30, 0x53	; 83
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	88 60       	ori	r24, 0x08	; 8
    11ce:	8c 93       	st	X, r24
			( TIMSK |= ((unsigned) _setInterrupt << OCIE0));	// Enable Timer0 Overflow Interrupt
    11d0:	a9 e5       	ldi	r26, 0x59	; 89
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e9 e5       	ldi	r30, 0x59	; 89
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	90 81       	ld	r25, Z
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	88 0f       	add	r24, r24
    11de:	89 2b       	or	r24, r25
    11e0:	8c 93       	st	X, r24
    11e2:	1a c0       	rjmp	.+52     	; 0x1218 <Timer0_Init+0x136>
			break;
		}
		case WGM0_PHASE_CORRECT_PWM:
		{
			SET_BIT(TCCR0, WGM00);
    11e4:	a3 e5       	ldi	r26, 0x53	; 83
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e3 e5       	ldi	r30, 0x53	; 83
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	80 64       	ori	r24, 0x40	; 64
    11f0:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0, WGM01);
    11f2:	a3 e5       	ldi	r26, 0x53	; 83
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e3 e5       	ldi	r30, 0x53	; 83
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	87 7f       	andi	r24, 0xF7	; 247
    11fe:	8c 93       	st	X, r24
			( TIMSK |= ((unsigned) _setInterrupt << OCIE0));	// Enable Timer0 Overflow Interrupt
    1200:	a9 e5       	ldi	r26, 0x59	; 89
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e9 e5       	ldi	r30, 0x59	; 89
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	90 81       	ld	r25, Z
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	88 0f       	add	r24, r24
    120e:	89 2b       	or	r24, r25
    1210:	8c 93       	st	X, r24
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <Timer0_Init+0x136>
			break;
		}
		default:
			return TIM_FAILURE;
    1214:	18 86       	std	Y+8, r1	; 0x08
    1216:	69 c0       	rjmp	.+210    	; 0x12ea <Timer0_Init+0x208>
	}
	/* Set Output Compare Mode */
		switch(_COM)
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	3d 83       	std	Y+5, r19	; 0x05
    1220:	2c 83       	std	Y+4, r18	; 0x04
    1222:	8c 81       	ldd	r24, Y+4	; 0x04
    1224:	9d 81       	ldd	r25, Y+5	; 0x05
    1226:	85 30       	cpi	r24, 0x05	; 5
    1228:	91 05       	cpc	r25, r1
    122a:	a1 f1       	breq	.+104    	; 0x1294 <Timer0_Init+0x1b2>
    122c:	2c 81       	ldd	r18, Y+4	; 0x04
    122e:	3d 81       	ldd	r19, Y+5	; 0x05
    1230:	26 30       	cpi	r18, 0x06	; 6
    1232:	31 05       	cpc	r19, r1
    1234:	84 f4       	brge	.+32     	; 0x1256 <Timer0_Init+0x174>
    1236:	8c 81       	ldd	r24, Y+4	; 0x04
    1238:	9d 81       	ldd	r25, Y+5	; 0x05
    123a:	82 30       	cpi	r24, 0x02	; 2
    123c:	91 05       	cpc	r25, r1
    123e:	51 f1       	breq	.+84     	; 0x1294 <Timer0_Init+0x1b2>
    1240:	2c 81       	ldd	r18, Y+4	; 0x04
    1242:	3d 81       	ldd	r19, Y+5	; 0x05
    1244:	23 30       	cpi	r18, 0x03	; 3
    1246:	31 05       	cpc	r19, r1
    1248:	a1 f1       	breq	.+104    	; 0x12b2 <Timer0_Init+0x1d0>
    124a:	8c 81       	ldd	r24, Y+4	; 0x04
    124c:	9d 81       	ldd	r25, Y+5	; 0x05
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	91 05       	cpc	r25, r1
    1252:	89 f0       	breq	.+34     	; 0x1276 <Timer0_Init+0x194>
    1254:	3d c0       	rjmp	.+122    	; 0x12d0 <Timer0_Init+0x1ee>
    1256:	2c 81       	ldd	r18, Y+4	; 0x04
    1258:	3d 81       	ldd	r19, Y+5	; 0x05
    125a:	28 30       	cpi	r18, 0x08	; 8
    125c:	31 05       	cpc	r19, r1
    125e:	d1 f0       	breq	.+52     	; 0x1294 <Timer0_Init+0x1b2>
    1260:	8c 81       	ldd	r24, Y+4	; 0x04
    1262:	9d 81       	ldd	r25, Y+5	; 0x05
    1264:	89 30       	cpi	r24, 0x09	; 9
    1266:	91 05       	cpc	r25, r1
    1268:	21 f1       	breq	.+72     	; 0x12b2 <Timer0_Init+0x1d0>
    126a:	2c 81       	ldd	r18, Y+4	; 0x04
    126c:	3d 81       	ldd	r19, Y+5	; 0x05
    126e:	26 30       	cpi	r18, 0x06	; 6
    1270:	31 05       	cpc	r19, r1
    1272:	f9 f0       	breq	.+62     	; 0x12b2 <Timer0_Init+0x1d0>
    1274:	2d c0       	rjmp	.+90     	; 0x12d0 <Timer0_Init+0x1ee>
		{
			case COM0_NON_PWM_TOGGLE:				// 0 1
			{
				SET_BIT(TCCR0, COM00);
    1276:	a3 e5       	ldi	r26, 0x53	; 83
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e3 e5       	ldi	r30, 0x53	; 83
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	80 61       	ori	r24, 0x10	; 16
    1282:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0, COM01);
    1284:	a3 e5       	ldi	r26, 0x53	; 83
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	e3 e5       	ldi	r30, 0x53	; 83
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	8f 7d       	andi	r24, 0xDF	; 223
    1290:	8c 93       	st	X, r24
    1292:	20 c0       	rjmp	.+64     	; 0x12d4 <Timer0_Init+0x1f2>
			// intended fall through, all of those cases set the same bits
			case COM0_NON_PWM_CLEAR:				// 1 0
			case COM0_FAST_PWM_NV:
			case COM0_PHASE_CORRECT_NV:
			{
				CLEAR_BIT(TCCR0, COM00);
    1294:	a3 e5       	ldi	r26, 0x53	; 83
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e3 e5       	ldi	r30, 0x53	; 83
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	8f 7e       	andi	r24, 0xEF	; 239
    12a0:	8c 93       	st	X, r24
				SET_BIT(TCCR0, COM01);
    12a2:	a3 e5       	ldi	r26, 0x53	; 83
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e3 e5       	ldi	r30, 0x53	; 83
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	80 62       	ori	r24, 0x20	; 32
    12ae:	8c 93       	st	X, r24
    12b0:	11 c0       	rjmp	.+34     	; 0x12d4 <Timer0_Init+0x1f2>

			case COM0_NON_PWM_SET:					// 1 1
			case COM0_FAST_PWM_IV:
			case COM0_PHASE_CORRECT_IV:
			{
				SET_BIT(TCCR0, COM00);
    12b2:	a3 e5       	ldi	r26, 0x53	; 83
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e3 e5       	ldi	r30, 0x53	; 83
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	80 61       	ori	r24, 0x10	; 16
    12be:	8c 93       	st	X, r24
				SET_BIT(TCCR0, COM01);
    12c0:	a3 e5       	ldi	r26, 0x53	; 83
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e3 e5       	ldi	r30, 0x53	; 83
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	80 62       	ori	r24, 0x20	; 32
    12cc:	8c 93       	st	X, r24
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <Timer0_Init+0x1f2>
				break;
			}

			default:
				return TIM_FAILURE;
    12d0:	18 86       	std	Y+8, r1	; 0x08
    12d2:	0b c0       	rjmp	.+22     	; 0x12ea <Timer0_Init+0x208>
		}
		g_Timer0.initialized = 1;
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	80 93 aa 01 	sts	0x01AA, r24
		g_Timer0.COM = _COM;
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	80 93 ac 01 	sts	0x01AC, r24
		g_Timer0.WGM = _WGM;
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	80 93 ab 01 	sts	0x01AB, r24

		return TIM_SUCCESS;
    12e6:	31 e0       	ldi	r19, 0x01	; 1
    12e8:	38 87       	std	Y+8, r19	; 0x08
    12ea:	88 85       	ldd	r24, Y+8	; 0x08
};
    12ec:	28 96       	adiw	r28, 0x08	; 8
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	de bf       	out	0x3e, r29	; 62
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	cd bf       	out	0x3d, r28	; 61
    12f8:	cf 91       	pop	r28
    12fa:	df 91       	pop	r29
    12fc:	08 95       	ret

000012fe <Timer0_Start>:
TIMER_STATE Timer0_Start(en_CS0 _clk, uint16 _count)
{
    12fe:	df 93       	push	r29
    1300:	cf 93       	push	r28
    1302:	00 d0       	rcall	.+0      	; 0x1304 <Timer0_Start+0x6>
    1304:	00 d0       	rcall	.+0      	; 0x1306 <Timer0_Start+0x8>
    1306:	00 d0       	rcall	.+0      	; 0x1308 <Timer0_Start+0xa>
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
    130c:	89 83       	std	Y+1, r24	; 0x01
    130e:	7b 83       	std	Y+3, r23	; 0x03
    1310:	6a 83       	std	Y+2, r22	; 0x02
	if(_clk > CS0_XTRN_RISE || g_Timer0.initialized == 0)
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	88 30       	cpi	r24, 0x08	; 8
    1316:	20 f4       	brcc	.+8      	; 0x1320 <Timer0_Start+0x22>
    1318:	80 91 aa 01 	lds	r24, 0x01AA
    131c:	88 23       	and	r24, r24
    131e:	11 f4       	brne	.+4      	; 0x1324 <Timer0_Start+0x26>
		return TIM_FAILURE;
    1320:	1e 82       	std	Y+6, r1	; 0x06
    1322:	2c c0       	rjmp	.+88     	; 0x137c <Timer0_Start+0x7e>
	switch(g_Timer0.WGM)
    1324:	80 91 ab 01 	lds	r24, 0x01AB
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	3d 83       	std	Y+5, r19	; 0x05
    132e:	2c 83       	std	Y+4, r18	; 0x04
    1330:	8c 81       	ldd	r24, Y+4	; 0x04
    1332:	9d 81       	ldd	r25, Y+5	; 0x05
    1334:	00 97       	sbiw	r24, 0x00	; 0
    1336:	51 f0       	breq	.+20     	; 0x134c <Timer0_Start+0x4e>
    1338:	2c 81       	ldd	r18, Y+4	; 0x04
    133a:	3d 81       	ldd	r19, Y+5	; 0x05
    133c:	33 23       	and	r19, r19
    133e:	84 f0       	brlt	.+32     	; 0x1360 <Timer0_Start+0x62>
    1340:	8c 81       	ldd	r24, Y+4	; 0x04
    1342:	9d 81       	ldd	r25, Y+5	; 0x05
    1344:	84 30       	cpi	r24, 0x04	; 4
    1346:	91 05       	cpc	r25, r1
    1348:	5c f4       	brge	.+22     	; 0x1360 <Timer0_Start+0x62>
    134a:	05 c0       	rjmp	.+10     	; 0x1356 <Timer0_Start+0x58>
	{
		case WGM0_NORMAL:
		{
			TCNT0 = _count & 0xFF;
    134c:	e2 e5       	ldi	r30, 0x52	; 82
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	80 83       	st	Z, r24
    1354:	07 c0       	rjmp	.+14     	; 0x1364 <Timer0_Start+0x66>
		}
		case WGM0_PHASE_CORRECT_PWM:
		case WGM0_FAST_PWM:
		case WGM0_CTC:
		{
			OCR0 = _count & 0xFF;
    1356:	ec e5       	ldi	r30, 0x5C	; 92
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	80 83       	st	Z, r24
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <Timer0_Start+0x66>
			break;
		}

		default:
			return TIM_FAILURE;
    1360:	1e 82       	std	Y+6, r1	; 0x06
    1362:	0c c0       	rjmp	.+24     	; 0x137c <Timer0_Start+0x7e>
	}
	TCCR0 |= (_clk & 0x07);
    1364:	a3 e5       	ldi	r26, 0x53	; 83
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	e3 e5       	ldi	r30, 0x53	; 83
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	98 2f       	mov	r25, r24
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	87 70       	andi	r24, 0x07	; 7
    1374:	89 2b       	or	r24, r25
    1376:	8c 93       	st	X, r24

	return TIM_SUCCESS;
    1378:	91 e0       	ldi	r25, 0x01	; 1
    137a:	9e 83       	std	Y+6, r25	; 0x06
    137c:	8e 81       	ldd	r24, Y+6	; 0x06
}
    137e:	26 96       	adiw	r28, 0x06	; 6
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	f8 94       	cli
    1384:	de bf       	out	0x3e, r29	; 62
    1386:	0f be       	out	0x3f, r0	; 63
    1388:	cd bf       	out	0x3d, r28	; 61
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	08 95       	ret

00001390 <Timer0_Sleep>:
TIMER_STATE Timer0_Sleep(uint16 _duration, en_CS0 _clk){
    1390:	0f 93       	push	r16
    1392:	1f 93       	push	r17
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    139c:	28 97       	sbiw	r28, 0x08	; 8
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	f8 94       	cli
    13a2:	de bf       	out	0x3e, r29	; 62
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	cd bf       	out	0x3d, r28	; 61
    13a8:	9e 83       	std	Y+6, r25	; 0x06
    13aa:	8d 83       	std	Y+5, r24	; 0x05
    13ac:	6f 83       	std	Y+7, r22	; 0x07
	if(_clk > CS0_XTRN_RISE)
    13ae:	8f 81       	ldd	r24, Y+7	; 0x07
    13b0:	88 30       	cpi	r24, 0x08	; 8
    13b2:	10 f0       	brcs	.+4      	; 0x13b8 <Timer0_Sleep+0x28>
		return TIM_FAILURE;
    13b4:	18 86       	std	Y+8, r1	; 0x08
    13b6:	46 c0       	rjmp	.+140    	; 0x1444 <Timer0_Sleep+0xb4>

	Timer0_Init(WGM0_NORMAL, COM0_DISCONNECTED, 0);
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	60 e0       	ldi	r22, 0x00	; 0
    13bc:	40 e0       	ldi	r20, 0x00	; 0
    13be:	0e 94 71 08 	call	0x10e2	; 0x10e2 <Timer0_Init>
	uint16 start = 0x00;
    13c2:	1a 82       	std	Y+2, r1	; 0x02
    13c4:	19 82       	std	Y+1, r1	; 0x01
	uint16 overflows = 0x00;
    13c6:	1c 82       	std	Y+4, r1	; 0x04
    13c8:	1b 82       	std	Y+3, r1	; 0x03
	CalculateSettings(TIMER_0, _clk, _duration, &start, &overflows);
    13ca:	2d 81       	ldd	r18, Y+5	; 0x05
    13cc:	3e 81       	ldd	r19, Y+6	; 0x06
    13ce:	fe 01       	movw	r30, r28
    13d0:	33 96       	adiw	r30, 0x03	; 3
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	6f 81       	ldd	r22, Y+7	; 0x07
    13d6:	a9 01       	movw	r20, r18
    13d8:	9e 01       	movw	r18, r28
    13da:	2f 5f       	subi	r18, 0xFF	; 255
    13dc:	3f 4f       	sbci	r19, 0xFF	; 255
    13de:	8f 01       	movw	r16, r30
    13e0:	0e 94 17 07 	call	0xe2e	; 0xe2e <CalculateSettings>
	do
		{
			TCNT0 = start;
    13e4:	e2 e5       	ldi	r30, 0x52	; 82
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	9a 81       	ldd	r25, Y+2	; 0x02
    13ec:	80 83       	st	Z, r24
			TCCR0 |= _clk & 0x07;
    13ee:	a3 e5       	ldi	r26, 0x53	; 83
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	e3 e5       	ldi	r30, 0x53	; 83
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	98 2f       	mov	r25, r24
    13fa:	8f 81       	ldd	r24, Y+7	; 0x07
    13fc:	87 70       	andi	r24, 0x07	; 7
    13fe:	89 2b       	or	r24, r25
    1400:	8c 93       	st	X, r24

			while(BIT_IS_CLEAR(TIFR, TOV0))
    1402:	e8 e5       	ldi	r30, 0x58	; 88
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	88 2f       	mov	r24, r24
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	81 70       	andi	r24, 0x01	; 1
    140e:	90 70       	andi	r25, 0x00	; 0
    1410:	00 97       	sbiw	r24, 0x00	; 0
    1412:	b9 f3       	breq	.-18     	; 0x1402 <Timer0_Sleep+0x72>
				;	// using polling ( busy wait )
			SET_BIT(TIFR, TOV0);
    1414:	a8 e5       	ldi	r26, 0x58	; 88
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e8 e5       	ldi	r30, 0x58	; 88
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	81 60       	ori	r24, 0x01	; 1
    1420:	8c 93       	st	X, r24

			if(overflows == 0)
    1422:	8b 81       	ldd	r24, Y+3	; 0x03
    1424:	9c 81       	ldd	r25, Y+4	; 0x04
    1426:	00 97       	sbiw	r24, 0x00	; 0
    1428:	49 f0       	breq	.+18     	; 0x143c <Timer0_Sleep+0xac>
				break;

		} while ( --overflows);
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	9c 81       	ldd	r25, Y+4	; 0x04
    142e:	01 97       	sbiw	r24, 0x01	; 1
    1430:	9c 83       	std	Y+4, r25	; 0x04
    1432:	8b 83       	std	Y+3, r24	; 0x03
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	9c 81       	ldd	r25, Y+4	; 0x04
    1438:	00 97       	sbiw	r24, 0x00	; 0
    143a:	a1 f6       	brne	.-88     	; 0x13e4 <Timer0_Sleep+0x54>
	Timer0_Stop();
    143c:	0e 94 2e 0a 	call	0x145c	; 0x145c <Timer0_Stop>

	return TIM_SUCCESS;
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	88 87       	std	Y+8, r24	; 0x08
    1444:	88 85       	ldd	r24, Y+8	; 0x08
}
    1446:	28 96       	adiw	r28, 0x08	; 8
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	f8 94       	cli
    144c:	de bf       	out	0x3e, r29	; 62
    144e:	0f be       	out	0x3f, r0	; 63
    1450:	cd bf       	out	0x3d, r28	; 61
    1452:	cf 91       	pop	r28
    1454:	df 91       	pop	r29
    1456:	1f 91       	pop	r17
    1458:	0f 91       	pop	r16
    145a:	08 95       	ret

0000145c <Timer0_Stop>:
TIMER_STATE Timer0_Stop()
{
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0x00;
    1464:	e3 e5       	ldi	r30, 0x53	; 83
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	10 82       	st	Z, r1
	TCNT0 = 0x00;
    146a:	e2 e5       	ldi	r30, 0x52	; 82
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	10 82       	st	Z, r1
	OCR0  = 0x00;
    1470:	ec e5       	ldi	r30, 0x5C	; 92
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	10 82       	st	Z, r1
	g_Timer0.initialized = 0;
    1476:	10 92 aa 01 	sts	0x01AA, r1

	return TIM_SUCCESS;
    147a:	81 e0       	ldi	r24, 0x01	; 1
}
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <Timer2_Init>:
/***************************    Timer2    ***************************/
TIMER_STATE Timer2_Init(en_WGM2 _WGM, en_COM2 _COM, uint8 _setInterrupt)
{
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	28 97       	sbiw	r28, 0x08	; 8
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	de bf       	out	0x3e, r29	; 62
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	cd bf       	out	0x3d, r28	; 61
    1496:	89 83       	std	Y+1, r24	; 0x01
    1498:	6a 83       	std	Y+2, r22	; 0x02
    149a:	4b 83       	std	Y+3, r20	; 0x03
	if(g_Timer2.initialized == 1)
    149c:	80 91 b0 01 	lds	r24, 0x01B0
    14a0:	81 30       	cpi	r24, 0x01	; 1
    14a2:	11 f4       	brne	.+4      	; 0x14a8 <Timer2_Init+0x26>
		return TIM_FAILURE;
    14a4:	18 86       	std	Y+8, r1	; 0x08
    14a6:	fb c0       	rjmp	.+502    	; 0x169e <Timer2_Init+0x21c>
	SET_BIT(DDRB,7);                // set the OC0 pin to output mode
    14a8:	a7 e3       	ldi	r26, 0x37	; 55
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e7 e3       	ldi	r30, 0x37	; 55
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	80 68       	ori	r24, 0x80	; 128
    14b4:	8c 93       	st	X, r24
	switch (_WGM)
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	3f 83       	std	Y+7, r19	; 0x07
    14be:	2e 83       	std	Y+6, r18	; 0x06
    14c0:	8e 81       	ldd	r24, Y+6	; 0x06
    14c2:	9f 81       	ldd	r25, Y+7	; 0x07
    14c4:	81 30       	cpi	r24, 0x01	; 1
    14c6:	91 05       	cpc	r25, r1
    14c8:	89 f1       	breq	.+98     	; 0x152c <Timer2_Init+0xaa>
    14ca:	2e 81       	ldd	r18, Y+6	; 0x06
    14cc:	3f 81       	ldd	r19, Y+7	; 0x07
    14ce:	22 30       	cpi	r18, 0x02	; 2
    14d0:	31 05       	cpc	r19, r1
    14d2:	2c f4       	brge	.+10     	; 0x14de <Timer2_Init+0x5c>
    14d4:	8e 81       	ldd	r24, Y+6	; 0x06
    14d6:	9f 81       	ldd	r25, Y+7	; 0x07
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	69 f0       	breq	.+26     	; 0x14f6 <Timer2_Init+0x74>
    14dc:	75 c0       	rjmp	.+234    	; 0x15c8 <Timer2_Init+0x146>
    14de:	2e 81       	ldd	r18, Y+6	; 0x06
    14e0:	3f 81       	ldd	r19, Y+7	; 0x07
    14e2:	22 30       	cpi	r18, 0x02	; 2
    14e4:	31 05       	cpc	r19, r1
    14e6:	e1 f1       	breq	.+120    	; 0x1560 <Timer2_Init+0xde>
    14e8:	8e 81       	ldd	r24, Y+6	; 0x06
    14ea:	9f 81       	ldd	r25, Y+7	; 0x07
    14ec:	83 30       	cpi	r24, 0x03	; 3
    14ee:	91 05       	cpc	r25, r1
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <Timer2_Init+0x72>
    14f2:	50 c0       	rjmp	.+160    	; 0x1594 <Timer2_Init+0x112>
    14f4:	69 c0       	rjmp	.+210    	; 0x15c8 <Timer2_Init+0x146>
			/* Configure the timer control register
		 * 1. Non PWM mode FOC0=1
		 * 2. Normal Mode WGM01=0 & WGM00=0
		 * 3. Normal Mode COM00=0 & COM01=0
		 */
			CLEAR_BIT(TCCR2, WGM20);
    14f6:	a5 e4       	ldi	r26, 0x45	; 69
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e5 e4       	ldi	r30, 0x45	; 69
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	8f 7b       	andi	r24, 0xBF	; 191
    1502:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2, WGM21);
    1504:	a5 e4       	ldi	r26, 0x45	; 69
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e5 e4       	ldi	r30, 0x45	; 69
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	87 7f       	andi	r24, 0xF7	; 247
    1510:	8c 93       	st	X, r24
			( TIMSK |= ((unsigned) _setInterrupt << TOIE2));	// Enable Timer0 Overflow Interrupt
    1512:	a9 e5       	ldi	r26, 0x59	; 89
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e9 e5       	ldi	r30, 0x59	; 89
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	90 81       	ld	r25, Z
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	82 95       	swap	r24
    1520:	88 0f       	add	r24, r24
    1522:	88 0f       	add	r24, r24
    1524:	80 7c       	andi	r24, 0xC0	; 192
    1526:	89 2b       	or	r24, r25
    1528:	8c 93       	st	X, r24
    152a:	50 c0       	rjmp	.+160    	; 0x15cc <Timer2_Init+0x14a>
			break;
		}
		case WGM2_CTC:
		{

			CLEAR_BIT(TCCR2, WGM20);
    152c:	a5 e4       	ldi	r26, 0x45	; 69
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e5 e4       	ldi	r30, 0x45	; 69
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	8f 7b       	andi	r24, 0xBF	; 191
    1538:	8c 93       	st	X, r24
			SET_BIT(TCCR2, WGM21);
    153a:	a5 e4       	ldi	r26, 0x45	; 69
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e5 e4       	ldi	r30, 0x45	; 69
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	88 60       	ori	r24, 0x08	; 8
    1546:	8c 93       	st	X, r24
			( TIMSK |= ((unsigned) _setInterrupt << OCIE2));	// Enable Timer0 Overflow Interrupt
    1548:	a9 e5       	ldi	r26, 0x59	; 89
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e9 e5       	ldi	r30, 0x59	; 89
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	90 81       	ld	r25, Z
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	87 95       	ror	r24
    1556:	88 27       	eor	r24, r24
    1558:	87 95       	ror	r24
    155a:	89 2b       	or	r24, r25
    155c:	8c 93       	st	X, r24
    155e:	36 c0       	rjmp	.+108    	; 0x15cc <Timer2_Init+0x14a>
			break;
		}
		case WGM2_FAST_PWM :
		{
			SET_BIT(TCCR2, WGM20);
    1560:	a5 e4       	ldi	r26, 0x45	; 69
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e5 e4       	ldi	r30, 0x45	; 69
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	80 64       	ori	r24, 0x40	; 64
    156c:	8c 93       	st	X, r24
			SET_BIT(TCCR2, WGM21);
    156e:	a5 e4       	ldi	r26, 0x45	; 69
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e5 e4       	ldi	r30, 0x45	; 69
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	88 60       	ori	r24, 0x08	; 8
    157a:	8c 93       	st	X, r24
			( TIMSK |= ((unsigned) _setInterrupt << OCIE2));	// Enable Timer0 Overflow Interrupt
    157c:	a9 e5       	ldi	r26, 0x59	; 89
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	e9 e5       	ldi	r30, 0x59	; 89
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	90 81       	ld	r25, Z
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	87 95       	ror	r24
    158a:	88 27       	eor	r24, r24
    158c:	87 95       	ror	r24
    158e:	89 2b       	or	r24, r25
    1590:	8c 93       	st	X, r24
    1592:	1c c0       	rjmp	.+56     	; 0x15cc <Timer2_Init+0x14a>
			break;
		}
		case WGM2_PHASE_CORRECT_PWM:
		{
			SET_BIT(TCCR2, WGM20);
    1594:	a5 e4       	ldi	r26, 0x45	; 69
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e5 e4       	ldi	r30, 0x45	; 69
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	80 64       	ori	r24, 0x40	; 64
    15a0:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2, WGM21);
    15a2:	a5 e4       	ldi	r26, 0x45	; 69
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e5 e4       	ldi	r30, 0x45	; 69
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	87 7f       	andi	r24, 0xF7	; 247
    15ae:	8c 93       	st	X, r24
			( TIMSK |= ((unsigned) _setInterrupt << OCIE2));	// Enable Timer0 Overflow Interrupt
    15b0:	a9 e5       	ldi	r26, 0x59	; 89
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e9 e5       	ldi	r30, 0x59	; 89
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	90 81       	ld	r25, Z
    15ba:	8b 81       	ldd	r24, Y+3	; 0x03
    15bc:	87 95       	ror	r24
    15be:	88 27       	eor	r24, r24
    15c0:	87 95       	ror	r24
    15c2:	89 2b       	or	r24, r25
    15c4:	8c 93       	st	X, r24
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <Timer2_Init+0x14a>
			break;
		}
		default:
			return TIM_FAILURE;
    15c8:	18 86       	std	Y+8, r1	; 0x08
    15ca:	69 c0       	rjmp	.+210    	; 0x169e <Timer2_Init+0x21c>
	}
	/* Set Output Compare Mode */
		switch(_COM)
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	3d 83       	std	Y+5, r19	; 0x05
    15d4:	2c 83       	std	Y+4, r18	; 0x04
    15d6:	8c 81       	ldd	r24, Y+4	; 0x04
    15d8:	9d 81       	ldd	r25, Y+5	; 0x05
    15da:	85 30       	cpi	r24, 0x05	; 5
    15dc:	91 05       	cpc	r25, r1
    15de:	a1 f1       	breq	.+104    	; 0x1648 <Timer2_Init+0x1c6>
    15e0:	2c 81       	ldd	r18, Y+4	; 0x04
    15e2:	3d 81       	ldd	r19, Y+5	; 0x05
    15e4:	26 30       	cpi	r18, 0x06	; 6
    15e6:	31 05       	cpc	r19, r1
    15e8:	84 f4       	brge	.+32     	; 0x160a <Timer2_Init+0x188>
    15ea:	8c 81       	ldd	r24, Y+4	; 0x04
    15ec:	9d 81       	ldd	r25, Y+5	; 0x05
    15ee:	82 30       	cpi	r24, 0x02	; 2
    15f0:	91 05       	cpc	r25, r1
    15f2:	51 f1       	breq	.+84     	; 0x1648 <Timer2_Init+0x1c6>
    15f4:	2c 81       	ldd	r18, Y+4	; 0x04
    15f6:	3d 81       	ldd	r19, Y+5	; 0x05
    15f8:	23 30       	cpi	r18, 0x03	; 3
    15fa:	31 05       	cpc	r19, r1
    15fc:	a1 f1       	breq	.+104    	; 0x1666 <Timer2_Init+0x1e4>
    15fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1600:	9d 81       	ldd	r25, Y+5	; 0x05
    1602:	81 30       	cpi	r24, 0x01	; 1
    1604:	91 05       	cpc	r25, r1
    1606:	89 f0       	breq	.+34     	; 0x162a <Timer2_Init+0x1a8>
    1608:	3d c0       	rjmp	.+122    	; 0x1684 <Timer2_Init+0x202>
    160a:	2c 81       	ldd	r18, Y+4	; 0x04
    160c:	3d 81       	ldd	r19, Y+5	; 0x05
    160e:	28 30       	cpi	r18, 0x08	; 8
    1610:	31 05       	cpc	r19, r1
    1612:	d1 f0       	breq	.+52     	; 0x1648 <Timer2_Init+0x1c6>
    1614:	8c 81       	ldd	r24, Y+4	; 0x04
    1616:	9d 81       	ldd	r25, Y+5	; 0x05
    1618:	89 30       	cpi	r24, 0x09	; 9
    161a:	91 05       	cpc	r25, r1
    161c:	21 f1       	breq	.+72     	; 0x1666 <Timer2_Init+0x1e4>
    161e:	2c 81       	ldd	r18, Y+4	; 0x04
    1620:	3d 81       	ldd	r19, Y+5	; 0x05
    1622:	26 30       	cpi	r18, 0x06	; 6
    1624:	31 05       	cpc	r19, r1
    1626:	f9 f0       	breq	.+62     	; 0x1666 <Timer2_Init+0x1e4>
    1628:	2d c0       	rjmp	.+90     	; 0x1684 <Timer2_Init+0x202>
		{
			case COM2_NON_PWM_TOGGLE:				// 0 1
			{
				SET_BIT(TCCR2, COM20);
    162a:	a5 e4       	ldi	r26, 0x45	; 69
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e5 e4       	ldi	r30, 0x45	; 69
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	80 61       	ori	r24, 0x10	; 16
    1636:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2, COM21);
    1638:	a5 e4       	ldi	r26, 0x45	; 69
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	e5 e4       	ldi	r30, 0x45	; 69
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	8f 7d       	andi	r24, 0xDF	; 223
    1644:	8c 93       	st	X, r24
    1646:	20 c0       	rjmp	.+64     	; 0x1688 <Timer2_Init+0x206>
			// intended fall through, all of those cases set the same bits
			case COM2_NON_PWM_CLEAR:				// 1 0
			case COM2_FAST_PWM_NV:
			case COM2_PHASE_CORRECT_NV:
			{
				CLEAR_BIT(TCCR2, COM20);
    1648:	a5 e4       	ldi	r26, 0x45	; 69
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	e5 e4       	ldi	r30, 0x45	; 69
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	8f 7e       	andi	r24, 0xEF	; 239
    1654:	8c 93       	st	X, r24
				SET_BIT(TCCR2, COM21);
    1656:	a5 e4       	ldi	r26, 0x45	; 69
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e5 e4       	ldi	r30, 0x45	; 69
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	80 62       	ori	r24, 0x20	; 32
    1662:	8c 93       	st	X, r24
    1664:	11 c0       	rjmp	.+34     	; 0x1688 <Timer2_Init+0x206>

			case COM2_NON_PWM_SET:					// 1 1
			case COM2_FAST_PWM_IV:
			case COM2_PHASE_CORRECT_IV:
			{
				SET_BIT(TCCR2, COM20);
    1666:	a5 e4       	ldi	r26, 0x45	; 69
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e5 e4       	ldi	r30, 0x45	; 69
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	80 61       	ori	r24, 0x10	; 16
    1672:	8c 93       	st	X, r24
				SET_BIT(TCCR2, COM21);
    1674:	a5 e4       	ldi	r26, 0x45	; 69
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e5 e4       	ldi	r30, 0x45	; 69
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	80 62       	ori	r24, 0x20	; 32
    1680:	8c 93       	st	X, r24
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <Timer2_Init+0x206>
				break;
			}

			default:
				return TIM_FAILURE;
    1684:	18 86       	std	Y+8, r1	; 0x08
    1686:	0b c0       	rjmp	.+22     	; 0x169e <Timer2_Init+0x21c>
		}
		g_Timer2.initialized = 1;
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	80 93 b0 01 	sts	0x01B0, r24
		g_Timer2.COM = _COM;
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	80 93 b2 01 	sts	0x01B2, r24
		g_Timer2.WGM = _WGM;
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	80 93 b1 01 	sts	0x01B1, r24

		return TIM_SUCCESS;
    169a:	31 e0       	ldi	r19, 0x01	; 1
    169c:	38 87       	std	Y+8, r19	; 0x08
    169e:	88 85       	ldd	r24, Y+8	; 0x08
};
    16a0:	28 96       	adiw	r28, 0x08	; 8
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	f8 94       	cli
    16a6:	de bf       	out	0x3e, r29	; 62
    16a8:	0f be       	out	0x3f, r0	; 63
    16aa:	cd bf       	out	0x3d, r28	; 61
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	08 95       	ret

000016b2 <Timer2_Sleep>:
TIMER_STATE Timer2_Sleep(uint16 _duration, en_CS2 _clk)
{
    16b2:	0f 93       	push	r16
    16b4:	1f 93       	push	r17
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	28 97       	sbiw	r28, 0x08	; 8
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	f8 94       	cli
    16c4:	de bf       	out	0x3e, r29	; 62
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	cd bf       	out	0x3d, r28	; 61
    16ca:	9e 83       	std	Y+6, r25	; 0x06
    16cc:	8d 83       	std	Y+5, r24	; 0x05
    16ce:	6f 83       	std	Y+7, r22	; 0x07
	if(_clk > CS2_1024)
    16d0:	8f 81       	ldd	r24, Y+7	; 0x07
    16d2:	88 30       	cpi	r24, 0x08	; 8
    16d4:	10 f0       	brcs	.+4      	; 0x16da <Timer2_Sleep+0x28>
		return TIM_FAILURE;
    16d6:	18 86       	std	Y+8, r1	; 0x08
    16d8:	46 c0       	rjmp	.+140    	; 0x1766 <Timer2_Sleep+0xb4>

	Timer2_Init(WGM2_NORMAL, COM2_DISCONNECTED, 0);
    16da:	80 e0       	ldi	r24, 0x00	; 0
    16dc:	60 e0       	ldi	r22, 0x00	; 0
    16de:	40 e0       	ldi	r20, 0x00	; 0
    16e0:	0e 94 41 0a 	call	0x1482	; 0x1482 <Timer2_Init>

	uint16 start = 0x00;
    16e4:	1a 82       	std	Y+2, r1	; 0x02
    16e6:	19 82       	std	Y+1, r1	; 0x01
	uint16 overflows = 0x00;
    16e8:	1c 82       	std	Y+4, r1	; 0x04
    16ea:	1b 82       	std	Y+3, r1	; 0x03

	CalculateSettings(TIMER_2, _clk, _duration, &start, &overflows);
    16ec:	2d 81       	ldd	r18, Y+5	; 0x05
    16ee:	3e 81       	ldd	r19, Y+6	; 0x06
    16f0:	fe 01       	movw	r30, r28
    16f2:	33 96       	adiw	r30, 0x03	; 3
    16f4:	82 e0       	ldi	r24, 0x02	; 2
    16f6:	6f 81       	ldd	r22, Y+7	; 0x07
    16f8:	a9 01       	movw	r20, r18
    16fa:	9e 01       	movw	r18, r28
    16fc:	2f 5f       	subi	r18, 0xFF	; 255
    16fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1700:	8f 01       	movw	r16, r30
    1702:	0e 94 17 07 	call	0xe2e	; 0xe2e <CalculateSettings>

	do
	{
		TCNT2 = start;
    1706:	e4 e4       	ldi	r30, 0x44	; 68
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	9a 81       	ldd	r25, Y+2	; 0x02
    170e:	80 83       	st	Z, r24
		TCCR2 |= _clk & 0x07;
    1710:	a5 e4       	ldi	r26, 0x45	; 69
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	e5 e4       	ldi	r30, 0x45	; 69
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	98 2f       	mov	r25, r24
    171c:	8f 81       	ldd	r24, Y+7	; 0x07
    171e:	87 70       	andi	r24, 0x07	; 7
    1720:	89 2b       	or	r24, r25
    1722:	8c 93       	st	X, r24

		while(BIT_IS_CLEAR(TIFR, TOV2))
    1724:	e8 e5       	ldi	r30, 0x58	; 88
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	88 2f       	mov	r24, r24
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	80 74       	andi	r24, 0x40	; 64
    1730:	90 70       	andi	r25, 0x00	; 0
    1732:	00 97       	sbiw	r24, 0x00	; 0
    1734:	b9 f3       	breq	.-18     	; 0x1724 <Timer2_Sleep+0x72>
			;	// busy wait
		SET_BIT(TIFR, TOV2);
    1736:	a8 e5       	ldi	r26, 0x58	; 88
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	e8 e5       	ldi	r30, 0x58	; 88
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	80 64       	ori	r24, 0x40	; 64
    1742:	8c 93       	st	X, r24

		if (overflows == 0)
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	9c 81       	ldd	r25, Y+4	; 0x04
    1748:	00 97       	sbiw	r24, 0x00	; 0
    174a:	49 f0       	breq	.+18     	; 0x175e <Timer2_Sleep+0xac>
			break;

	} while ( --overflows);
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	9c 81       	ldd	r25, Y+4	; 0x04
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	9c 83       	std	Y+4, r25	; 0x04
    1754:	8b 83       	std	Y+3, r24	; 0x03
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	9c 81       	ldd	r25, Y+4	; 0x04
    175a:	00 97       	sbiw	r24, 0x00	; 0
    175c:	a1 f6       	brne	.-88     	; 0x1706 <Timer2_Sleep+0x54>

	Timer2_Stop();
    175e:	0e 94 08 0c 	call	0x1810	; 0x1810 <Timer2_Stop>

	return TIM_SUCCESS;
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	88 87       	std	Y+8, r24	; 0x08
    1766:	88 85       	ldd	r24, Y+8	; 0x08
}
    1768:	28 96       	adiw	r28, 0x08	; 8
    176a:	0f b6       	in	r0, 0x3f	; 63
    176c:	f8 94       	cli
    176e:	de bf       	out	0x3e, r29	; 62
    1770:	0f be       	out	0x3f, r0	; 63
    1772:	cd bf       	out	0x3d, r28	; 61
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	1f 91       	pop	r17
    177a:	0f 91       	pop	r16
    177c:	08 95       	ret

0000177e <Timer2_Start>:
TIMER_STATE Timer2_Start(en_CS2 _clk, uint16 _count)
{
    177e:	df 93       	push	r29
    1780:	cf 93       	push	r28
    1782:	00 d0       	rcall	.+0      	; 0x1784 <Timer2_Start+0x6>
    1784:	00 d0       	rcall	.+0      	; 0x1786 <Timer2_Start+0x8>
    1786:	00 d0       	rcall	.+0      	; 0x1788 <Timer2_Start+0xa>
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	89 83       	std	Y+1, r24	; 0x01
    178e:	7b 83       	std	Y+3, r23	; 0x03
    1790:	6a 83       	std	Y+2, r22	; 0x02
	if(_clk > CS2_1024 || g_Timer2.initialized == 0)
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	88 30       	cpi	r24, 0x08	; 8
    1796:	20 f4       	brcc	.+8      	; 0x17a0 <Timer2_Start+0x22>
    1798:	80 91 b0 01 	lds	r24, 0x01B0
    179c:	88 23       	and	r24, r24
    179e:	11 f4       	brne	.+4      	; 0x17a4 <Timer2_Start+0x26>
		return TIM_FAILURE;
    17a0:	1e 82       	std	Y+6, r1	; 0x06
    17a2:	2c c0       	rjmp	.+88     	; 0x17fc <Timer2_Start+0x7e>

	switch(g_Timer2.WGM)
    17a4:	80 91 b1 01 	lds	r24, 0x01B1
    17a8:	28 2f       	mov	r18, r24
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	3d 83       	std	Y+5, r19	; 0x05
    17ae:	2c 83       	std	Y+4, r18	; 0x04
    17b0:	8c 81       	ldd	r24, Y+4	; 0x04
    17b2:	9d 81       	ldd	r25, Y+5	; 0x05
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	51 f0       	breq	.+20     	; 0x17cc <Timer2_Start+0x4e>
    17b8:	2c 81       	ldd	r18, Y+4	; 0x04
    17ba:	3d 81       	ldd	r19, Y+5	; 0x05
    17bc:	33 23       	and	r19, r19
    17be:	84 f0       	brlt	.+32     	; 0x17e0 <Timer2_Start+0x62>
    17c0:	8c 81       	ldd	r24, Y+4	; 0x04
    17c2:	9d 81       	ldd	r25, Y+5	; 0x05
    17c4:	84 30       	cpi	r24, 0x04	; 4
    17c6:	91 05       	cpc	r25, r1
    17c8:	5c f4       	brge	.+22     	; 0x17e0 <Timer2_Start+0x62>
    17ca:	05 c0       	rjmp	.+10     	; 0x17d6 <Timer2_Start+0x58>
	{
		case WGM2_NORMAL:
		{
			TCNT2 = _count & 0xFF;
    17cc:	e4 e4       	ldi	r30, 0x44	; 68
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	80 83       	st	Z, r24
    17d4:	07 c0       	rjmp	.+14     	; 0x17e4 <Timer2_Start+0x66>
		}
		case WGM2_PHASE_CORRECT_PWM:
		case WGM2_FAST_PWM:
		case WGM2_CTC:
		{
			OCR2 = _count & 0xFF;
    17d6:	e3 e4       	ldi	r30, 0x43	; 67
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	8a 81       	ldd	r24, Y+2	; 0x02
    17dc:	80 83       	st	Z, r24
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <Timer2_Start+0x66>
			break;
		}

		default:
			return TIM_FAILURE;
    17e0:	1e 82       	std	Y+6, r1	; 0x06
    17e2:	0c c0       	rjmp	.+24     	; 0x17fc <Timer2_Start+0x7e>
	}

	TCCR2 |= (_clk & 0x07);
    17e4:	a5 e4       	ldi	r26, 0x45	; 69
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	e5 e4       	ldi	r30, 0x45	; 69
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	98 2f       	mov	r25, r24
    17f0:	89 81       	ldd	r24, Y+1	; 0x01
    17f2:	87 70       	andi	r24, 0x07	; 7
    17f4:	89 2b       	or	r24, r25
    17f6:	8c 93       	st	X, r24

	return TIM_SUCCESS;
    17f8:	91 e0       	ldi	r25, 0x01	; 1
    17fa:	9e 83       	std	Y+6, r25	; 0x06
    17fc:	8e 81       	ldd	r24, Y+6	; 0x06
}
    17fe:	26 96       	adiw	r28, 0x06	; 6
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	f8 94       	cli
    1804:	de bf       	out	0x3e, r29	; 62
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	cd bf       	out	0x3d, r28	; 61
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <Timer2_Stop>:
TIMER_STATE Timer2_Stop()
{
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
	TCCR2 = 0x00;
    1818:	e5 e4       	ldi	r30, 0x45	; 69
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	10 82       	st	Z, r1
	TCNT2 = 0x00;
    181e:	e4 e4       	ldi	r30, 0x44	; 68
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	10 82       	st	Z, r1
	g_Timer2.initialized = 0;
    1824:	10 92 b0 01 	sts	0x01B0, r1

	return TIM_SUCCESS;
    1828:	81 e0       	ldi	r24, 0x01	; 1
}
    182a:	cf 91       	pop	r28
    182c:	df 91       	pop	r29
    182e:	08 95       	ret

00001830 <Timer1_Init>:
/***************************    Timer1   ***************************/
TIMER_STATE Timer1_Init(en_WGM1 _WGM, en_COM1 _COM, uint8 _setInterrupt)
{
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	28 97       	sbiw	r28, 0x08	; 8
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	f8 94       	cli
    183e:	de bf       	out	0x3e, r29	; 62
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	cd bf       	out	0x3d, r28	; 61
    1844:	89 83       	std	Y+1, r24	; 0x01
    1846:	6a 83       	std	Y+2, r22	; 0x02
    1848:	4b 83       	std	Y+3, r20	; 0x03
	if (g_Timer1.initialized == 1)
    184a:	80 91 ad 01 	lds	r24, 0x01AD
    184e:	81 30       	cpi	r24, 0x01	; 1
    1850:	11 f4       	brne	.+4      	; 0x1856 <Timer1_Init+0x26>
		return TIM_FAILURE;
    1852:	18 86       	std	Y+8, r1	; 0x08
    1854:	78 c1       	rjmp	.+752    	; 0x1b46 <Timer1_Init+0x316>

	// set the OC1A pin to output mode
	SET_BIT(DDRD,5);
    1856:	a1 e3       	ldi	r26, 0x31	; 49
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e1 e3       	ldi	r30, 0x31	; 49
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	80 62       	ori	r24, 0x20	; 32
    1862:	8c 93       	st	X, r24

		/* Set Wave Generation Mode */
	switch(_WGM)
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	28 2f       	mov	r18, r24
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	3f 83       	std	Y+7, r19	; 0x07
    186c:	2e 83       	std	Y+6, r18	; 0x06
    186e:	8e 81       	ldd	r24, Y+6	; 0x06
    1870:	9f 81       	ldd	r25, Y+7	; 0x07
    1872:	81 30       	cpi	r24, 0x01	; 1
    1874:	91 05       	cpc	r25, r1
    1876:	09 f4       	brne	.+2      	; 0x187a <Timer1_Init+0x4a>
    1878:	3e c0       	rjmp	.+124    	; 0x18f6 <Timer1_Init+0xc6>
    187a:	2e 81       	ldd	r18, Y+6	; 0x06
    187c:	3f 81       	ldd	r19, Y+7	; 0x07
    187e:	22 30       	cpi	r18, 0x02	; 2
    1880:	31 05       	cpc	r19, r1
    1882:	2c f4       	brge	.+10     	; 0x188e <Timer1_Init+0x5e>
    1884:	8e 81       	ldd	r24, Y+6	; 0x06
    1886:	9f 81       	ldd	r25, Y+7	; 0x07
    1888:	00 97       	sbiw	r24, 0x00	; 0
    188a:	71 f0       	breq	.+28     	; 0x18a8 <Timer1_Init+0x78>
    188c:	a9 c0       	rjmp	.+338    	; 0x19e0 <Timer1_Init+0x1b0>
    188e:	2e 81       	ldd	r18, Y+6	; 0x06
    1890:	3f 81       	ldd	r19, Y+7	; 0x07
    1892:	22 30       	cpi	r18, 0x02	; 2
    1894:	31 05       	cpc	r19, r1
    1896:	09 f4       	brne	.+2      	; 0x189a <Timer1_Init+0x6a>
    1898:	55 c0       	rjmp	.+170    	; 0x1944 <Timer1_Init+0x114>
    189a:	8e 81       	ldd	r24, Y+6	; 0x06
    189c:	9f 81       	ldd	r25, Y+7	; 0x07
    189e:	83 30       	cpi	r24, 0x03	; 3
    18a0:	91 05       	cpc	r25, r1
    18a2:	09 f4       	brne	.+2      	; 0x18a6 <Timer1_Init+0x76>
    18a4:	76 c0       	rjmp	.+236    	; 0x1992 <Timer1_Init+0x162>
    18a6:	9c c0       	rjmp	.+312    	; 0x19e0 <Timer1_Init+0x1b0>
	{
		case WGM1_NORMAL:				// 0 0 0 0 (0xFFFF = TOP)
		{
			CLEAR_BIT(TCCR1A, WGM10);
    18a8:	af e4       	ldi	r26, 0x4F	; 79
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	ef e4       	ldi	r30, 0x4F	; 79
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	8e 7f       	andi	r24, 0xFE	; 254
    18b4:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    18b6:	af e4       	ldi	r26, 0x4F	; 79
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	ef e4       	ldi	r30, 0x4F	; 79
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	8d 7f       	andi	r24, 0xFD	; 253
    18c2:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    18c4:	ae e4       	ldi	r26, 0x4E	; 78
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	ee e4       	ldi	r30, 0x4E	; 78
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	87 7f       	andi	r24, 0xF7	; 247
    18d0:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM13);
    18d2:	ae e4       	ldi	r26, 0x4E	; 78
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	ee e4       	ldi	r30, 0x4E	; 78
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	8f 7e       	andi	r24, 0xEF	; 239
    18de:	8c 93       	st	X, r24

			TIMSK |= ((unsigned) _setInterrupt << TOIE1);
    18e0:	a9 e5       	ldi	r26, 0x59	; 89
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	e9 e5       	ldi	r30, 0x59	; 89
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	90 81       	ld	r25, Z
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	88 0f       	add	r24, r24
    18ee:	88 0f       	add	r24, r24
    18f0:	89 2b       	or	r24, r25
    18f2:	8c 93       	st	X, r24
    18f4:	77 c0       	rjmp	.+238    	; 0x19e4 <Timer1_Init+0x1b4>
			break;
		}

		case WGM1_CTC:					// 0 1 0 0 ( OCR1A = TOP)
		{
			CLEAR_BIT(TCCR1A, WGM10);
    18f6:	af e4       	ldi	r26, 0x4F	; 79
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	ef e4       	ldi	r30, 0x4F	; 79
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	8e 7f       	andi	r24, 0xFE	; 254
    1902:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    1904:	af e4       	ldi	r26, 0x4F	; 79
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	ef e4       	ldi	r30, 0x4F	; 79
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	8d 7f       	andi	r24, 0xFD	; 253
    1910:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    1912:	ae e4       	ldi	r26, 0x4E	; 78
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	ee e4       	ldi	r30, 0x4E	; 78
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	88 60       	ori	r24, 0x08	; 8
    191e:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM13);
    1920:	ae e4       	ldi	r26, 0x4E	; 78
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	ee e4       	ldi	r30, 0x4E	; 78
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	8f 7e       	andi	r24, 0xEF	; 239
    192c:	8c 93       	st	X, r24

			TIMSK |= ((unsigned) _setInterrupt << OCIE1A);
    192e:	a9 e5       	ldi	r26, 0x59	; 89
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	e9 e5       	ldi	r30, 0x59	; 89
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	90 81       	ld	r25, Z
    1938:	8b 81       	ldd	r24, Y+3	; 0x03
    193a:	82 95       	swap	r24
    193c:	80 7f       	andi	r24, 0xF0	; 240
    193e:	89 2b       	or	r24, r25
    1940:	8c 93       	st	X, r24
    1942:	50 c0       	rjmp	.+160    	; 0x19e4 <Timer1_Init+0x1b4>
			break;
		}

		case WGM1_FAST_PWM:				// 1 1 1 0 ( ICR1A = TOP )
		{
			SET_BIT(TCCR1A, WGM10);
    1944:	af e4       	ldi	r26, 0x4F	; 79
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	ef e4       	ldi	r30, 0x4F	; 79
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	81 60       	ori	r24, 0x01	; 1
    1950:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    1952:	af e4       	ldi	r26, 0x4F	; 79
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	ef e4       	ldi	r30, 0x4F	; 79
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	82 60       	ori	r24, 0x02	; 2
    195e:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    1960:	ae e4       	ldi	r26, 0x4E	; 78
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	ee e4       	ldi	r30, 0x4E	; 78
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	88 60       	ori	r24, 0x08	; 8
    196c:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM13);
    196e:	ae e4       	ldi	r26, 0x4E	; 78
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	ee e4       	ldi	r30, 0x4E	; 78
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	80 61       	ori	r24, 0x10	; 16
    197a:	8c 93       	st	X, r24

			TIMSK |= ((unsigned) _setInterrupt << OCIE1A);
    197c:	a9 e5       	ldi	r26, 0x59	; 89
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e9 e5       	ldi	r30, 0x59	; 89
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	90 81       	ld	r25, Z
    1986:	8b 81       	ldd	r24, Y+3	; 0x03
    1988:	82 95       	swap	r24
    198a:	80 7f       	andi	r24, 0xF0	; 240
    198c:	89 2b       	or	r24, r25
    198e:	8c 93       	st	X, r24
    1990:	29 c0       	rjmp	.+82     	; 0x19e4 <Timer1_Init+0x1b4>
			break;
		}

		case WGM1_PHASE_CORRECT_PWM:	// 1 0 1 1 ( OCR1A = TOP )
		{
			SET_BIT(TCCR1A, WGM10);
    1992:	af e4       	ldi	r26, 0x4F	; 79
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	ef e4       	ldi	r30, 0x4F	; 79
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	81 60       	ori	r24, 0x01	; 1
    199e:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    19a0:	af e4       	ldi	r26, 0x4F	; 79
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	ef e4       	ldi	r30, 0x4F	; 79
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	82 60       	ori	r24, 0x02	; 2
    19ac:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    19ae:	ae e4       	ldi	r26, 0x4E	; 78
    19b0:	b0 e0       	ldi	r27, 0x00	; 0
    19b2:	ee e4       	ldi	r30, 0x4E	; 78
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	87 7f       	andi	r24, 0xF7	; 247
    19ba:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM13);
    19bc:	ae e4       	ldi	r26, 0x4E	; 78
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	ee e4       	ldi	r30, 0x4E	; 78
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	80 61       	ori	r24, 0x10	; 16
    19c8:	8c 93       	st	X, r24

			TIMSK |= ((unsigned) _setInterrupt << OCIE1A);
    19ca:	a9 e5       	ldi	r26, 0x59	; 89
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	e9 e5       	ldi	r30, 0x59	; 89
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	90 81       	ld	r25, Z
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	82 95       	swap	r24
    19d8:	80 7f       	andi	r24, 0xF0	; 240
    19da:	89 2b       	or	r24, r25
    19dc:	8c 93       	st	X, r24
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <Timer1_Init+0x1b4>
			break;

		}
		default:
			return TIM_FAILURE;
    19e0:	18 86       	std	Y+8, r1	; 0x08
    19e2:	b1 c0       	rjmp	.+354    	; 0x1b46 <Timer1_Init+0x316>
	}

		/* Set Output Compare Mode (ONLY OCRA)*/
	switch (_COM)
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	28 2f       	mov	r18, r24
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	3d 83       	std	Y+5, r19	; 0x05
    19ec:	2c 83       	std	Y+4, r18	; 0x04
    19ee:	8c 81       	ldd	r24, Y+4	; 0x04
    19f0:	9d 81       	ldd	r25, Y+5	; 0x05
    19f2:	84 30       	cpi	r24, 0x04	; 4
    19f4:	91 05       	cpc	r25, r1
    19f6:	09 f4       	brne	.+2      	; 0x19fa <Timer1_Init+0x1ca>
    19f8:	54 c0       	rjmp	.+168    	; 0x1aa2 <Timer1_Init+0x272>
    19fa:	2c 81       	ldd	r18, Y+4	; 0x04
    19fc:	3d 81       	ldd	r19, Y+5	; 0x05
    19fe:	25 30       	cpi	r18, 0x05	; 5
    1a00:	31 05       	cpc	r19, r1
    1a02:	ec f4       	brge	.+58     	; 0x1a3e <Timer1_Init+0x20e>
    1a04:	8c 81       	ldd	r24, Y+4	; 0x04
    1a06:	9d 81       	ldd	r25, Y+5	; 0x05
    1a08:	81 30       	cpi	r24, 0x01	; 1
    1a0a:	91 05       	cpc	r25, r1
    1a0c:	09 f4       	brne	.+2      	; 0x1a10 <Timer1_Init+0x1e0>
    1a0e:	49 c0       	rjmp	.+146    	; 0x1aa2 <Timer1_Init+0x272>
    1a10:	2c 81       	ldd	r18, Y+4	; 0x04
    1a12:	3d 81       	ldd	r19, Y+5	; 0x05
    1a14:	22 30       	cpi	r18, 0x02	; 2
    1a16:	31 05       	cpc	r19, r1
    1a18:	2c f4       	brge	.+10     	; 0x1a24 <Timer1_Init+0x1f4>
    1a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a1e:	00 97       	sbiw	r24, 0x00	; 0
    1a20:	89 f1       	breq	.+98     	; 0x1a84 <Timer1_Init+0x254>
    1a22:	84 c0       	rjmp	.+264    	; 0x1b2c <Timer1_Init+0x2fc>
    1a24:	2c 81       	ldd	r18, Y+4	; 0x04
    1a26:	3d 81       	ldd	r19, Y+5	; 0x05
    1a28:	22 30       	cpi	r18, 0x02	; 2
    1a2a:	31 05       	cpc	r19, r1
    1a2c:	09 f4       	brne	.+2      	; 0x1a30 <Timer1_Init+0x200>
    1a2e:	60 c0       	rjmp	.+192    	; 0x1af0 <Timer1_Init+0x2c0>
    1a30:	8c 81       	ldd	r24, Y+4	; 0x04
    1a32:	9d 81       	ldd	r25, Y+5	; 0x05
    1a34:	83 30       	cpi	r24, 0x03	; 3
    1a36:	91 05       	cpc	r25, r1
    1a38:	09 f4       	brne	.+2      	; 0x1a3c <Timer1_Init+0x20c>
    1a3a:	69 c0       	rjmp	.+210    	; 0x1b0e <Timer1_Init+0x2de>
    1a3c:	77 c0       	rjmp	.+238    	; 0x1b2c <Timer1_Init+0x2fc>
    1a3e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a40:	3d 81       	ldd	r19, Y+5	; 0x05
    1a42:	27 30       	cpi	r18, 0x07	; 7
    1a44:	31 05       	cpc	r19, r1
    1a46:	69 f1       	breq	.+90     	; 0x1aa2 <Timer1_Init+0x272>
    1a48:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a4c:	88 30       	cpi	r24, 0x08	; 8
    1a4e:	91 05       	cpc	r25, r1
    1a50:	6c f4       	brge	.+26     	; 0x1a6c <Timer1_Init+0x23c>
    1a52:	2c 81       	ldd	r18, Y+4	; 0x04
    1a54:	3d 81       	ldd	r19, Y+5	; 0x05
    1a56:	25 30       	cpi	r18, 0x05	; 5
    1a58:	31 05       	cpc	r19, r1
    1a5a:	09 f4       	brne	.+2      	; 0x1a5e <Timer1_Init+0x22e>
    1a5c:	49 c0       	rjmp	.+146    	; 0x1af0 <Timer1_Init+0x2c0>
    1a5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a60:	9d 81       	ldd	r25, Y+5	; 0x05
    1a62:	86 30       	cpi	r24, 0x06	; 6
    1a64:	91 05       	cpc	r25, r1
    1a66:	09 f4       	brne	.+2      	; 0x1a6a <Timer1_Init+0x23a>
    1a68:	52 c0       	rjmp	.+164    	; 0x1b0e <Timer1_Init+0x2de>
    1a6a:	60 c0       	rjmp	.+192    	; 0x1b2c <Timer1_Init+0x2fc>
    1a6c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a6e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a70:	28 30       	cpi	r18, 0x08	; 8
    1a72:	31 05       	cpc	r19, r1
    1a74:	e9 f1       	breq	.+122    	; 0x1af0 <Timer1_Init+0x2c0>
    1a76:	8c 81       	ldd	r24, Y+4	; 0x04
    1a78:	9d 81       	ldd	r25, Y+5	; 0x05
    1a7a:	89 30       	cpi	r24, 0x09	; 9
    1a7c:	91 05       	cpc	r25, r1
    1a7e:	09 f4       	brne	.+2      	; 0x1a82 <Timer1_Init+0x252>
    1a80:	46 c0       	rjmp	.+140    	; 0x1b0e <Timer1_Init+0x2de>
    1a82:	54 c0       	rjmp	.+168    	; 0x1b2c <Timer1_Init+0x2fc>
	{
		case COM1_DISCONNECTED:			// 0 0
		{
			CLEAR_BIT(TCCR1A, COM1A0);
    1a84:	af e4       	ldi	r26, 0x4F	; 79
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	ef e4       	ldi	r30, 0x4F	; 79
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	8f 7b       	andi	r24, 0xBF	; 191
    1a90:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, COM1A1);
    1a92:	af e4       	ldi	r26, 0x4F	; 79
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	ef e4       	ldi	r30, 0x4F	; 79
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	8f 77       	andi	r24, 0x7F	; 127
    1a9e:	8c 93       	st	X, r24
    1aa0:	47 c0       	rjmp	.+142    	; 0x1b30 <Timer1_Init+0x300>

		case COM1_NON_PWM_TOGGLE:		// 0 1
		case COM1_FAST_PWM_TOGGLE:
		case COM1_PHASE_CORRECT_TOGGLE:
		{
			if(_WGM == WGM1_FAST_PWM ||
    1aa2:	89 81       	ldd	r24, Y+1	; 0x01
    1aa4:	82 30       	cpi	r24, 0x02	; 2
    1aa6:	31 f0       	breq	.+12     	; 0x1ab4 <Timer1_Init+0x284>
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	83 30       	cpi	r24, 0x03	; 3
    1aac:	19 f0       	breq	.+6      	; 0x1ab4 <Timer1_Init+0x284>
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	88 23       	and	r24, r24
    1ab2:	79 f4       	brne	.+30     	; 0x1ad2 <Timer1_Init+0x2a2>
			   _WGM == WGM1_PHASE_CORRECT_PWM ||
			   _WGM == WGM1_NORMAL) {

				SET_BIT(TCCR1A, COM1A0);
    1ab4:	af e4       	ldi	r26, 0x4F	; 79
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	ef e4       	ldi	r30, 0x4F	; 79
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	80 64       	ori	r24, 0x40	; 64
    1ac0:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1A1);
    1ac2:	af e4       	ldi	r26, 0x4F	; 79
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	ef e4       	ldi	r30, 0x4F	; 79
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	8f 77       	andi	r24, 0x7F	; 127
    1ace:	8c 93       	st	X, r24
    1ad0:	2f c0       	rjmp	.+94     	; 0x1b30 <Timer1_Init+0x300>
			} else {
				CLEAR_BIT(TCCR1A, COM1A0);
    1ad2:	af e4       	ldi	r26, 0x4F	; 79
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	ef e4       	ldi	r30, 0x4F	; 79
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	8f 7b       	andi	r24, 0xBF	; 191
    1ade:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, COM1A1);
    1ae0:	af e4       	ldi	r26, 0x4F	; 79
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	ef e4       	ldi	r30, 0x4F	; 79
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	8f 77       	andi	r24, 0x7F	; 127
    1aec:	8c 93       	st	X, r24
    1aee:	20 c0       	rjmp	.+64     	; 0x1b30 <Timer1_Init+0x300>

		case COM1_NON_PWM_CLEAR:		// 1 0
		case COM1_FAST_PWM_NV:
		case COM1_PHASE_CORRECT_NV:
		{
			SET_BIT(TCCR1A, COM1A0);
    1af0:	af e4       	ldi	r26, 0x4F	; 79
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	ef e4       	ldi	r30, 0x4F	; 79
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	80 64       	ori	r24, 0x40	; 64
    1afc:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, COM1A1);
    1afe:	af e4       	ldi	r26, 0x4F	; 79
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	ef e4       	ldi	r30, 0x4F	; 79
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	8f 77       	andi	r24, 0x7F	; 127
    1b0a:	8c 93       	st	X, r24
    1b0c:	11 c0       	rjmp	.+34     	; 0x1b30 <Timer1_Init+0x300>

		case COM1_NON_PWM_SET:			// 1 1
		case COM1_FAST_PWM_IV:
		case COM1_PHASE_CORRECT_IV:
		{
			SET_BIT(TCCR1A, COM1A0);
    1b0e:	af e4       	ldi	r26, 0x4F	; 79
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	ef e4       	ldi	r30, 0x4F	; 79
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	80 64       	ori	r24, 0x40	; 64
    1b1a:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, COM1A1);
    1b1c:	af e4       	ldi	r26, 0x4F	; 79
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	ef e4       	ldi	r30, 0x4F	; 79
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	80 68       	ori	r24, 0x80	; 128
    1b28:	8c 93       	st	X, r24
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <Timer1_Init+0x300>

			break;
		}

		default:
			return TIM_FAILURE;
    1b2c:	18 86       	std	Y+8, r1	; 0x08
    1b2e:	0b c0       	rjmp	.+22     	; 0x1b46 <Timer1_Init+0x316>

	}

	g_Timer1.initialized = 1;
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	80 93 ad 01 	sts	0x01AD, r24
	g_Timer1.COM = _COM;
    1b36:	8a 81       	ldd	r24, Y+2	; 0x02
    1b38:	80 93 af 01 	sts	0x01AF, r24
	g_Timer1.WGM = _WGM;
    1b3c:	89 81       	ldd	r24, Y+1	; 0x01
    1b3e:	80 93 ae 01 	sts	0x01AE, r24

	return TIM_SUCCESS;
    1b42:	91 e0       	ldi	r25, 0x01	; 1
    1b44:	98 87       	std	Y+8, r25	; 0x08
    1b46:	88 85       	ldd	r24, Y+8	; 0x08
}
    1b48:	28 96       	adiw	r28, 0x08	; 8
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	f8 94       	cli
    1b4e:	de bf       	out	0x3e, r29	; 62
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	cd bf       	out	0x3d, r28	; 61
    1b54:	cf 91       	pop	r28
    1b56:	df 91       	pop	r29
    1b58:	08 95       	ret

00001b5a <Timer1_Sleep>:

TIMER_STATE Timer1_Sleep(uint16 _duration, en_CS1 _clk)
{
    1b5a:	0f 93       	push	r16
    1b5c:	1f 93       	push	r17
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
    1b66:	28 97       	sbiw	r28, 0x08	; 8
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	f8 94       	cli
    1b6c:	de bf       	out	0x3e, r29	; 62
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	cd bf       	out	0x3d, r28	; 61
    1b72:	9e 83       	std	Y+6, r25	; 0x06
    1b74:	8d 83       	std	Y+5, r24	; 0x05
    1b76:	6f 83       	std	Y+7, r22	; 0x07
	/* Note: there might be problems if this function is interrupted
	 while updating the 16bit registers TCCR1 & TCCR1B
	*/

	if(_clk > CS1_1024)
    1b78:	8f 81       	ldd	r24, Y+7	; 0x07
    1b7a:	86 30       	cpi	r24, 0x06	; 6
    1b7c:	10 f0       	brcs	.+4      	; 0x1b82 <Timer1_Sleep+0x28>
		return TIM_FAILURE;
    1b7e:	18 86       	std	Y+8, r1	; 0x08
    1b80:	4d c0       	rjmp	.+154    	; 0x1c1c <Timer1_Sleep+0xc2>

	Timer1_Init(WGM1_NORMAL, COM1_DISCONNECTED, 0);
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	60 e0       	ldi	r22, 0x00	; 0
    1b86:	40 e0       	ldi	r20, 0x00	; 0
    1b88:	0e 94 18 0c 	call	0x1830	; 0x1830 <Timer1_Init>


	uint16 start = 0x00;
    1b8c:	1a 82       	std	Y+2, r1	; 0x02
    1b8e:	19 82       	std	Y+1, r1	; 0x01
	uint16 overflows = 0x00;
    1b90:	1c 82       	std	Y+4, r1	; 0x04
    1b92:	1b 82       	std	Y+3, r1	; 0x03

	CalculateSettings(TIMER_1, _clk, _duration, &start, &overflows);
    1b94:	2d 81       	ldd	r18, Y+5	; 0x05
    1b96:	3e 81       	ldd	r19, Y+6	; 0x06
    1b98:	fe 01       	movw	r30, r28
    1b9a:	33 96       	adiw	r30, 0x03	; 3
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba0:	a9 01       	movw	r20, r18
    1ba2:	9e 01       	movw	r18, r28
    1ba4:	2f 5f       	subi	r18, 0xFF	; 255
    1ba6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba8:	8f 01       	movw	r16, r30
    1baa:	0e 94 17 07 	call	0xe2e	; 0xe2e <CalculateSettings>
	do
	{

		TCNT1H = start >> 8;
    1bae:	ed e4       	ldi	r30, 0x4D	; 77
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb6:	89 2f       	mov	r24, r25
    1bb8:	99 27       	eor	r25, r25
    1bba:	80 83       	st	Z, r24
		TCNT1L = start & 0xFF;
    1bbc:	ec e4       	ldi	r30, 0x4C	; 76
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc4:	80 83       	st	Z, r24


		TCCR1B |= ( _clk & 0x07 );
    1bc6:	ae e4       	ldi	r26, 0x4E	; 78
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	ee e4       	ldi	r30, 0x4E	; 78
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	98 2f       	mov	r25, r24
    1bd2:	8f 81       	ldd	r24, Y+7	; 0x07
    1bd4:	87 70       	andi	r24, 0x07	; 7
    1bd6:	89 2b       	or	r24, r25
    1bd8:	8c 93       	st	X, r24

		while(BIT_IS_CLEAR(TIFR, TOV1))
    1bda:	e8 e5       	ldi	r30, 0x58	; 88
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	88 2f       	mov	r24, r24
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	84 70       	andi	r24, 0x04	; 4
    1be6:	90 70       	andi	r25, 0x00	; 0
    1be8:	00 97       	sbiw	r24, 0x00	; 0
    1bea:	b9 f3       	breq	.-18     	; 0x1bda <Timer1_Sleep+0x80>
			;
		SET_BIT(TIFR, TOV1);
    1bec:	a8 e5       	ldi	r26, 0x58	; 88
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	e8 e5       	ldi	r30, 0x58	; 88
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	84 60       	ori	r24, 0x04	; 4
    1bf8:	8c 93       	st	X, r24


		if(overflows == 0)
    1bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfe:	00 97       	sbiw	r24, 0x00	; 0
    1c00:	49 f0       	breq	.+18     	; 0x1c14 <Timer1_Sleep+0xba>
			break;

	} while ( --overflows);
    1c02:	8b 81       	ldd	r24, Y+3	; 0x03
    1c04:	9c 81       	ldd	r25, Y+4	; 0x04
    1c06:	01 97       	sbiw	r24, 0x01	; 1
    1c08:	9c 83       	std	Y+4, r25	; 0x04
    1c0a:	8b 83       	std	Y+3, r24	; 0x03
    1c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c10:	00 97       	sbiw	r24, 0x00	; 0
    1c12:	69 f6       	brne	.-102    	; 0x1bae <Timer1_Sleep+0x54>

	Timer1_Stop();
    1c14:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <Timer1_Stop>

	return TIM_SUCCESS;
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	88 87       	std	Y+8, r24	; 0x08
    1c1c:	88 85       	ldd	r24, Y+8	; 0x08
}
    1c1e:	28 96       	adiw	r28, 0x08	; 8
    1c20:	0f b6       	in	r0, 0x3f	; 63
    1c22:	f8 94       	cli
    1c24:	de bf       	out	0x3e, r29	; 62
    1c26:	0f be       	out	0x3f, r0	; 63
    1c28:	cd bf       	out	0x3d, r28	; 61
    1c2a:	cf 91       	pop	r28
    1c2c:	df 91       	pop	r29
    1c2e:	1f 91       	pop	r17
    1c30:	0f 91       	pop	r16
    1c32:	08 95       	ret

00001c34 <Timer1_Start>:

TIMER_STATE Timer1_Start(en_CS1 _clk, uint16 _count)
{
    1c34:	df 93       	push	r29
    1c36:	cf 93       	push	r28
    1c38:	00 d0       	rcall	.+0      	; 0x1c3a <Timer1_Start+0x6>
    1c3a:	00 d0       	rcall	.+0      	; 0x1c3c <Timer1_Start+0x8>
    1c3c:	00 d0       	rcall	.+0      	; 0x1c3e <Timer1_Start+0xa>
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	89 83       	std	Y+1, r24	; 0x01
    1c44:	7b 83       	std	Y+3, r23	; 0x03
    1c46:	6a 83       	std	Y+2, r22	; 0x02
    /* Note: there might be problems if this function is interrupted
	 while updating the 16bit register OCR1A
	*/
	if(_clk > CS1_XTRN_RISE || g_Timer1.initialized == 0)
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	88 30       	cpi	r24, 0x08	; 8
    1c4c:	20 f4       	brcc	.+8      	; 0x1c56 <Timer1_Start+0x22>
    1c4e:	80 91 ad 01 	lds	r24, 0x01AD
    1c52:	88 23       	and	r24, r24
    1c54:	11 f4       	brne	.+4      	; 0x1c5a <Timer1_Start+0x26>
		return TIM_FAILURE;
    1c56:	1e 82       	std	Y+6, r1	; 0x06
    1c58:	3a c0       	rjmp	.+116    	; 0x1cce <Timer1_Start+0x9a>


	switch(g_Timer1.WGM)
    1c5a:	80 91 ae 01 	lds	r24, 0x01AE
    1c5e:	28 2f       	mov	r18, r24
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	3d 83       	std	Y+5, r19	; 0x05
    1c64:	2c 83       	std	Y+4, r18	; 0x04
    1c66:	8c 81       	ldd	r24, Y+4	; 0x04
    1c68:	9d 81       	ldd	r25, Y+5	; 0x05
    1c6a:	00 97       	sbiw	r24, 0x00	; 0
    1c6c:	51 f0       	breq	.+20     	; 0x1c82 <Timer1_Start+0x4e>
    1c6e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c70:	3d 81       	ldd	r19, Y+5	; 0x05
    1c72:	33 23       	and	r19, r19
    1c74:	f4 f0       	brlt	.+60     	; 0x1cb2 <Timer1_Start+0x7e>
    1c76:	8c 81       	ldd	r24, Y+4	; 0x04
    1c78:	9d 81       	ldd	r25, Y+5	; 0x05
    1c7a:	84 30       	cpi	r24, 0x04	; 4
    1c7c:	91 05       	cpc	r25, r1
    1c7e:	cc f4       	brge	.+50     	; 0x1cb2 <Timer1_Start+0x7e>
    1c80:	0c c0       	rjmp	.+24     	; 0x1c9a <Timer1_Start+0x66>
	{
		case WGM1_NORMAL:
		{
			TCNT1H = _count >> 8;
    1c82:	ed e4       	ldi	r30, 0x4D	; 77
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	9b 81       	ldd	r25, Y+3	; 0x03
    1c8a:	89 2f       	mov	r24, r25
    1c8c:	99 27       	eor	r25, r25
    1c8e:	80 83       	st	Z, r24
			TCNT1L = _count & 0xFF;
    1c90:	ec e4       	ldi	r30, 0x4C	; 76
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
    1c96:	80 83       	st	Z, r24
    1c98:	0e c0       	rjmp	.+28     	; 0x1cb6 <Timer1_Start+0x82>
		case WGM1_CTC:
		{
			//ICR1H = (_count & 0xFF00) >> 8;
			//ICR1L = (_count & 0x00FF);

			OCR1AH = (_count & 0xFF00) >> 8;
    1c9a:	eb e4       	ldi	r30, 0x4B	; 75
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca2:	89 2f       	mov	r24, r25
    1ca4:	99 27       	eor	r25, r25
    1ca6:	80 83       	st	Z, r24
			OCR1AL = (_count & 0x00FF);
    1ca8:	ea e4       	ldi	r30, 0x4A	; 74
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	8a 81       	ldd	r24, Y+2	; 0x02
    1cae:	80 83       	st	Z, r24
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <Timer1_Start+0x82>
			break;
		}

		default:
			return TIM_FAILURE;
    1cb2:	1e 82       	std	Y+6, r1	; 0x06
    1cb4:	0c c0       	rjmp	.+24     	; 0x1cce <Timer1_Start+0x9a>
	}


	TCCR1B |= ( _clk & 0x07 );
    1cb6:	ae e4       	ldi	r26, 0x4E	; 78
    1cb8:	b0 e0       	ldi	r27, 0x00	; 0
    1cba:	ee e4       	ldi	r30, 0x4E	; 78
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	80 81       	ld	r24, Z
    1cc0:	98 2f       	mov	r25, r24
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
    1cc4:	87 70       	andi	r24, 0x07	; 7
    1cc6:	89 2b       	or	r24, r25
    1cc8:	8c 93       	st	X, r24

	return TIM_SUCCESS;
    1cca:	91 e0       	ldi	r25, 0x01	; 1
    1ccc:	9e 83       	std	Y+6, r25	; 0x06
    1cce:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1cd0:	26 96       	adiw	r28, 0x06	; 6
    1cd2:	0f b6       	in	r0, 0x3f	; 63
    1cd4:	f8 94       	cli
    1cd6:	de bf       	out	0x3e, r29	; 62
    1cd8:	0f be       	out	0x3f, r0	; 63
    1cda:	cd bf       	out	0x3d, r28	; 61
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <Timer1_Stop>:

TIMER_STATE Timer1_Stop()
{
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
	TCCR1A  = 0x00;
    1cea:	ef e4       	ldi	r30, 0x4F	; 79
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	10 82       	st	Z, r1
	TCNT1H  = 0x00;
    1cf0:	ed e4       	ldi	r30, 0x4D	; 77
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	10 82       	st	Z, r1
	TCNT1L  = 0x00;
    1cf6:	ec e4       	ldi	r30, 0x4C	; 76
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	10 82       	st	Z, r1
	g_Timer1.initialized = 0;
    1cfc:	10 92 ad 01 	sts	0x01AD, r1

	return TIM_SUCCESS;
    1d00:	81 e0       	ldi	r24, 0x01	; 1
}
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	08 95       	ret

00001d08 <INT_ENABLE_ALL>:
[DESCRIPTION]  :	Source file for the AVR Interrupt driver.
------------------------------------------------------------------------------------------*/
#include "../../Helpers/common_macros.h"
#include"Interrupt.h"
void  INT_ENABLE_ALL(void)
{
    1d08:	df 93       	push	r29
    1d0a:	cf 93       	push	r28
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
	__asm__ __volatile__ ("sei" ::: "memory");
    1d10:	78 94       	sei


}
    1d12:	cf 91       	pop	r28
    1d14:	df 91       	pop	r29
    1d16:	08 95       	ret

00001d18 <INT_DISABLE_ALL>:

void  INT_DISABLE_ALL(void)
{
    1d18:	df 93       	push	r29
    1d1a:	cf 93       	push	r28
    1d1c:	cd b7       	in	r28, 0x3d	; 61
    1d1e:	de b7       	in	r29, 0x3e	; 62
	__asm__ __volatile__ ("cli" ::: "memory");
    1d20:	f8 94       	cli


}
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	08 95       	ret

00001d28 <INT0_Init>:


INT_STATE INT0_Init(en_ISC0 _ISC0)
{
    1d28:	df 93       	push	r29
    1d2a:	cf 93       	push	r28
    1d2c:	0f 92       	push	r0
    1d2e:	cd b7       	in	r28, 0x3d	; 61
    1d30:	de b7       	in	r29, 0x3e	; 62
    1d32:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(DDRD, PIN2);
    1d34:	a1 e3       	ldi	r26, 0x31	; 49
    1d36:	b0 e0       	ldi	r27, 0x00	; 0
    1d38:	e1 e3       	ldi	r30, 0x31	; 49
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	80 81       	ld	r24, Z
    1d3e:	8b 7f       	andi	r24, 0xFB	; 251
    1d40:	8c 93       	st	X, r24
	SET_BIT(GICR, INT0);
    1d42:	ab e5       	ldi	r26, 0x5B	; 91
    1d44:	b0 e0       	ldi	r27, 0x00	; 0
    1d46:	eb e5       	ldi	r30, 0x5B	; 91
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	80 64       	ori	r24, 0x40	; 64
    1d4e:	8c 93       	st	X, r24
	MCUCR |=_ISC0;
    1d50:	a5 e5       	ldi	r26, 0x55	; 85
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	e5 e5       	ldi	r30, 0x55	; 85
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	90 81       	ld	r25, Z
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	89 2b       	or	r24, r25
    1d5e:	8c 93       	st	X, r24
	return INT_SUCCESS;
    1d60:	81 e0       	ldi	r24, 0x01	; 1
}
    1d62:	0f 90       	pop	r0
    1d64:	cf 91       	pop	r28
    1d66:	df 91       	pop	r29
    1d68:	08 95       	ret

00001d6a <INT1_Init>:

INT_STATE INT1_Init(en_ISC1 _ISC1)
{
    1d6a:	df 93       	push	r29
    1d6c:	cf 93       	push	r28
    1d6e:	0f 92       	push	r0
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
    1d74:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(DDRD, PIN3);
    1d76:	a1 e3       	ldi	r26, 0x31	; 49
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	e1 e3       	ldi	r30, 0x31	; 49
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	87 7f       	andi	r24, 0xF7	; 247
    1d82:	8c 93       	st	X, r24
	SET_BIT(GICR, INT1);
    1d84:	ab e5       	ldi	r26, 0x5B	; 91
    1d86:	b0 e0       	ldi	r27, 0x00	; 0
    1d88:	eb e5       	ldi	r30, 0x5B	; 91
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	80 68       	ori	r24, 0x80	; 128
    1d90:	8c 93       	st	X, r24
	MCUCR |=_ISC1<<2 ;
    1d92:	a5 e5       	ldi	r26, 0x55	; 85
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	e5 e5       	ldi	r30, 0x55	; 85
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	88 2f       	mov	r24, r24
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	88 0f       	add	r24, r24
    1da6:	99 1f       	adc	r25, r25
    1da8:	88 0f       	add	r24, r24
    1daa:	99 1f       	adc	r25, r25
    1dac:	82 2b       	or	r24, r18
    1dae:	8c 93       	st	X, r24
	return INT_SUCCESS;
    1db0:	81 e0       	ldi	r24, 0x01	; 1
}
    1db2:	0f 90       	pop	r0
    1db4:	cf 91       	pop	r28
    1db6:	df 91       	pop	r29
    1db8:	08 95       	ret

00001dba <INT2_Init>:

INT_STATE INT2_Init(en_ISC2 _ISC2)
{
    1dba:	df 93       	push	r29
    1dbc:	cf 93       	push	r28
    1dbe:	0f 92       	push	r0
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
    1dc4:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(DDRD, PIN3);
    1dc6:	a1 e3       	ldi	r26, 0x31	; 49
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e1 e3       	ldi	r30, 0x31	; 49
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	87 7f       	andi	r24, 0xF7	; 247
    1dd2:	8c 93       	st	X, r24
	SET_BIT(GICR, INT1);
    1dd4:	ab e5       	ldi	r26, 0x5B	; 91
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	eb e5       	ldi	r30, 0x5B	; 91
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	80 68       	ori	r24, 0x80	; 128
    1de0:	8c 93       	st	X, r24
	MCUCR |=_ISC2<< 6 ;
    1de2:	a5 e5       	ldi	r26, 0x55	; 85
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	e5 e5       	ldi	r30, 0x55	; 85
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	28 2f       	mov	r18, r24
    1dee:	89 81       	ldd	r24, Y+1	; 0x01
    1df0:	88 2f       	mov	r24, r24
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	00 24       	eor	r0, r0
    1df6:	96 95       	lsr	r25
    1df8:	87 95       	ror	r24
    1dfa:	07 94       	ror	r0
    1dfc:	96 95       	lsr	r25
    1dfe:	87 95       	ror	r24
    1e00:	07 94       	ror	r0
    1e02:	98 2f       	mov	r25, r24
    1e04:	80 2d       	mov	r24, r0
    1e06:	82 2b       	or	r24, r18
    1e08:	8c 93       	st	X, r24
	return INT_SUCCESS;
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
}
    1e0c:	0f 90       	pop	r0
    1e0e:	cf 91       	pop	r28
    1e10:	df 91       	pop	r29
    1e12:	08 95       	ret

00001e14 <INT0_Disable>:

INT_STATE INT0_Disable(void)
{
    1e14:	df 93       	push	r29
    1e16:	cf 93       	push	r28
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GICR, INT0);
    1e1c:	ab e5       	ldi	r26, 0x5B	; 91
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	eb e5       	ldi	r30, 0x5B	; 91
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	8f 7b       	andi	r24, 0xBF	; 191
    1e28:	8c 93       	st	X, r24

	return INT_SUCCESS;
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
}
    1e2c:	cf 91       	pop	r28
    1e2e:	df 91       	pop	r29
    1e30:	08 95       	ret

00001e32 <INT1_Disable>:

INT_STATE INT1_Disable(void)
{
    1e32:	df 93       	push	r29
    1e34:	cf 93       	push	r28
    1e36:	cd b7       	in	r28, 0x3d	; 61
    1e38:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GICR, INT1);
    1e3a:	ab e5       	ldi	r26, 0x5B	; 91
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	eb e5       	ldi	r30, 0x5B	; 91
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	8f 77       	andi	r24, 0x7F	; 127
    1e46:	8c 93       	st	X, r24

	return INT_SUCCESS;
    1e48:	81 e0       	ldi	r24, 0x01	; 1
}
    1e4a:	cf 91       	pop	r28
    1e4c:	df 91       	pop	r29
    1e4e:	08 95       	ret

00001e50 <INT2_Disable>:

INT_STATE INT2_Disable(void)
{
    1e50:	df 93       	push	r29
    1e52:	cf 93       	push	r28
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GICR, INT2);
    1e58:	ab e5       	ldi	r26, 0x5B	; 91
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	eb e5       	ldi	r30, 0x5B	; 91
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	8f 7d       	andi	r24, 0xDF	; 223
    1e64:	8c 93       	st	X, r24

	return INT_SUCCESS;
    1e66:	81 e0       	ldi	r24, 0x01	; 1
}
    1e68:	cf 91       	pop	r28
    1e6a:	df 91       	pop	r29
    1e6c:	08 95       	ret

00001e6e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
GPIO_STATE GPIO_setupPinDirection(const uint8 port_num,const uint8 pin_num, GPIO_PinDirectionType direction)
{
    1e6e:	df 93       	push	r29
    1e70:	cf 93       	push	r28
    1e72:	00 d0       	rcall	.+0      	; 0x1e74 <GPIO_setupPinDirection+0x6>
    1e74:	00 d0       	rcall	.+0      	; 0x1e76 <GPIO_setupPinDirection+0x8>
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <GPIO_setupPinDirection+0xa>
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
    1e7c:	89 83       	std	Y+1, r24	; 0x01
    1e7e:	6a 83       	std	Y+2, r22	; 0x02
    1e80:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)){
    1e82:	8a 81       	ldd	r24, Y+2	; 0x02
    1e84:	88 30       	cpi	r24, 0x08	; 8
    1e86:	18 f4       	brcc	.+6      	; 0x1e8e <GPIO_setupPinDirection+0x20>
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	84 30       	cpi	r24, 0x04	; 4
    1e8c:	10 f0       	brcs	.+4      	; 0x1e92 <GPIO_setupPinDirection+0x24>
		return GPIO_FALIURE;
    1e8e:	1e 82       	std	Y+6, r1	; 0x06
    1e90:	d6 c0       	rjmp	.+428    	; 0x203e <GPIO_setupPinDirection+0x1d0>
	}
	else{
		/* Setup the pin direction as required */
		switch(port_num){
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	28 2f       	mov	r18, r24
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	3d 83       	std	Y+5, r19	; 0x05
    1e9a:	2c 83       	std	Y+4, r18	; 0x04
    1e9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea0:	81 30       	cpi	r24, 0x01	; 1
    1ea2:	91 05       	cpc	r25, r1
    1ea4:	09 f4       	brne	.+2      	; 0x1ea8 <GPIO_setupPinDirection+0x3a>
    1ea6:	43 c0       	rjmp	.+134    	; 0x1f2e <GPIO_setupPinDirection+0xc0>
    1ea8:	2c 81       	ldd	r18, Y+4	; 0x04
    1eaa:	3d 81       	ldd	r19, Y+5	; 0x05
    1eac:	22 30       	cpi	r18, 0x02	; 2
    1eae:	31 05       	cpc	r19, r1
    1eb0:	2c f4       	brge	.+10     	; 0x1ebc <GPIO_setupPinDirection+0x4e>
    1eb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb4:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb6:	00 97       	sbiw	r24, 0x00	; 0
    1eb8:	71 f0       	breq	.+28     	; 0x1ed6 <GPIO_setupPinDirection+0x68>
    1eba:	bd c0       	rjmp	.+378    	; 0x2036 <GPIO_setupPinDirection+0x1c8>
    1ebc:	2c 81       	ldd	r18, Y+4	; 0x04
    1ebe:	3d 81       	ldd	r19, Y+5	; 0x05
    1ec0:	22 30       	cpi	r18, 0x02	; 2
    1ec2:	31 05       	cpc	r19, r1
    1ec4:	09 f4       	brne	.+2      	; 0x1ec8 <GPIO_setupPinDirection+0x5a>
    1ec6:	5f c0       	rjmp	.+190    	; 0x1f86 <GPIO_setupPinDirection+0x118>
    1ec8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eca:	9d 81       	ldd	r25, Y+5	; 0x05
    1ecc:	83 30       	cpi	r24, 0x03	; 3
    1ece:	91 05       	cpc	r25, r1
    1ed0:	09 f4       	brne	.+2      	; 0x1ed4 <GPIO_setupPinDirection+0x66>
    1ed2:	85 c0       	rjmp	.+266    	; 0x1fde <GPIO_setupPinDirection+0x170>
    1ed4:	b0 c0       	rjmp	.+352    	; 0x2036 <GPIO_setupPinDirection+0x1c8>
		case PORTA_ID:
			if(direction == PIN_OUTPUT){
    1ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed8:	81 30       	cpi	r24, 0x01	; 1
    1eda:	a1 f4       	brne	.+40     	; 0x1f04 <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA,pin_num);
    1edc:	aa e3       	ldi	r26, 0x3A	; 58
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	ea e3       	ldi	r30, 0x3A	; 58
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	48 2f       	mov	r20, r24
    1ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eea:	28 2f       	mov	r18, r24
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	02 2e       	mov	r0, r18
    1ef4:	02 c0       	rjmp	.+4      	; 0x1efa <GPIO_setupPinDirection+0x8c>
    1ef6:	88 0f       	add	r24, r24
    1ef8:	99 1f       	adc	r25, r25
    1efa:	0a 94       	dec	r0
    1efc:	e2 f7       	brpl	.-8      	; 0x1ef6 <GPIO_setupPinDirection+0x88>
    1efe:	84 2b       	or	r24, r20
    1f00:	8c 93       	st	X, r24
    1f02:	9b c0       	rjmp	.+310    	; 0x203a <GPIO_setupPinDirection+0x1cc>
			}else{
				CLEAR_BIT(DDRA,pin_num);
    1f04:	aa e3       	ldi	r26, 0x3A	; 58
    1f06:	b0 e0       	ldi	r27, 0x00	; 0
    1f08:	ea e3       	ldi	r30, 0x3A	; 58
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	48 2f       	mov	r20, r24
    1f10:	8a 81       	ldd	r24, Y+2	; 0x02
    1f12:	28 2f       	mov	r18, r24
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	02 2e       	mov	r0, r18
    1f1c:	02 c0       	rjmp	.+4      	; 0x1f22 <GPIO_setupPinDirection+0xb4>
    1f1e:	88 0f       	add	r24, r24
    1f20:	99 1f       	adc	r25, r25
    1f22:	0a 94       	dec	r0
    1f24:	e2 f7       	brpl	.-8      	; 0x1f1e <GPIO_setupPinDirection+0xb0>
    1f26:	80 95       	com	r24
    1f28:	84 23       	and	r24, r20
    1f2a:	8c 93       	st	X, r24
    1f2c:	86 c0       	rjmp	.+268    	; 0x203a <GPIO_setupPinDirection+0x1cc>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT){
    1f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f30:	81 30       	cpi	r24, 0x01	; 1
    1f32:	a1 f4       	brne	.+40     	; 0x1f5c <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB,pin_num);
    1f34:	a7 e3       	ldi	r26, 0x37	; 55
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	e7 e3       	ldi	r30, 0x37	; 55
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	48 2f       	mov	r20, r24
    1f40:	8a 81       	ldd	r24, Y+2	; 0x02
    1f42:	28 2f       	mov	r18, r24
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	02 2e       	mov	r0, r18
    1f4c:	02 c0       	rjmp	.+4      	; 0x1f52 <GPIO_setupPinDirection+0xe4>
    1f4e:	88 0f       	add	r24, r24
    1f50:	99 1f       	adc	r25, r25
    1f52:	0a 94       	dec	r0
    1f54:	e2 f7       	brpl	.-8      	; 0x1f4e <GPIO_setupPinDirection+0xe0>
    1f56:	84 2b       	or	r24, r20
    1f58:	8c 93       	st	X, r24
    1f5a:	6f c0       	rjmp	.+222    	; 0x203a <GPIO_setupPinDirection+0x1cc>
			}else{
				CLEAR_BIT(DDRB,pin_num);
    1f5c:	a7 e3       	ldi	r26, 0x37	; 55
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	e7 e3       	ldi	r30, 0x37	; 55
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	48 2f       	mov	r20, r24
    1f68:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6a:	28 2f       	mov	r18, r24
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	02 2e       	mov	r0, r18
    1f74:	02 c0       	rjmp	.+4      	; 0x1f7a <GPIO_setupPinDirection+0x10c>
    1f76:	88 0f       	add	r24, r24
    1f78:	99 1f       	adc	r25, r25
    1f7a:	0a 94       	dec	r0
    1f7c:	e2 f7       	brpl	.-8      	; 0x1f76 <GPIO_setupPinDirection+0x108>
    1f7e:	80 95       	com	r24
    1f80:	84 23       	and	r24, r20
    1f82:	8c 93       	st	X, r24
    1f84:	5a c0       	rjmp	.+180    	; 0x203a <GPIO_setupPinDirection+0x1cc>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT){
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	81 30       	cpi	r24, 0x01	; 1
    1f8a:	a1 f4       	brne	.+40     	; 0x1fb4 <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC,pin_num);
    1f8c:	a4 e3       	ldi	r26, 0x34	; 52
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	e4 e3       	ldi	r30, 0x34	; 52
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	48 2f       	mov	r20, r24
    1f98:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9a:	28 2f       	mov	r18, r24
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	02 2e       	mov	r0, r18
    1fa4:	02 c0       	rjmp	.+4      	; 0x1faa <GPIO_setupPinDirection+0x13c>
    1fa6:	88 0f       	add	r24, r24
    1fa8:	99 1f       	adc	r25, r25
    1faa:	0a 94       	dec	r0
    1fac:	e2 f7       	brpl	.-8      	; 0x1fa6 <GPIO_setupPinDirection+0x138>
    1fae:	84 2b       	or	r24, r20
    1fb0:	8c 93       	st	X, r24
    1fb2:	43 c0       	rjmp	.+134    	; 0x203a <GPIO_setupPinDirection+0x1cc>
			}else{
				CLEAR_BIT(DDRC,pin_num);
    1fb4:	a4 e3       	ldi	r26, 0x34	; 52
    1fb6:	b0 e0       	ldi	r27, 0x00	; 0
    1fb8:	e4 e3       	ldi	r30, 0x34	; 52
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
    1fbe:	48 2f       	mov	r20, r24
    1fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc2:	28 2f       	mov	r18, r24
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	02 2e       	mov	r0, r18
    1fcc:	02 c0       	rjmp	.+4      	; 0x1fd2 <GPIO_setupPinDirection+0x164>
    1fce:	88 0f       	add	r24, r24
    1fd0:	99 1f       	adc	r25, r25
    1fd2:	0a 94       	dec	r0
    1fd4:	e2 f7       	brpl	.-8      	; 0x1fce <GPIO_setupPinDirection+0x160>
    1fd6:	80 95       	com	r24
    1fd8:	84 23       	and	r24, r20
    1fda:	8c 93       	st	X, r24
    1fdc:	2e c0       	rjmp	.+92     	; 0x203a <GPIO_setupPinDirection+0x1cc>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT){
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe0:	81 30       	cpi	r24, 0x01	; 1
    1fe2:	a1 f4       	brne	.+40     	; 0x200c <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD,pin_num);
    1fe4:	a1 e3       	ldi	r26, 0x31	; 49
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	e1 e3       	ldi	r30, 0x31	; 49
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	48 2f       	mov	r20, r24
    1ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff2:	28 2f       	mov	r18, r24
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	02 2e       	mov	r0, r18
    1ffc:	02 c0       	rjmp	.+4      	; 0x2002 <GPIO_setupPinDirection+0x194>
    1ffe:	88 0f       	add	r24, r24
    2000:	99 1f       	adc	r25, r25
    2002:	0a 94       	dec	r0
    2004:	e2 f7       	brpl	.-8      	; 0x1ffe <GPIO_setupPinDirection+0x190>
    2006:	84 2b       	or	r24, r20
    2008:	8c 93       	st	X, r24
    200a:	17 c0       	rjmp	.+46     	; 0x203a <GPIO_setupPinDirection+0x1cc>
			}else{
				CLEAR_BIT(DDRD,pin_num);
    200c:	a1 e3       	ldi	r26, 0x31	; 49
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	e1 e3       	ldi	r30, 0x31	; 49
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	48 2f       	mov	r20, r24
    2018:	8a 81       	ldd	r24, Y+2	; 0x02
    201a:	28 2f       	mov	r18, r24
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	02 2e       	mov	r0, r18
    2024:	02 c0       	rjmp	.+4      	; 0x202a <GPIO_setupPinDirection+0x1bc>
    2026:	88 0f       	add	r24, r24
    2028:	99 1f       	adc	r25, r25
    202a:	0a 94       	dec	r0
    202c:	e2 f7       	brpl	.-8      	; 0x2026 <GPIO_setupPinDirection+0x1b8>
    202e:	80 95       	com	r24
    2030:	84 23       	and	r24, r20
    2032:	8c 93       	st	X, r24
    2034:	02 c0       	rjmp	.+4      	; 0x203a <GPIO_setupPinDirection+0x1cc>
			}
			break;
		default:
			return GPIO_FALIURE;
    2036:	1e 82       	std	Y+6, r1	; 0x06
    2038:	02 c0       	rjmp	.+4      	; 0x203e <GPIO_setupPinDirection+0x1d0>
		}
	}
	return GPIO_SUCCESS ;
    203a:	91 e0       	ldi	r25, 0x01	; 1
    203c:	9e 83       	std	Y+6, r25	; 0x06
    203e:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2040:	26 96       	adiw	r28, 0x06	; 6
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	f8 94       	cli
    2046:	de bf       	out	0x3e, r29	; 62
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	cd bf       	out	0x3d, r28	; 61
    204c:	cf 91       	pop	r28
    204e:	df 91       	pop	r29
    2050:	08 95       	ret

00002052 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
GPIO_STATE GPIO_writePin(const uint8 port_num,const uint8 pin_num, uint8 value)
{
    2052:	df 93       	push	r29
    2054:	cf 93       	push	r28
    2056:	00 d0       	rcall	.+0      	; 0x2058 <GPIO_writePin+0x6>
    2058:	00 d0       	rcall	.+0      	; 0x205a <GPIO_writePin+0x8>
    205a:	00 d0       	rcall	.+0      	; 0x205c <GPIO_writePin+0xa>
    205c:	cd b7       	in	r28, 0x3d	; 61
    205e:	de b7       	in	r29, 0x3e	; 62
    2060:	89 83       	std	Y+1, r24	; 0x01
    2062:	6a 83       	std	Y+2, r22	; 0x02
    2064:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)){
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	88 30       	cpi	r24, 0x08	; 8
    206a:	18 f4       	brcc	.+6      	; 0x2072 <GPIO_writePin+0x20>
    206c:	89 81       	ldd	r24, Y+1	; 0x01
    206e:	84 30       	cpi	r24, 0x04	; 4
    2070:	10 f0       	brcs	.+4      	; 0x2076 <GPIO_writePin+0x24>
		return GPIO_FALIURE;
    2072:	1e 82       	std	Y+6, r1	; 0x06
    2074:	d6 c0       	rjmp	.+428    	; 0x2222 <GPIO_writePin+0x1d0>
	}
	else{
		/* Write the pin value as required */
		switch(port_num)
    2076:	89 81       	ldd	r24, Y+1	; 0x01
    2078:	28 2f       	mov	r18, r24
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	3d 83       	std	Y+5, r19	; 0x05
    207e:	2c 83       	std	Y+4, r18	; 0x04
    2080:	8c 81       	ldd	r24, Y+4	; 0x04
    2082:	9d 81       	ldd	r25, Y+5	; 0x05
    2084:	81 30       	cpi	r24, 0x01	; 1
    2086:	91 05       	cpc	r25, r1
    2088:	09 f4       	brne	.+2      	; 0x208c <GPIO_writePin+0x3a>
    208a:	43 c0       	rjmp	.+134    	; 0x2112 <GPIO_writePin+0xc0>
    208c:	2c 81       	ldd	r18, Y+4	; 0x04
    208e:	3d 81       	ldd	r19, Y+5	; 0x05
    2090:	22 30       	cpi	r18, 0x02	; 2
    2092:	31 05       	cpc	r19, r1
    2094:	2c f4       	brge	.+10     	; 0x20a0 <GPIO_writePin+0x4e>
    2096:	8c 81       	ldd	r24, Y+4	; 0x04
    2098:	9d 81       	ldd	r25, Y+5	; 0x05
    209a:	00 97       	sbiw	r24, 0x00	; 0
    209c:	71 f0       	breq	.+28     	; 0x20ba <GPIO_writePin+0x68>
    209e:	bd c0       	rjmp	.+378    	; 0x221a <GPIO_writePin+0x1c8>
    20a0:	2c 81       	ldd	r18, Y+4	; 0x04
    20a2:	3d 81       	ldd	r19, Y+5	; 0x05
    20a4:	22 30       	cpi	r18, 0x02	; 2
    20a6:	31 05       	cpc	r19, r1
    20a8:	09 f4       	brne	.+2      	; 0x20ac <GPIO_writePin+0x5a>
    20aa:	5f c0       	rjmp	.+190    	; 0x216a <GPIO_writePin+0x118>
    20ac:	8c 81       	ldd	r24, Y+4	; 0x04
    20ae:	9d 81       	ldd	r25, Y+5	; 0x05
    20b0:	83 30       	cpi	r24, 0x03	; 3
    20b2:	91 05       	cpc	r25, r1
    20b4:	09 f4       	brne	.+2      	; 0x20b8 <GPIO_writePin+0x66>
    20b6:	85 c0       	rjmp	.+266    	; 0x21c2 <GPIO_writePin+0x170>
    20b8:	b0 c0       	rjmp	.+352    	; 0x221a <GPIO_writePin+0x1c8>
		{
		case PORTA_ID:
			if(value == HIGH)
    20ba:	8b 81       	ldd	r24, Y+3	; 0x03
    20bc:	81 30       	cpi	r24, 0x01	; 1
    20be:	a1 f4       	brne	.+40     	; 0x20e8 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    20c0:	ab e3       	ldi	r26, 0x3B	; 59
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	eb e3       	ldi	r30, 0x3B	; 59
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	48 2f       	mov	r20, r24
    20cc:	8a 81       	ldd	r24, Y+2	; 0x02
    20ce:	28 2f       	mov	r18, r24
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	02 2e       	mov	r0, r18
    20d8:	02 c0       	rjmp	.+4      	; 0x20de <GPIO_writePin+0x8c>
    20da:	88 0f       	add	r24, r24
    20dc:	99 1f       	adc	r25, r25
    20de:	0a 94       	dec	r0
    20e0:	e2 f7       	brpl	.-8      	; 0x20da <GPIO_writePin+0x88>
    20e2:	84 2b       	or	r24, r20
    20e4:	8c 93       	st	X, r24
    20e6:	9b c0       	rjmp	.+310    	; 0x221e <GPIO_writePin+0x1cc>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    20e8:	ab e3       	ldi	r26, 0x3B	; 59
    20ea:	b0 e0       	ldi	r27, 0x00	; 0
    20ec:	eb e3       	ldi	r30, 0x3B	; 59
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
    20f2:	48 2f       	mov	r20, r24
    20f4:	8a 81       	ldd	r24, Y+2	; 0x02
    20f6:	28 2f       	mov	r18, r24
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	02 2e       	mov	r0, r18
    2100:	02 c0       	rjmp	.+4      	; 0x2106 <GPIO_writePin+0xb4>
    2102:	88 0f       	add	r24, r24
    2104:	99 1f       	adc	r25, r25
    2106:	0a 94       	dec	r0
    2108:	e2 f7       	brpl	.-8      	; 0x2102 <GPIO_writePin+0xb0>
    210a:	80 95       	com	r24
    210c:	84 23       	and	r24, r20
    210e:	8c 93       	st	X, r24
    2110:	86 c0       	rjmp	.+268    	; 0x221e <GPIO_writePin+0x1cc>
			}
			break;
		case PORTB_ID:
			if(value == HIGH)
    2112:	8b 81       	ldd	r24, Y+3	; 0x03
    2114:	81 30       	cpi	r24, 0x01	; 1
    2116:	a1 f4       	brne	.+40     	; 0x2140 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2118:	a8 e3       	ldi	r26, 0x38	; 56
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	e8 e3       	ldi	r30, 0x38	; 56
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	48 2f       	mov	r20, r24
    2124:	8a 81       	ldd	r24, Y+2	; 0x02
    2126:	28 2f       	mov	r18, r24
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	02 2e       	mov	r0, r18
    2130:	02 c0       	rjmp	.+4      	; 0x2136 <GPIO_writePin+0xe4>
    2132:	88 0f       	add	r24, r24
    2134:	99 1f       	adc	r25, r25
    2136:	0a 94       	dec	r0
    2138:	e2 f7       	brpl	.-8      	; 0x2132 <GPIO_writePin+0xe0>
    213a:	84 2b       	or	r24, r20
    213c:	8c 93       	st	X, r24
    213e:	6f c0       	rjmp	.+222    	; 0x221e <GPIO_writePin+0x1cc>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2140:	a8 e3       	ldi	r26, 0x38	; 56
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	e8 e3       	ldi	r30, 0x38	; 56
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	48 2f       	mov	r20, r24
    214c:	8a 81       	ldd	r24, Y+2	; 0x02
    214e:	28 2f       	mov	r18, r24
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	02 2e       	mov	r0, r18
    2158:	02 c0       	rjmp	.+4      	; 0x215e <GPIO_writePin+0x10c>
    215a:	88 0f       	add	r24, r24
    215c:	99 1f       	adc	r25, r25
    215e:	0a 94       	dec	r0
    2160:	e2 f7       	brpl	.-8      	; 0x215a <GPIO_writePin+0x108>
    2162:	80 95       	com	r24
    2164:	84 23       	and	r24, r20
    2166:	8c 93       	st	X, r24
    2168:	5a c0       	rjmp	.+180    	; 0x221e <GPIO_writePin+0x1cc>
			}
			break;
		case PORTC_ID:
			if(value == HIGH)
    216a:	8b 81       	ldd	r24, Y+3	; 0x03
    216c:	81 30       	cpi	r24, 0x01	; 1
    216e:	a1 f4       	brne	.+40     	; 0x2198 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2170:	a5 e3       	ldi	r26, 0x35	; 53
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	e5 e3       	ldi	r30, 0x35	; 53
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	48 2f       	mov	r20, r24
    217c:	8a 81       	ldd	r24, Y+2	; 0x02
    217e:	28 2f       	mov	r18, r24
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	02 2e       	mov	r0, r18
    2188:	02 c0       	rjmp	.+4      	; 0x218e <GPIO_writePin+0x13c>
    218a:	88 0f       	add	r24, r24
    218c:	99 1f       	adc	r25, r25
    218e:	0a 94       	dec	r0
    2190:	e2 f7       	brpl	.-8      	; 0x218a <GPIO_writePin+0x138>
    2192:	84 2b       	or	r24, r20
    2194:	8c 93       	st	X, r24
    2196:	43 c0       	rjmp	.+134    	; 0x221e <GPIO_writePin+0x1cc>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2198:	a5 e3       	ldi	r26, 0x35	; 53
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	e5 e3       	ldi	r30, 0x35	; 53
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	48 2f       	mov	r20, r24
    21a4:	8a 81       	ldd	r24, Y+2	; 0x02
    21a6:	28 2f       	mov	r18, r24
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	02 2e       	mov	r0, r18
    21b0:	02 c0       	rjmp	.+4      	; 0x21b6 <GPIO_writePin+0x164>
    21b2:	88 0f       	add	r24, r24
    21b4:	99 1f       	adc	r25, r25
    21b6:	0a 94       	dec	r0
    21b8:	e2 f7       	brpl	.-8      	; 0x21b2 <GPIO_writePin+0x160>
    21ba:	80 95       	com	r24
    21bc:	84 23       	and	r24, r20
    21be:	8c 93       	st	X, r24
    21c0:	2e c0       	rjmp	.+92     	; 0x221e <GPIO_writePin+0x1cc>
			}
			break;
		case PORTD_ID:
			if(value == HIGH)
    21c2:	8b 81       	ldd	r24, Y+3	; 0x03
    21c4:	81 30       	cpi	r24, 0x01	; 1
    21c6:	a1 f4       	brne	.+40     	; 0x21f0 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    21c8:	a2 e3       	ldi	r26, 0x32	; 50
    21ca:	b0 e0       	ldi	r27, 0x00	; 0
    21cc:	e2 e3       	ldi	r30, 0x32	; 50
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	80 81       	ld	r24, Z
    21d2:	48 2f       	mov	r20, r24
    21d4:	8a 81       	ldd	r24, Y+2	; 0x02
    21d6:	28 2f       	mov	r18, r24
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	02 2e       	mov	r0, r18
    21e0:	02 c0       	rjmp	.+4      	; 0x21e6 <GPIO_writePin+0x194>
    21e2:	88 0f       	add	r24, r24
    21e4:	99 1f       	adc	r25, r25
    21e6:	0a 94       	dec	r0
    21e8:	e2 f7       	brpl	.-8      	; 0x21e2 <GPIO_writePin+0x190>
    21ea:	84 2b       	or	r24, r20
    21ec:	8c 93       	st	X, r24
    21ee:	17 c0       	rjmp	.+46     	; 0x221e <GPIO_writePin+0x1cc>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    21f0:	a2 e3       	ldi	r26, 0x32	; 50
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	e2 e3       	ldi	r30, 0x32	; 50
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 81       	ld	r24, Z
    21fa:	48 2f       	mov	r20, r24
    21fc:	8a 81       	ldd	r24, Y+2	; 0x02
    21fe:	28 2f       	mov	r18, r24
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	02 2e       	mov	r0, r18
    2208:	02 c0       	rjmp	.+4      	; 0x220e <GPIO_writePin+0x1bc>
    220a:	88 0f       	add	r24, r24
    220c:	99 1f       	adc	r25, r25
    220e:	0a 94       	dec	r0
    2210:	e2 f7       	brpl	.-8      	; 0x220a <GPIO_writePin+0x1b8>
    2212:	80 95       	com	r24
    2214:	84 23       	and	r24, r20
    2216:	8c 93       	st	X, r24
    2218:	02 c0       	rjmp	.+4      	; 0x221e <GPIO_writePin+0x1cc>
			}
			break;
		default:
			return GPIO_FALIURE;
    221a:	1e 82       	std	Y+6, r1	; 0x06
    221c:	02 c0       	rjmp	.+4      	; 0x2222 <GPIO_writePin+0x1d0>
		}
	}
	return GPIO_SUCCESS ;
    221e:	91 e0       	ldi	r25, 0x01	; 1
    2220:	9e 83       	std	Y+6, r25	; 0x06
    2222:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2224:	26 96       	adiw	r28, 0x06	; 6
    2226:	0f b6       	in	r0, 0x3f	; 63
    2228:	f8 94       	cli
    222a:	de bf       	out	0x3e, r29	; 62
    222c:	0f be       	out	0x3f, r0	; 63
    222e:	cd bf       	out	0x3d, r28	; 61
    2230:	cf 91       	pop	r28
    2232:	df 91       	pop	r29
    2234:	08 95       	ret

00002236 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(const uint8 port_num,const uint8 pin_num)
{
    2236:	df 93       	push	r29
    2238:	cf 93       	push	r28
    223a:	00 d0       	rcall	.+0      	; 0x223c <GPIO_readPin+0x6>
    223c:	00 d0       	rcall	.+0      	; 0x223e <GPIO_readPin+0x8>
    223e:	00 d0       	rcall	.+0      	; 0x2240 <GPIO_readPin+0xa>
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    2244:	8a 83       	std	Y+2, r24	; 0x02
    2246:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOW;
    2248:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)){
    224a:	8b 81       	ldd	r24, Y+3	; 0x03
    224c:	88 30       	cpi	r24, 0x08	; 8
    224e:	18 f4       	brcc	.+6      	; 0x2256 <GPIO_readPin+0x20>
    2250:	8a 81       	ldd	r24, Y+2	; 0x02
    2252:	84 30       	cpi	r24, 0x04	; 4
    2254:	10 f0       	brcs	.+4      	; 0x225a <GPIO_readPin+0x24>
		return GPIO_FALIURE;
    2256:	1e 82       	std	Y+6, r1	; 0x06
    2258:	85 c0       	rjmp	.+266    	; 0x2364 <GPIO_readPin+0x12e>
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num){
    225a:	8a 81       	ldd	r24, Y+2	; 0x02
    225c:	28 2f       	mov	r18, r24
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	3d 83       	std	Y+5, r19	; 0x05
    2262:	2c 83       	std	Y+4, r18	; 0x04
    2264:	4c 81       	ldd	r20, Y+4	; 0x04
    2266:	5d 81       	ldd	r21, Y+5	; 0x05
    2268:	41 30       	cpi	r20, 0x01	; 1
    226a:	51 05       	cpc	r21, r1
    226c:	79 f1       	breq	.+94     	; 0x22cc <GPIO_readPin+0x96>
    226e:	8c 81       	ldd	r24, Y+4	; 0x04
    2270:	9d 81       	ldd	r25, Y+5	; 0x05
    2272:	82 30       	cpi	r24, 0x02	; 2
    2274:	91 05       	cpc	r25, r1
    2276:	34 f4       	brge	.+12     	; 0x2284 <GPIO_readPin+0x4e>
    2278:	2c 81       	ldd	r18, Y+4	; 0x04
    227a:	3d 81       	ldd	r19, Y+5	; 0x05
    227c:	21 15       	cp	r18, r1
    227e:	31 05       	cpc	r19, r1
    2280:	69 f0       	breq	.+26     	; 0x229c <GPIO_readPin+0x66>
    2282:	6c c0       	rjmp	.+216    	; 0x235c <GPIO_readPin+0x126>
    2284:	4c 81       	ldd	r20, Y+4	; 0x04
    2286:	5d 81       	ldd	r21, Y+5	; 0x05
    2288:	42 30       	cpi	r20, 0x02	; 2
    228a:	51 05       	cpc	r21, r1
    228c:	b9 f1       	breq	.+110    	; 0x22fc <GPIO_readPin+0xc6>
    228e:	8c 81       	ldd	r24, Y+4	; 0x04
    2290:	9d 81       	ldd	r25, Y+5	; 0x05
    2292:	83 30       	cpi	r24, 0x03	; 3
    2294:	91 05       	cpc	r25, r1
    2296:	09 f4       	brne	.+2      	; 0x229a <GPIO_readPin+0x64>
    2298:	49 c0       	rjmp	.+146    	; 0x232c <GPIO_readPin+0xf6>
    229a:	60 c0       	rjmp	.+192    	; 0x235c <GPIO_readPin+0x126>
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    229c:	e9 e3       	ldi	r30, 0x39	; 57
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	28 2f       	mov	r18, r24
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	8b 81       	ldd	r24, Y+3	; 0x03
    22a8:	88 2f       	mov	r24, r24
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	a9 01       	movw	r20, r18
    22ae:	02 c0       	rjmp	.+4      	; 0x22b4 <GPIO_readPin+0x7e>
    22b0:	55 95       	asr	r21
    22b2:	47 95       	ror	r20
    22b4:	8a 95       	dec	r24
    22b6:	e2 f7       	brpl	.-8      	; 0x22b0 <GPIO_readPin+0x7a>
    22b8:	ca 01       	movw	r24, r20
    22ba:	81 70       	andi	r24, 0x01	; 1
    22bc:	90 70       	andi	r25, 0x00	; 0
    22be:	88 23       	and	r24, r24
    22c0:	19 f0       	breq	.+6      	; 0x22c8 <GPIO_readPin+0x92>
			{
				pin_value=HIGH;
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	89 83       	std	Y+1, r24	; 0x01
    22c6:	4c c0       	rjmp	.+152    	; 0x2360 <GPIO_readPin+0x12a>
			}
			else
			{
				pin_value=LOW;
    22c8:	19 82       	std	Y+1, r1	; 0x01
    22ca:	4a c0       	rjmp	.+148    	; 0x2360 <GPIO_readPin+0x12a>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    22cc:	e6 e3       	ldi	r30, 0x36	; 54
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	80 81       	ld	r24, Z
    22d2:	28 2f       	mov	r18, r24
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	8b 81       	ldd	r24, Y+3	; 0x03
    22d8:	88 2f       	mov	r24, r24
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	a9 01       	movw	r20, r18
    22de:	02 c0       	rjmp	.+4      	; 0x22e4 <GPIO_readPin+0xae>
    22e0:	55 95       	asr	r21
    22e2:	47 95       	ror	r20
    22e4:	8a 95       	dec	r24
    22e6:	e2 f7       	brpl	.-8      	; 0x22e0 <GPIO_readPin+0xaa>
    22e8:	ca 01       	movw	r24, r20
    22ea:	81 70       	andi	r24, 0x01	; 1
    22ec:	90 70       	andi	r25, 0x00	; 0
    22ee:	88 23       	and	r24, r24
    22f0:	19 f0       	breq	.+6      	; 0x22f8 <GPIO_readPin+0xc2>
			{
				pin_value=HIGH;			}
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	89 83       	std	Y+1, r24	; 0x01
    22f6:	34 c0       	rjmp	.+104    	; 0x2360 <GPIO_readPin+0x12a>
			else
			{
				pin_value=LOW;
    22f8:	19 82       	std	Y+1, r1	; 0x01
    22fa:	32 c0       	rjmp	.+100    	; 0x2360 <GPIO_readPin+0x12a>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    22fc:	e3 e3       	ldi	r30, 0x33	; 51
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	80 81       	ld	r24, Z
    2302:	28 2f       	mov	r18, r24
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	8b 81       	ldd	r24, Y+3	; 0x03
    2308:	88 2f       	mov	r24, r24
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	a9 01       	movw	r20, r18
    230e:	02 c0       	rjmp	.+4      	; 0x2314 <GPIO_readPin+0xde>
    2310:	55 95       	asr	r21
    2312:	47 95       	ror	r20
    2314:	8a 95       	dec	r24
    2316:	e2 f7       	brpl	.-8      	; 0x2310 <GPIO_readPin+0xda>
    2318:	ca 01       	movw	r24, r20
    231a:	81 70       	andi	r24, 0x01	; 1
    231c:	90 70       	andi	r25, 0x00	; 0
    231e:	88 23       	and	r24, r24
    2320:	19 f0       	breq	.+6      	; 0x2328 <GPIO_readPin+0xf2>
			{
				pin_value=HIGH;			}
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	89 83       	std	Y+1, r24	; 0x01
    2326:	1c c0       	rjmp	.+56     	; 0x2360 <GPIO_readPin+0x12a>
			else
			{
				pin_value=LOW;
    2328:	19 82       	std	Y+1, r1	; 0x01
    232a:	1a c0       	rjmp	.+52     	; 0x2360 <GPIO_readPin+0x12a>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    232c:	e0 e3       	ldi	r30, 0x30	; 48
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	80 81       	ld	r24, Z
    2332:	28 2f       	mov	r18, r24
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	8b 81       	ldd	r24, Y+3	; 0x03
    2338:	88 2f       	mov	r24, r24
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	a9 01       	movw	r20, r18
    233e:	02 c0       	rjmp	.+4      	; 0x2344 <GPIO_readPin+0x10e>
    2340:	55 95       	asr	r21
    2342:	47 95       	ror	r20
    2344:	8a 95       	dec	r24
    2346:	e2 f7       	brpl	.-8      	; 0x2340 <GPIO_readPin+0x10a>
    2348:	ca 01       	movw	r24, r20
    234a:	81 70       	andi	r24, 0x01	; 1
    234c:	90 70       	andi	r25, 0x00	; 0
    234e:	88 23       	and	r24, r24
    2350:	19 f0       	breq	.+6      	; 0x2358 <GPIO_readPin+0x122>
			{
				pin_value=HIGH;			}
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	89 83       	std	Y+1, r24	; 0x01
    2356:	04 c0       	rjmp	.+8      	; 0x2360 <GPIO_readPin+0x12a>
			else
			{
				pin_value=LOW;
    2358:	19 82       	std	Y+1, r1	; 0x01
    235a:	02 c0       	rjmp	.+4      	; 0x2360 <GPIO_readPin+0x12a>
			}
			break;
		default:
			return GPIO_FALIURE;
    235c:	1e 82       	std	Y+6, r1	; 0x06
    235e:	02 c0       	rjmp	.+4      	; 0x2364 <GPIO_readPin+0x12e>
		}
	}
	return pin_value;
    2360:	59 81       	ldd	r21, Y+1	; 0x01
    2362:	5e 83       	std	Y+6, r21	; 0x06
    2364:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2366:	26 96       	adiw	r28, 0x06	; 6
    2368:	0f b6       	in	r0, 0x3f	; 63
    236a:	f8 94       	cli
    236c:	de bf       	out	0x3e, r29	; 62
    236e:	0f be       	out	0x3f, r0	; 63
    2370:	cd bf       	out	0x3d, r28	; 61
    2372:	cf 91       	pop	r28
    2374:	df 91       	pop	r29
    2376:	08 95       	ret

00002378 <GPIO_PinToggle>:
 * * Description :
 * Toggle the pin
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
GPIO_STATE	GPIO_PinToggle (const uint8 port_num,const uint8 pin_num)
{
    2378:	df 93       	push	r29
    237a:	cf 93       	push	r28
    237c:	00 d0       	rcall	.+0      	; 0x237e <GPIO_PinToggle+0x6>
    237e:	00 d0       	rcall	.+0      	; 0x2380 <GPIO_PinToggle+0x8>
    2380:	0f 92       	push	r0
    2382:	cd b7       	in	r28, 0x3d	; 61
    2384:	de b7       	in	r29, 0x3e	; 62
    2386:	89 83       	std	Y+1, r24	; 0x01
    2388:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)){
    238a:	8a 81       	ldd	r24, Y+2	; 0x02
    238c:	88 30       	cpi	r24, 0x08	; 8
    238e:	18 f4       	brcc	.+6      	; 0x2396 <GPIO_PinToggle+0x1e>
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	84 30       	cpi	r24, 0x04	; 4
    2394:	10 f0       	brcs	.+4      	; 0x239a <GPIO_PinToggle+0x22>
		return GPIO_FALIURE;
    2396:	1d 82       	std	Y+5, r1	; 0x05
    2398:	73 c0       	rjmp	.+230    	; 0x2480 <GPIO_PinToggle+0x108>
	}
	else
	{
		switch(port_num){
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	28 2f       	mov	r18, r24
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	3c 83       	std	Y+4, r19	; 0x04
    23a2:	2b 83       	std	Y+3, r18	; 0x03
    23a4:	8b 81       	ldd	r24, Y+3	; 0x03
    23a6:	9c 81       	ldd	r25, Y+4	; 0x04
    23a8:	81 30       	cpi	r24, 0x01	; 1
    23aa:	91 05       	cpc	r25, r1
    23ac:	49 f1       	breq	.+82     	; 0x2400 <GPIO_PinToggle+0x88>
    23ae:	2b 81       	ldd	r18, Y+3	; 0x03
    23b0:	3c 81       	ldd	r19, Y+4	; 0x04
    23b2:	22 30       	cpi	r18, 0x02	; 2
    23b4:	31 05       	cpc	r19, r1
    23b6:	2c f4       	brge	.+10     	; 0x23c2 <GPIO_PinToggle+0x4a>
    23b8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ba:	9c 81       	ldd	r25, Y+4	; 0x04
    23bc:	00 97       	sbiw	r24, 0x00	; 0
    23be:	61 f0       	breq	.+24     	; 0x23d8 <GPIO_PinToggle+0x60>
    23c0:	5b c0       	rjmp	.+182    	; 0x2478 <GPIO_PinToggle+0x100>
    23c2:	2b 81       	ldd	r18, Y+3	; 0x03
    23c4:	3c 81       	ldd	r19, Y+4	; 0x04
    23c6:	22 30       	cpi	r18, 0x02	; 2
    23c8:	31 05       	cpc	r19, r1
    23ca:	71 f1       	breq	.+92     	; 0x2428 <GPIO_PinToggle+0xb0>
    23cc:	8b 81       	ldd	r24, Y+3	; 0x03
    23ce:	9c 81       	ldd	r25, Y+4	; 0x04
    23d0:	83 30       	cpi	r24, 0x03	; 3
    23d2:	91 05       	cpc	r25, r1
    23d4:	e9 f1       	breq	.+122    	; 0x2450 <GPIO_PinToggle+0xd8>
    23d6:	50 c0       	rjmp	.+160    	; 0x2478 <GPIO_PinToggle+0x100>
		case PORTA_ID:
			TOGGLE_BIT(PORTA, pin_num);
    23d8:	ab e3       	ldi	r26, 0x3B	; 59
    23da:	b0 e0       	ldi	r27, 0x00	; 0
    23dc:	eb e3       	ldi	r30, 0x3B	; 59
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	80 81       	ld	r24, Z
    23e2:	48 2f       	mov	r20, r24
    23e4:	8a 81       	ldd	r24, Y+2	; 0x02
    23e6:	28 2f       	mov	r18, r24
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	02 2e       	mov	r0, r18
    23f0:	02 c0       	rjmp	.+4      	; 0x23f6 <GPIO_PinToggle+0x7e>
    23f2:	88 0f       	add	r24, r24
    23f4:	99 1f       	adc	r25, r25
    23f6:	0a 94       	dec	r0
    23f8:	e2 f7       	brpl	.-8      	; 0x23f2 <GPIO_PinToggle+0x7a>
    23fa:	84 27       	eor	r24, r20
    23fc:	8c 93       	st	X, r24
    23fe:	3e c0       	rjmp	.+124    	; 0x247c <GPIO_PinToggle+0x104>
			break;
		case PORTB_ID:
			TOGGLE_BIT(PORTB, pin_num);
    2400:	a8 e3       	ldi	r26, 0x38	; 56
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	e8 e3       	ldi	r30, 0x38	; 56
    2406:	f0 e0       	ldi	r31, 0x00	; 0
    2408:	80 81       	ld	r24, Z
    240a:	48 2f       	mov	r20, r24
    240c:	8a 81       	ldd	r24, Y+2	; 0x02
    240e:	28 2f       	mov	r18, r24
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	02 2e       	mov	r0, r18
    2418:	02 c0       	rjmp	.+4      	; 0x241e <GPIO_PinToggle+0xa6>
    241a:	88 0f       	add	r24, r24
    241c:	99 1f       	adc	r25, r25
    241e:	0a 94       	dec	r0
    2420:	e2 f7       	brpl	.-8      	; 0x241a <GPIO_PinToggle+0xa2>
    2422:	84 27       	eor	r24, r20
    2424:	8c 93       	st	X, r24
    2426:	2a c0       	rjmp	.+84     	; 0x247c <GPIO_PinToggle+0x104>
			break;
		case PORTC_ID:
			TOGGLE_BIT(PORTC, pin_num);
    2428:	a5 e3       	ldi	r26, 0x35	; 53
    242a:	b0 e0       	ldi	r27, 0x00	; 0
    242c:	e5 e3       	ldi	r30, 0x35	; 53
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	80 81       	ld	r24, Z
    2432:	48 2f       	mov	r20, r24
    2434:	8a 81       	ldd	r24, Y+2	; 0x02
    2436:	28 2f       	mov	r18, r24
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	02 2e       	mov	r0, r18
    2440:	02 c0       	rjmp	.+4      	; 0x2446 <GPIO_PinToggle+0xce>
    2442:	88 0f       	add	r24, r24
    2444:	99 1f       	adc	r25, r25
    2446:	0a 94       	dec	r0
    2448:	e2 f7       	brpl	.-8      	; 0x2442 <GPIO_PinToggle+0xca>
    244a:	84 27       	eor	r24, r20
    244c:	8c 93       	st	X, r24
    244e:	16 c0       	rjmp	.+44     	; 0x247c <GPIO_PinToggle+0x104>
			break;
		case PORTD_ID:
			TOGGLE_BIT(PORTD, pin_num);
    2450:	a2 e3       	ldi	r26, 0x32	; 50
    2452:	b0 e0       	ldi	r27, 0x00	; 0
    2454:	e2 e3       	ldi	r30, 0x32	; 50
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	80 81       	ld	r24, Z
    245a:	48 2f       	mov	r20, r24
    245c:	8a 81       	ldd	r24, Y+2	; 0x02
    245e:	28 2f       	mov	r18, r24
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	02 2e       	mov	r0, r18
    2468:	02 c0       	rjmp	.+4      	; 0x246e <GPIO_PinToggle+0xf6>
    246a:	88 0f       	add	r24, r24
    246c:	99 1f       	adc	r25, r25
    246e:	0a 94       	dec	r0
    2470:	e2 f7       	brpl	.-8      	; 0x246a <GPIO_PinToggle+0xf2>
    2472:	84 27       	eor	r24, r20
    2474:	8c 93       	st	X, r24
    2476:	02 c0       	rjmp	.+4      	; 0x247c <GPIO_PinToggle+0x104>
			break;
		default:
			return GPIO_FALIURE;
    2478:	1d 82       	std	Y+5, r1	; 0x05
    247a:	02 c0       	rjmp	.+4      	; 0x2480 <GPIO_PinToggle+0x108>
		}
	}
	return GPIO_SUCCESS ;
    247c:	91 e0       	ldi	r25, 0x01	; 1
    247e:	9d 83       	std	Y+5, r25	; 0x05
    2480:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2482:	0f 90       	pop	r0
    2484:	0f 90       	pop	r0
    2486:	0f 90       	pop	r0
    2488:	0f 90       	pop	r0
    248a:	0f 90       	pop	r0
    248c:	cf 91       	pop	r28
    248e:	df 91       	pop	r29
    2490:	08 95       	ret

00002492 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_STATE GPIO_setupPortDirection(const uint8 port_num, uint8 direction)
{
    2492:	df 93       	push	r29
    2494:	cf 93       	push	r28
    2496:	00 d0       	rcall	.+0      	; 0x2498 <GPIO_setupPortDirection+0x6>
    2498:	00 d0       	rcall	.+0      	; 0x249a <GPIO_setupPortDirection+0x8>
    249a:	0f 92       	push	r0
    249c:	cd b7       	in	r28, 0x3d	; 61
    249e:	de b7       	in	r29, 0x3e	; 62
    24a0:	89 83       	std	Y+1, r24	; 0x01
    24a2:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    24a4:	89 81       	ldd	r24, Y+1	; 0x01
    24a6:	84 30       	cpi	r24, 0x04	; 4
    24a8:	10 f0       	brcs	.+4      	; 0x24ae <GPIO_setupPortDirection+0x1c>
	{
		return GPIO_FALIURE;
    24aa:	1d 82       	std	Y+5, r1	; 0x05
    24ac:	37 c0       	rjmp	.+110    	; 0x251c <GPIO_setupPortDirection+0x8a>
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num){
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
    24b0:	28 2f       	mov	r18, r24
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	3c 83       	std	Y+4, r19	; 0x04
    24b6:	2b 83       	std	Y+3, r18	; 0x03
    24b8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ba:	9c 81       	ldd	r25, Y+4	; 0x04
    24bc:	81 30       	cpi	r24, 0x01	; 1
    24be:	91 05       	cpc	r25, r1
    24c0:	d1 f0       	breq	.+52     	; 0x24f6 <GPIO_setupPortDirection+0x64>
    24c2:	2b 81       	ldd	r18, Y+3	; 0x03
    24c4:	3c 81       	ldd	r19, Y+4	; 0x04
    24c6:	22 30       	cpi	r18, 0x02	; 2
    24c8:	31 05       	cpc	r19, r1
    24ca:	2c f4       	brge	.+10     	; 0x24d6 <GPIO_setupPortDirection+0x44>
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	9c 81       	ldd	r25, Y+4	; 0x04
    24d0:	00 97       	sbiw	r24, 0x00	; 0
    24d2:	61 f0       	breq	.+24     	; 0x24ec <GPIO_setupPortDirection+0x5a>
    24d4:	1f c0       	rjmp	.+62     	; 0x2514 <GPIO_setupPortDirection+0x82>
    24d6:	2b 81       	ldd	r18, Y+3	; 0x03
    24d8:	3c 81       	ldd	r19, Y+4	; 0x04
    24da:	22 30       	cpi	r18, 0x02	; 2
    24dc:	31 05       	cpc	r19, r1
    24de:	81 f0       	breq	.+32     	; 0x2500 <GPIO_setupPortDirection+0x6e>
    24e0:	8b 81       	ldd	r24, Y+3	; 0x03
    24e2:	9c 81       	ldd	r25, Y+4	; 0x04
    24e4:	83 30       	cpi	r24, 0x03	; 3
    24e6:	91 05       	cpc	r25, r1
    24e8:	81 f0       	breq	.+32     	; 0x250a <GPIO_setupPortDirection+0x78>
    24ea:	14 c0       	rjmp	.+40     	; 0x2514 <GPIO_setupPortDirection+0x82>
		case PORTA_ID:
			DDRA=direction;
    24ec:	ea e3       	ldi	r30, 0x3A	; 58
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	8a 81       	ldd	r24, Y+2	; 0x02
    24f2:	80 83       	st	Z, r24
    24f4:	11 c0       	rjmp	.+34     	; 0x2518 <GPIO_setupPortDirection+0x86>
			break;
		case PORTB_ID:
			DDRB=direction;
    24f6:	e7 e3       	ldi	r30, 0x37	; 55
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	8a 81       	ldd	r24, Y+2	; 0x02
    24fc:	80 83       	st	Z, r24
    24fe:	0c c0       	rjmp	.+24     	; 0x2518 <GPIO_setupPortDirection+0x86>
			break;
		case PORTC_ID:
			DDRC=direction;
    2500:	e4 e3       	ldi	r30, 0x34	; 52
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	8a 81       	ldd	r24, Y+2	; 0x02
    2506:	80 83       	st	Z, r24
    2508:	07 c0       	rjmp	.+14     	; 0x2518 <GPIO_setupPortDirection+0x86>
			break;
		case PORTD_ID:
			DDRD=direction;
    250a:	e1 e3       	ldi	r30, 0x31	; 49
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	8a 81       	ldd	r24, Y+2	; 0x02
    2510:	80 83       	st	Z, r24
    2512:	02 c0       	rjmp	.+4      	; 0x2518 <GPIO_setupPortDirection+0x86>
			break;
		default:
			return GPIO_FALIURE;
    2514:	1d 82       	std	Y+5, r1	; 0x05
    2516:	02 c0       	rjmp	.+4      	; 0x251c <GPIO_setupPortDirection+0x8a>
		}
	}
	return GPIO_SUCCESS ;
    2518:	91 e0       	ldi	r25, 0x01	; 1
    251a:	9d 83       	std	Y+5, r25	; 0x05
    251c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    251e:	0f 90       	pop	r0
    2520:	0f 90       	pop	r0
    2522:	0f 90       	pop	r0
    2524:	0f 90       	pop	r0
    2526:	0f 90       	pop	r0
    2528:	cf 91       	pop	r28
    252a:	df 91       	pop	r29
    252c:	08 95       	ret

0000252e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_STATE GPIO_writePort(const uint8 port_num, uint8 value)
{
    252e:	df 93       	push	r29
    2530:	cf 93       	push	r28
    2532:	00 d0       	rcall	.+0      	; 0x2534 <GPIO_writePort+0x6>
    2534:	00 d0       	rcall	.+0      	; 0x2536 <GPIO_writePort+0x8>
    2536:	0f 92       	push	r0
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
    253c:	89 83       	std	Y+1, r24	; 0x01
    253e:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	84 30       	cpi	r24, 0x04	; 4
    2544:	10 f0       	brcs	.+4      	; 0x254a <GPIO_writePort+0x1c>
	{
		return GPIO_FALIURE;
    2546:	1d 82       	std	Y+5, r1	; 0x05
    2548:	37 c0       	rjmp	.+110    	; 0x25b8 <GPIO_writePort+0x8a>
	}
	else
	{
		switch(port_num){
    254a:	89 81       	ldd	r24, Y+1	; 0x01
    254c:	28 2f       	mov	r18, r24
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	3c 83       	std	Y+4, r19	; 0x04
    2552:	2b 83       	std	Y+3, r18	; 0x03
    2554:	8b 81       	ldd	r24, Y+3	; 0x03
    2556:	9c 81       	ldd	r25, Y+4	; 0x04
    2558:	81 30       	cpi	r24, 0x01	; 1
    255a:	91 05       	cpc	r25, r1
    255c:	d1 f0       	breq	.+52     	; 0x2592 <GPIO_writePort+0x64>
    255e:	2b 81       	ldd	r18, Y+3	; 0x03
    2560:	3c 81       	ldd	r19, Y+4	; 0x04
    2562:	22 30       	cpi	r18, 0x02	; 2
    2564:	31 05       	cpc	r19, r1
    2566:	2c f4       	brge	.+10     	; 0x2572 <GPIO_writePort+0x44>
    2568:	8b 81       	ldd	r24, Y+3	; 0x03
    256a:	9c 81       	ldd	r25, Y+4	; 0x04
    256c:	00 97       	sbiw	r24, 0x00	; 0
    256e:	61 f0       	breq	.+24     	; 0x2588 <GPIO_writePort+0x5a>
    2570:	1f c0       	rjmp	.+62     	; 0x25b0 <GPIO_writePort+0x82>
    2572:	2b 81       	ldd	r18, Y+3	; 0x03
    2574:	3c 81       	ldd	r19, Y+4	; 0x04
    2576:	22 30       	cpi	r18, 0x02	; 2
    2578:	31 05       	cpc	r19, r1
    257a:	81 f0       	breq	.+32     	; 0x259c <GPIO_writePort+0x6e>
    257c:	8b 81       	ldd	r24, Y+3	; 0x03
    257e:	9c 81       	ldd	r25, Y+4	; 0x04
    2580:	83 30       	cpi	r24, 0x03	; 3
    2582:	91 05       	cpc	r25, r1
    2584:	81 f0       	breq	.+32     	; 0x25a6 <GPIO_writePort+0x78>
    2586:	14 c0       	rjmp	.+40     	; 0x25b0 <GPIO_writePort+0x82>
		case PORTA_ID:
			PORTA=value;
    2588:	eb e3       	ldi	r30, 0x3B	; 59
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	8a 81       	ldd	r24, Y+2	; 0x02
    258e:	80 83       	st	Z, r24
    2590:	11 c0       	rjmp	.+34     	; 0x25b4 <GPIO_writePort+0x86>
			break;
		case PORTB_ID:
			PORTB=value;
    2592:	e8 e3       	ldi	r30, 0x38	; 56
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	8a 81       	ldd	r24, Y+2	; 0x02
    2598:	80 83       	st	Z, r24
    259a:	0c c0       	rjmp	.+24     	; 0x25b4 <GPIO_writePort+0x86>
			break;
		case PORTC_ID:
			PORTC=value;
    259c:	e5 e3       	ldi	r30, 0x35	; 53
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	8a 81       	ldd	r24, Y+2	; 0x02
    25a2:	80 83       	st	Z, r24
    25a4:	07 c0       	rjmp	.+14     	; 0x25b4 <GPIO_writePort+0x86>
			break;
		case PORTD_ID:
			PORTD=value;
    25a6:	e2 e3       	ldi	r30, 0x32	; 50
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	8a 81       	ldd	r24, Y+2	; 0x02
    25ac:	80 83       	st	Z, r24
    25ae:	02 c0       	rjmp	.+4      	; 0x25b4 <GPIO_writePort+0x86>
			break;
		default:
			return GPIO_FALIURE;
    25b0:	1d 82       	std	Y+5, r1	; 0x05
    25b2:	02 c0       	rjmp	.+4      	; 0x25b8 <GPIO_writePort+0x8a>
		}
	}
	return GPIO_SUCCESS ;
    25b4:	91 e0       	ldi	r25, 0x01	; 1
    25b6:	9d 83       	std	Y+5, r25	; 0x05
    25b8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    25ba:	0f 90       	pop	r0
    25bc:	0f 90       	pop	r0
    25be:	0f 90       	pop	r0
    25c0:	0f 90       	pop	r0
    25c2:	0f 90       	pop	r0
    25c4:	cf 91       	pop	r28
    25c6:	df 91       	pop	r29
    25c8:	08 95       	ret

000025ca <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(const uint8 port_num)
{
    25ca:	df 93       	push	r29
    25cc:	cf 93       	push	r28
    25ce:	00 d0       	rcall	.+0      	; 0x25d0 <GPIO_readPort+0x6>
    25d0:	00 d0       	rcall	.+0      	; 0x25d2 <GPIO_readPort+0x8>
    25d2:	0f 92       	push	r0
    25d4:	cd b7       	in	r28, 0x3d	; 61
    25d6:	de b7       	in	r29, 0x3e	; 62
    25d8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_value = LOW;
    25da:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    25dc:	8a 81       	ldd	r24, Y+2	; 0x02
    25de:	84 30       	cpi	r24, 0x04	; 4
    25e0:	10 f0       	brcs	.+4      	; 0x25e6 <GPIO_readPort+0x1c>
	{
		return GPIO_FALIURE;
    25e2:	1d 82       	std	Y+5, r1	; 0x05
    25e4:	37 c0       	rjmp	.+110    	; 0x2654 <GPIO_readPort+0x8a>
	}
	else
	{
		switch(port_num){
    25e6:	8a 81       	ldd	r24, Y+2	; 0x02
    25e8:	28 2f       	mov	r18, r24
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	3c 83       	std	Y+4, r19	; 0x04
    25ee:	2b 83       	std	Y+3, r18	; 0x03
    25f0:	8b 81       	ldd	r24, Y+3	; 0x03
    25f2:	9c 81       	ldd	r25, Y+4	; 0x04
    25f4:	81 30       	cpi	r24, 0x01	; 1
    25f6:	91 05       	cpc	r25, r1
    25f8:	d1 f0       	breq	.+52     	; 0x262e <GPIO_readPort+0x64>
    25fa:	2b 81       	ldd	r18, Y+3	; 0x03
    25fc:	3c 81       	ldd	r19, Y+4	; 0x04
    25fe:	22 30       	cpi	r18, 0x02	; 2
    2600:	31 05       	cpc	r19, r1
    2602:	2c f4       	brge	.+10     	; 0x260e <GPIO_readPort+0x44>
    2604:	8b 81       	ldd	r24, Y+3	; 0x03
    2606:	9c 81       	ldd	r25, Y+4	; 0x04
    2608:	00 97       	sbiw	r24, 0x00	; 0
    260a:	61 f0       	breq	.+24     	; 0x2624 <GPIO_readPort+0x5a>
    260c:	1f c0       	rjmp	.+62     	; 0x264c <GPIO_readPort+0x82>
    260e:	2b 81       	ldd	r18, Y+3	; 0x03
    2610:	3c 81       	ldd	r19, Y+4	; 0x04
    2612:	22 30       	cpi	r18, 0x02	; 2
    2614:	31 05       	cpc	r19, r1
    2616:	81 f0       	breq	.+32     	; 0x2638 <GPIO_readPort+0x6e>
    2618:	8b 81       	ldd	r24, Y+3	; 0x03
    261a:	9c 81       	ldd	r25, Y+4	; 0x04
    261c:	83 30       	cpi	r24, 0x03	; 3
    261e:	91 05       	cpc	r25, r1
    2620:	81 f0       	breq	.+32     	; 0x2642 <GPIO_readPort+0x78>
    2622:	14 c0       	rjmp	.+40     	; 0x264c <GPIO_readPort+0x82>
		case PORTA_ID:
			port_value=PINA;
    2624:	e9 e3       	ldi	r30, 0x39	; 57
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	80 81       	ld	r24, Z
    262a:	89 83       	std	Y+1, r24	; 0x01
    262c:	11 c0       	rjmp	.+34     	; 0x2650 <GPIO_readPort+0x86>
			break;
		case PORTB_ID:
			port_value=PINB;
    262e:	e6 e3       	ldi	r30, 0x36	; 54
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	80 81       	ld	r24, Z
    2634:	89 83       	std	Y+1, r24	; 0x01
    2636:	0c c0       	rjmp	.+24     	; 0x2650 <GPIO_readPort+0x86>
			break;
		case PORTC_ID:
			port_value=PINC;
    2638:	e3 e3       	ldi	r30, 0x33	; 51
    263a:	f0 e0       	ldi	r31, 0x00	; 0
    263c:	80 81       	ld	r24, Z
    263e:	89 83       	std	Y+1, r24	; 0x01
    2640:	07 c0       	rjmp	.+14     	; 0x2650 <GPIO_readPort+0x86>
			break;
		case PORTD_ID:
			port_value=PIND;
    2642:	e0 e3       	ldi	r30, 0x30	; 48
    2644:	f0 e0       	ldi	r31, 0x00	; 0
    2646:	80 81       	ld	r24, Z
    2648:	89 83       	std	Y+1, r24	; 0x01
    264a:	02 c0       	rjmp	.+4      	; 0x2650 <GPIO_readPort+0x86>
			break;
		default:
			return GPIO_FALIURE;
    264c:	1d 82       	std	Y+5, r1	; 0x05
    264e:	02 c0       	rjmp	.+4      	; 0x2654 <GPIO_readPort+0x8a>
		}
	}
	return port_value;
    2650:	99 81       	ldd	r25, Y+1	; 0x01
    2652:	9d 83       	std	Y+5, r25	; 0x05
    2654:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2656:	0f 90       	pop	r0
    2658:	0f 90       	pop	r0
    265a:	0f 90       	pop	r0
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	cf 91       	pop	r28
    2662:	df 91       	pop	r29
    2664:	08 95       	ret

00002666 <GPIO_PortToggle>:
 * * Description :
 * Toggle the pin
 * If the input port number is not correct, The function will return Logic Low.
 */
GPIO_STATE	GPIO_PortToggle(const uint8 port_num)
{
    2666:	df 93       	push	r29
    2668:	cf 93       	push	r28
    266a:	00 d0       	rcall	.+0      	; 0x266c <GPIO_PortToggle+0x6>
    266c:	00 d0       	rcall	.+0      	; 0x266e <GPIO_PortToggle+0x8>
    266e:	cd b7       	in	r28, 0x3d	; 61
    2670:	de b7       	in	r29, 0x3e	; 62
    2672:	89 83       	std	Y+1, r24	; 0x01
	if(port_num >= NUM_OF_PORTS)
    2674:	89 81       	ldd	r24, Y+1	; 0x01
    2676:	84 30       	cpi	r24, 0x04	; 4
    2678:	10 f0       	brcs	.+4      	; 0x267e <GPIO_PortToggle+0x18>
	{
		return GPIO_FALIURE;
    267a:	1c 82       	std	Y+4, r1	; 0x04
    267c:	43 c0       	rjmp	.+134    	; 0x2704 <GPIO_PortToggle+0x9e>
	}
	else
	{
		switch(port_num){
    267e:	89 81       	ldd	r24, Y+1	; 0x01
    2680:	28 2f       	mov	r18, r24
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	3b 83       	std	Y+3, r19	; 0x03
    2686:	2a 83       	std	Y+2, r18	; 0x02
    2688:	8a 81       	ldd	r24, Y+2	; 0x02
    268a:	9b 81       	ldd	r25, Y+3	; 0x03
    268c:	81 30       	cpi	r24, 0x01	; 1
    268e:	91 05       	cpc	r25, r1
    2690:	e9 f0       	breq	.+58     	; 0x26cc <GPIO_PortToggle+0x66>
    2692:	2a 81       	ldd	r18, Y+2	; 0x02
    2694:	3b 81       	ldd	r19, Y+3	; 0x03
    2696:	22 30       	cpi	r18, 0x02	; 2
    2698:	31 05       	cpc	r19, r1
    269a:	2c f4       	brge	.+10     	; 0x26a6 <GPIO_PortToggle+0x40>
    269c:	8a 81       	ldd	r24, Y+2	; 0x02
    269e:	9b 81       	ldd	r25, Y+3	; 0x03
    26a0:	00 97       	sbiw	r24, 0x00	; 0
    26a2:	61 f0       	breq	.+24     	; 0x26bc <GPIO_PortToggle+0x56>
    26a4:	2b c0       	rjmp	.+86     	; 0x26fc <GPIO_PortToggle+0x96>
    26a6:	2a 81       	ldd	r18, Y+2	; 0x02
    26a8:	3b 81       	ldd	r19, Y+3	; 0x03
    26aa:	22 30       	cpi	r18, 0x02	; 2
    26ac:	31 05       	cpc	r19, r1
    26ae:	b1 f0       	breq	.+44     	; 0x26dc <GPIO_PortToggle+0x76>
    26b0:	8a 81       	ldd	r24, Y+2	; 0x02
    26b2:	9b 81       	ldd	r25, Y+3	; 0x03
    26b4:	83 30       	cpi	r24, 0x03	; 3
    26b6:	91 05       	cpc	r25, r1
    26b8:	c9 f0       	breq	.+50     	; 0x26ec <GPIO_PortToggle+0x86>
    26ba:	20 c0       	rjmp	.+64     	; 0x26fc <GPIO_PortToggle+0x96>
		case PORTA_ID:
			PORTA^=0xFF;
    26bc:	ab e3       	ldi	r26, 0x3B	; 59
    26be:	b0 e0       	ldi	r27, 0x00	; 0
    26c0:	eb e3       	ldi	r30, 0x3B	; 59
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	80 81       	ld	r24, Z
    26c6:	80 95       	com	r24
    26c8:	8c 93       	st	X, r24
    26ca:	1a c0       	rjmp	.+52     	; 0x2700 <GPIO_PortToggle+0x9a>
			break;
		case PORTB_ID:
			PORTB^=0xFF;
    26cc:	a8 e3       	ldi	r26, 0x38	; 56
    26ce:	b0 e0       	ldi	r27, 0x00	; 0
    26d0:	e8 e3       	ldi	r30, 0x38	; 56
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	80 81       	ld	r24, Z
    26d6:	80 95       	com	r24
    26d8:	8c 93       	st	X, r24
    26da:	12 c0       	rjmp	.+36     	; 0x2700 <GPIO_PortToggle+0x9a>
			break;
		case PORTC_ID:
			PORTC^=0xFF;
    26dc:	a5 e3       	ldi	r26, 0x35	; 53
    26de:	b0 e0       	ldi	r27, 0x00	; 0
    26e0:	e5 e3       	ldi	r30, 0x35	; 53
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	80 81       	ld	r24, Z
    26e6:	80 95       	com	r24
    26e8:	8c 93       	st	X, r24
    26ea:	0a c0       	rjmp	.+20     	; 0x2700 <GPIO_PortToggle+0x9a>
			break;
		case PORTD_ID:
			PORTD^=0xFF;
    26ec:	a2 e3       	ldi	r26, 0x32	; 50
    26ee:	b0 e0       	ldi	r27, 0x00	; 0
    26f0:	e2 e3       	ldi	r30, 0x32	; 50
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	80 81       	ld	r24, Z
    26f6:	80 95       	com	r24
    26f8:	8c 93       	st	X, r24
    26fa:	02 c0       	rjmp	.+4      	; 0x2700 <GPIO_PortToggle+0x9a>
			break;
		default:
			return GPIO_FALIURE;
    26fc:	1c 82       	std	Y+4, r1	; 0x04
    26fe:	02 c0       	rjmp	.+4      	; 0x2704 <GPIO_PortToggle+0x9e>
		}
	}
	return GPIO_SUCCESS ;
    2700:	91 e0       	ldi	r25, 0x01	; 1
    2702:	9c 83       	std	Y+4, r25	; 0x04
    2704:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2706:	0f 90       	pop	r0
    2708:	0f 90       	pop	r0
    270a:	0f 90       	pop	r0
    270c:	0f 90       	pop	r0
    270e:	cf 91       	pop	r28
    2710:	df 91       	pop	r29
    2712:	08 95       	ret

00002714 <LED_Init>:
[DESCRIPTION]  :	Source file for the led driver.
------------------------------------------------------------------------------------------*/
#include"LED.h"
#include "../../MCAL/GPIO/GPIO.h"
LED_STATE LED_Init(st_Led* _led)
{
    2714:	df 93       	push	r29
    2716:	cf 93       	push	r28
    2718:	00 d0       	rcall	.+0      	; 0x271a <LED_Init+0x6>
    271a:	0f 92       	push	r0
    271c:	cd b7       	in	r28, 0x3d	; 61
    271e:	de b7       	in	r29, 0x3e	; 62
    2720:	9a 83       	std	Y+2, r25	; 0x02
    2722:	89 83       	std	Y+1, r24	; 0x01
	if(_led == NULL) return LED_FAILURE;
    2724:	89 81       	ldd	r24, Y+1	; 0x01
    2726:	9a 81       	ldd	r25, Y+2	; 0x02
    2728:	00 97       	sbiw	r24, 0x00	; 0
    272a:	11 f4       	brne	.+4      	; 0x2730 <LED_Init+0x1c>
    272c:	1b 82       	std	Y+3, r1	; 0x03
    272e:	0b c0       	rjmp	.+22     	; 0x2746 <LED_Init+0x32>
	return GPIO_setupPinDirection(_led->port, _led->pin, PIN_OUTPUT);
    2730:	e9 81       	ldd	r30, Y+1	; 0x01
    2732:	fa 81       	ldd	r31, Y+2	; 0x02
    2734:	80 81       	ld	r24, Z
    2736:	e9 81       	ldd	r30, Y+1	; 0x01
    2738:	fa 81       	ldd	r31, Y+2	; 0x02
    273a:	91 81       	ldd	r25, Z+1	; 0x01
    273c:	69 2f       	mov	r22, r25
    273e:	41 e0       	ldi	r20, 0x01	; 1
    2740:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <GPIO_setupPinDirection>
    2744:	8b 83       	std	Y+3, r24	; 0x03
    2746:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2748:	0f 90       	pop	r0
    274a:	0f 90       	pop	r0
    274c:	0f 90       	pop	r0
    274e:	cf 91       	pop	r28
    2750:	df 91       	pop	r29
    2752:	08 95       	ret

00002754 <LED_On>:

LED_STATE LED_On(st_Led* _led)
{
    2754:	df 93       	push	r29
    2756:	cf 93       	push	r28
    2758:	00 d0       	rcall	.+0      	; 0x275a <LED_On+0x6>
    275a:	0f 92       	push	r0
    275c:	cd b7       	in	r28, 0x3d	; 61
    275e:	de b7       	in	r29, 0x3e	; 62
    2760:	9a 83       	std	Y+2, r25	; 0x02
    2762:	89 83       	std	Y+1, r24	; 0x01
	if(_led == NULL) return LED_FAILURE;
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	9a 81       	ldd	r25, Y+2	; 0x02
    2768:	00 97       	sbiw	r24, 0x00	; 0
    276a:	11 f4       	brne	.+4      	; 0x2770 <LED_On+0x1c>
    276c:	1b 82       	std	Y+3, r1	; 0x03
    276e:	0b c0       	rjmp	.+22     	; 0x2786 <LED_On+0x32>
	return GPIO_writePin(_led->port, _led->pin, HIGH);
    2770:	e9 81       	ldd	r30, Y+1	; 0x01
    2772:	fa 81       	ldd	r31, Y+2	; 0x02
    2774:	80 81       	ld	r24, Z
    2776:	e9 81       	ldd	r30, Y+1	; 0x01
    2778:	fa 81       	ldd	r31, Y+2	; 0x02
    277a:	91 81       	ldd	r25, Z+1	; 0x01
    277c:	69 2f       	mov	r22, r25
    277e:	41 e0       	ldi	r20, 0x01	; 1
    2780:	0e 94 29 10 	call	0x2052	; 0x2052 <GPIO_writePin>
    2784:	8b 83       	std	Y+3, r24	; 0x03
    2786:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2788:	0f 90       	pop	r0
    278a:	0f 90       	pop	r0
    278c:	0f 90       	pop	r0
    278e:	cf 91       	pop	r28
    2790:	df 91       	pop	r29
    2792:	08 95       	ret

00002794 <LED_Off>:

LED_STATE LED_Off(st_Led* _led)
{
    2794:	df 93       	push	r29
    2796:	cf 93       	push	r28
    2798:	00 d0       	rcall	.+0      	; 0x279a <LED_Off+0x6>
    279a:	0f 92       	push	r0
    279c:	cd b7       	in	r28, 0x3d	; 61
    279e:	de b7       	in	r29, 0x3e	; 62
    27a0:	9a 83       	std	Y+2, r25	; 0x02
    27a2:	89 83       	std	Y+1, r24	; 0x01
	if(_led == NULL) return LED_FAILURE;
    27a4:	89 81       	ldd	r24, Y+1	; 0x01
    27a6:	9a 81       	ldd	r25, Y+2	; 0x02
    27a8:	00 97       	sbiw	r24, 0x00	; 0
    27aa:	11 f4       	brne	.+4      	; 0x27b0 <LED_Off+0x1c>
    27ac:	1b 82       	std	Y+3, r1	; 0x03
    27ae:	0b c0       	rjmp	.+22     	; 0x27c6 <LED_Off+0x32>
	return GPIO_writePin(_led->port, _led->pin, LOW);
    27b0:	e9 81       	ldd	r30, Y+1	; 0x01
    27b2:	fa 81       	ldd	r31, Y+2	; 0x02
    27b4:	80 81       	ld	r24, Z
    27b6:	e9 81       	ldd	r30, Y+1	; 0x01
    27b8:	fa 81       	ldd	r31, Y+2	; 0x02
    27ba:	91 81       	ldd	r25, Z+1	; 0x01
    27bc:	69 2f       	mov	r22, r25
    27be:	40 e0       	ldi	r20, 0x00	; 0
    27c0:	0e 94 29 10 	call	0x2052	; 0x2052 <GPIO_writePin>
    27c4:	8b 83       	std	Y+3, r24	; 0x03
    27c6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    27c8:	0f 90       	pop	r0
    27ca:	0f 90       	pop	r0
    27cc:	0f 90       	pop	r0
    27ce:	cf 91       	pop	r28
    27d0:	df 91       	pop	r29
    27d2:	08 95       	ret

000027d4 <LED_Toggle>:

LED_STATE LED_Toggle(st_Led* _led)
{
    27d4:	df 93       	push	r29
    27d6:	cf 93       	push	r28
    27d8:	00 d0       	rcall	.+0      	; 0x27da <LED_Toggle+0x6>
    27da:	0f 92       	push	r0
    27dc:	cd b7       	in	r28, 0x3d	; 61
    27de:	de b7       	in	r29, 0x3e	; 62
    27e0:	9a 83       	std	Y+2, r25	; 0x02
    27e2:	89 83       	std	Y+1, r24	; 0x01
	if(_led == NULL) return LED_FAILURE;
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	9a 81       	ldd	r25, Y+2	; 0x02
    27e8:	00 97       	sbiw	r24, 0x00	; 0
    27ea:	11 f4       	brne	.+4      	; 0x27f0 <LED_Toggle+0x1c>
    27ec:	1b 82       	std	Y+3, r1	; 0x03
    27ee:	0a c0       	rjmp	.+20     	; 0x2804 <LED_Toggle+0x30>
	return GPIO_PinToggle(_led->port, _led->pin);
    27f0:	e9 81       	ldd	r30, Y+1	; 0x01
    27f2:	fa 81       	ldd	r31, Y+2	; 0x02
    27f4:	80 81       	ld	r24, Z
    27f6:	e9 81       	ldd	r30, Y+1	; 0x01
    27f8:	fa 81       	ldd	r31, Y+2	; 0x02
    27fa:	91 81       	ldd	r25, Z+1	; 0x01
    27fc:	69 2f       	mov	r22, r25
    27fe:	0e 94 bc 11 	call	0x2378	; 0x2378 <GPIO_PinToggle>
    2802:	8b 83       	std	Y+3, r24	; 0x03
    2804:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	0f 90       	pop	r0
    280c:	cf 91       	pop	r28
    280e:	df 91       	pop	r29
    2810:	08 95       	ret

00002812 <BUTTON_Init>:

[DESCRIPTION]  :	Source file for the Button driver.
------------------------------------------------------------------------------------------*/
# include"Button.h"
BUTTON_STATE BUTTON_Init(st_Button* _button)
{
    2812:	df 93       	push	r29
    2814:	cf 93       	push	r28
    2816:	00 d0       	rcall	.+0      	; 0x2818 <BUTTON_Init+0x6>
    2818:	0f 92       	push	r0
    281a:	cd b7       	in	r28, 0x3d	; 61
    281c:	de b7       	in	r29, 0x3e	; 62
    281e:	9a 83       	std	Y+2, r25	; 0x02
    2820:	89 83       	std	Y+1, r24	; 0x01
	if(_button == NULL) return BUTTON_FAILURE;
    2822:	89 81       	ldd	r24, Y+1	; 0x01
    2824:	9a 81       	ldd	r25, Y+2	; 0x02
    2826:	00 97       	sbiw	r24, 0x00	; 0
    2828:	11 f4       	brne	.+4      	; 0x282e <BUTTON_Init+0x1c>
    282a:	1b 82       	std	Y+3, r1	; 0x03
    282c:	0b c0       	rjmp	.+22     	; 0x2844 <BUTTON_Init+0x32>
	return GPIO_setupPinDirection(_button->port, _button->pin, PIN_OUTPUT);
    282e:	e9 81       	ldd	r30, Y+1	; 0x01
    2830:	fa 81       	ldd	r31, Y+2	; 0x02
    2832:	80 81       	ld	r24, Z
    2834:	e9 81       	ldd	r30, Y+1	; 0x01
    2836:	fa 81       	ldd	r31, Y+2	; 0x02
    2838:	91 81       	ldd	r25, Z+1	; 0x01
    283a:	69 2f       	mov	r22, r25
    283c:	41 e0       	ldi	r20, 0x01	; 1
    283e:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <GPIO_setupPinDirection>
    2842:	8b 83       	std	Y+3, r24	; 0x03
    2844:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2846:	0f 90       	pop	r0
    2848:	0f 90       	pop	r0
    284a:	0f 90       	pop	r0
    284c:	cf 91       	pop	r28
    284e:	df 91       	pop	r29
    2850:	08 95       	ret

00002852 <BUTTON_Init_p>:
BUTTON_STATE BUTTON_Init_p(st_Button* _button)
{
    2852:	df 93       	push	r29
    2854:	cf 93       	push	r28
    2856:	00 d0       	rcall	.+0      	; 0x2858 <BUTTON_Init_p+0x6>
    2858:	0f 92       	push	r0
    285a:	cd b7       	in	r28, 0x3d	; 61
    285c:	de b7       	in	r29, 0x3e	; 62
    285e:	9a 83       	std	Y+2, r25	; 0x02
    2860:	89 83       	std	Y+1, r24	; 0x01
	if(_button == NULL)
    2862:	89 81       	ldd	r24, Y+1	; 0x01
    2864:	9a 81       	ldd	r25, Y+2	; 0x02
    2866:	00 97       	sbiw	r24, 0x00	; 0
    2868:	11 f4       	brne	.+4      	; 0x286e <BUTTON_Init_p+0x1c>
		return BUTTON_FAILURE;
    286a:	1b 82       	std	Y+3, r1	; 0x03
    286c:	0b c0       	rjmp	.+22     	; 0x2884 <BUTTON_Init_p+0x32>

	return GPIO_setupPinDirection(_button->port, _button->pin, PIN_INPUT);
    286e:	e9 81       	ldd	r30, Y+1	; 0x01
    2870:	fa 81       	ldd	r31, Y+2	; 0x02
    2872:	80 81       	ld	r24, Z
    2874:	e9 81       	ldd	r30, Y+1	; 0x01
    2876:	fa 81       	ldd	r31, Y+2	; 0x02
    2878:	91 81       	ldd	r25, Z+1	; 0x01
    287a:	69 2f       	mov	r22, r25
    287c:	40 e0       	ldi	r20, 0x00	; 0
    287e:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <GPIO_setupPinDirection>
    2882:	8b 83       	std	Y+3, r24	; 0x03
    2884:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2886:	0f 90       	pop	r0
    2888:	0f 90       	pop	r0
    288a:	0f 90       	pop	r0
    288c:	cf 91       	pop	r28
    288e:	df 91       	pop	r29
    2890:	08 95       	ret

00002892 <BUTTON_State>:
BUTTON_STATE BUTTON_State(st_Button* _button){
    2892:	df 93       	push	r29
    2894:	cf 93       	push	r28
    2896:	00 d0       	rcall	.+0      	; 0x2898 <BUTTON_State+0x6>
    2898:	0f 92       	push	r0
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62
    289e:	9a 83       	std	Y+2, r25	; 0x02
    28a0:	89 83       	std	Y+1, r24	; 0x01
	/*
	* Depending on the button setup, a pressed button
	* can be logic high or logic low
	**/

	if(_button == NULL)
    28a2:	89 81       	ldd	r24, Y+1	; 0x01
    28a4:	9a 81       	ldd	r25, Y+2	; 0x02
    28a6:	00 97       	sbiw	r24, 0x00	; 0
    28a8:	11 f4       	brne	.+4      	; 0x28ae <BUTTON_State+0x1c>
		return BUTTON_FAILURE;
    28aa:	1b 82       	std	Y+3, r1	; 0x03
    28ac:	25 c0       	rjmp	.+74     	; 0x28f8 <BUTTON_State+0x66>

	// read the button pin

	// if the button is pulled low, then a push should pull it high and vice versa
	if(		(((GPIO_readPin(_button->port, _button->pin)) == HIGH) && (_button->setup == BUTTON_SETUP_LOW))
    28ae:	e9 81       	ldd	r30, Y+1	; 0x01
    28b0:	fa 81       	ldd	r31, Y+2	; 0x02
    28b2:	80 81       	ld	r24, Z
    28b4:	e9 81       	ldd	r30, Y+1	; 0x01
    28b6:	fa 81       	ldd	r31, Y+2	; 0x02
    28b8:	91 81       	ldd	r25, Z+1	; 0x01
    28ba:	69 2f       	mov	r22, r25
    28bc:	0e 94 1b 11 	call	0x2236	; 0x2236 <GPIO_readPin>
    28c0:	81 30       	cpi	r24, 0x01	; 1
    28c2:	29 f4       	brne	.+10     	; 0x28ce <BUTTON_State+0x3c>
    28c4:	e9 81       	ldd	r30, Y+1	; 0x01
    28c6:	fa 81       	ldd	r31, Y+2	; 0x02
    28c8:	82 81       	ldd	r24, Z+2	; 0x02
    28ca:	81 30       	cpi	r24, 0x01	; 1
    28cc:	81 f0       	breq	.+32     	; 0x28ee <BUTTON_State+0x5c>
    28ce:	e9 81       	ldd	r30, Y+1	; 0x01
    28d0:	fa 81       	ldd	r31, Y+2	; 0x02
    28d2:	80 81       	ld	r24, Z
    28d4:	e9 81       	ldd	r30, Y+1	; 0x01
    28d6:	fa 81       	ldd	r31, Y+2	; 0x02
    28d8:	91 81       	ldd	r25, Z+1	; 0x01
    28da:	69 2f       	mov	r22, r25
    28dc:	0e 94 1b 11 	call	0x2236	; 0x2236 <GPIO_readPin>
    28e0:	88 23       	and	r24, r24
    28e2:	41 f4       	brne	.+16     	; 0x28f4 <BUTTON_State+0x62>
    28e4:	e9 81       	ldd	r30, Y+1	; 0x01
    28e6:	fa 81       	ldd	r31, Y+2	; 0x02
    28e8:	82 81       	ldd	r24, Z+2	; 0x02
    28ea:	88 23       	and	r24, r24
    28ec:	19 f4       	brne	.+6      	; 0x28f4 <BUTTON_State+0x62>
		||	(((GPIO_readPin(_button->port, _button->pin)) == LOW)  && (_button->setup == BUTTON_SETUP_HIGH)))
		return BUTTON_PRESSED;
    28ee:	83 e0       	ldi	r24, 0x03	; 3
    28f0:	8b 83       	std	Y+3, r24	; 0x03
    28f2:	02 c0       	rjmp	.+4      	; 0x28f8 <BUTTON_State+0x66>
	else
		return BUTTON_UNPRESSED;
    28f4:	84 e0       	ldi	r24, 0x04	; 4
    28f6:	8b 83       	std	Y+3, r24	; 0x03
    28f8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    28fa:	0f 90       	pop	r0
    28fc:	0f 90       	pop	r0
    28fe:	0f 90       	pop	r0
    2900:	cf 91       	pop	r28
    2902:	df 91       	pop	r29
    2904:	08 95       	ret

00002906 <APP_init>:
uint8 normalmode = 1; //1 normal 0 pedestrian
uint8 carLED=0;    //0 green 1 yellow 2 red
uint8 prevcarLED=1;


void APP_init(void){
    2906:	df 93       	push	r29
    2908:	cf 93       	push	r28
    290a:	cd b7       	in	r28, 0x3d	; 61
    290c:	de b7       	in	r29, 0x3e	; 62
	//Car LED initialization
	LED_Init(&carGreen);
    290e:	83 eb       	ldi	r24, 0xB3	; 179
    2910:	91 e0       	ldi	r25, 0x01	; 1
    2912:	0e 94 8a 13 	call	0x2714	; 0x2714 <LED_Init>
	LED_Init(&carYellow);
    2916:	88 e9       	ldi	r24, 0x98	; 152
    2918:	91 e0       	ldi	r25, 0x01	; 1
    291a:	0e 94 8a 13 	call	0x2714	; 0x2714 <LED_Init>
	LED_Init(&carRed);
    291e:	8a e9       	ldi	r24, 0x9A	; 154
    2920:	91 e0       	ldi	r25, 0x01	; 1
    2922:	0e 94 8a 13 	call	0x2714	; 0x2714 <LED_Init>

	//Pedestrian LED initialization
	LED_Init(&pedGreen);
    2926:	8c e9       	ldi	r24, 0x9C	; 156
    2928:	91 e0       	ldi	r25, 0x01	; 1
    292a:	0e 94 8a 13 	call	0x2714	; 0x2714 <LED_Init>
	LED_Init(&pedYellow);
    292e:	8e e9       	ldi	r24, 0x9E	; 158
    2930:	91 e0       	ldi	r25, 0x01	; 1
    2932:	0e 94 8a 13 	call	0x2714	; 0x2714 <LED_Init>
	LED_Init(&pedRed);
    2936:	80 ea       	ldi	r24, 0xA0	; 160
    2938:	91 e0       	ldi	r25, 0x01	; 1
    293a:	0e 94 8a 13 	call	0x2714	; 0x2714 <LED_Init>

	//Button initialization
	BUTTON_Init(&button);
    293e:	82 ea       	ldi	r24, 0xA2	; 162
    2940:	91 e0       	ldi	r25, 0x01	; 1
    2942:	0e 94 09 14 	call	0x2812	; 0x2812 <BUTTON_Init>
	//Timer initialization
	Timer1_Init(WGM0_NORMAL, COM0_DISCONNECTED, 0);
    2946:	80 e0       	ldi	r24, 0x00	; 0
    2948:	60 e0       	ldi	r22, 0x00	; 0
    294a:	40 e0       	ldi	r20, 0x00	; 0
    294c:	0e 94 18 0c 	call	0x1830	; 0x1830 <Timer1_Init>

	//Enable Global interrupts & setup rising edge detection for button
	INT_ENABLE_ALL();
    2950:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <INT_ENABLE_ALL>
	INT0_Init(ISC0_RISING_EDGE);
    2954:	83 e0       	ldi	r24, 0x03	; 3
    2956:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <INT0_Init>

}
    295a:	cf 91       	pop	r28
    295c:	df 91       	pop	r29
    295e:	08 95       	ret

00002960 <Blink>:


/* each blink is hard coded for 500ms for the blinking purpose. _seconds is
 the number of seconds to blink.*/
void Blink(st_Led* _led1, st_Led* _led2, uint8 _seconds)
{
    2960:	df 93       	push	r29
    2962:	cf 93       	push	r28
    2964:	cd b7       	in	r28, 0x3d	; 61
    2966:	de b7       	in	r29, 0x3e	; 62
    2968:	27 97       	sbiw	r28, 0x07	; 7
    296a:	0f b6       	in	r0, 0x3f	; 63
    296c:	f8 94       	cli
    296e:	de bf       	out	0x3e, r29	; 62
    2970:	0f be       	out	0x3f, r0	; 63
    2972:	cd bf       	out	0x3d, r28	; 61
    2974:	9c 83       	std	Y+4, r25	; 0x04
    2976:	8b 83       	std	Y+3, r24	; 0x03
    2978:	7e 83       	std	Y+6, r23	; 0x06
    297a:	6d 83       	std	Y+5, r22	; 0x05
    297c:	4f 83       	std	Y+7, r20	; 0x07
	Timer1_Init(WGM1_CTC, COM1_DISCONNECTED, 0);
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	60 e0       	ldi	r22, 0x00	; 0
    2982:	40 e0       	ldi	r20, 0x00	; 0
    2984:	0e 94 18 0c 	call	0x1830	; 0x1830 <Timer1_Init>

	for(int i = 0; i < _seconds * 2; i++){
    2988:	1a 82       	std	Y+2, r1	; 0x02
    298a:	19 82       	std	Y+1, r1	; 0x01
    298c:	22 c0       	rjmp	.+68     	; 0x29d2 <Blink+0x72>
		LED_Toggle(_led1);   /* the two leds will blink at the same time*/
    298e:	8b 81       	ldd	r24, Y+3	; 0x03
    2990:	9c 81       	ldd	r25, Y+4	; 0x04
    2992:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <LED_Toggle>
		LED_Toggle(_led2);
    2996:	8d 81       	ldd	r24, Y+5	; 0x05
    2998:	9e 81       	ldd	r25, Y+6	; 0x06
    299a:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <LED_Toggle>
		Timer1_Start(CS1_8, 62500);	// 500ms
    299e:	82 e0       	ldi	r24, 0x02	; 2
    29a0:	64 e2       	ldi	r22, 0x24	; 36
    29a2:	74 ef       	ldi	r23, 0xF4	; 244
    29a4:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <Timer1_Start>

		while(!BIT_IS_SET(TIFR, OCF1A));
    29a8:	e8 e5       	ldi	r30, 0x58	; 88
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	80 81       	ld	r24, Z
    29ae:	88 2f       	mov	r24, r24
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	80 71       	andi	r24, 0x10	; 16
    29b4:	90 70       	andi	r25, 0x00	; 0
    29b6:	00 97       	sbiw	r24, 0x00	; 0
    29b8:	b9 f3       	breq	.-18     	; 0x29a8 <Blink+0x48>

		SET_BIT(TIFR, OCF1A);		// clear the flag
    29ba:	a8 e5       	ldi	r26, 0x58	; 88
    29bc:	b0 e0       	ldi	r27, 0x00	; 0
    29be:	e8 e5       	ldi	r30, 0x58	; 88
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	80 81       	ld	r24, Z
    29c4:	80 61       	ori	r24, 0x10	; 16
    29c6:	8c 93       	st	X, r24
 the number of seconds to blink.*/
void Blink(st_Led* _led1, st_Led* _led2, uint8 _seconds)
{
	Timer1_Init(WGM1_CTC, COM1_DISCONNECTED, 0);

	for(int i = 0; i < _seconds * 2; i++){
    29c8:	89 81       	ldd	r24, Y+1	; 0x01
    29ca:	9a 81       	ldd	r25, Y+2	; 0x02
    29cc:	01 96       	adiw	r24, 0x01	; 1
    29ce:	9a 83       	std	Y+2, r25	; 0x02
    29d0:	89 83       	std	Y+1, r24	; 0x01
    29d2:	8f 81       	ldd	r24, Y+7	; 0x07
    29d4:	88 2f       	mov	r24, r24
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	9c 01       	movw	r18, r24
    29da:	22 0f       	add	r18, r18
    29dc:	33 1f       	adc	r19, r19
    29de:	89 81       	ldd	r24, Y+1	; 0x01
    29e0:	9a 81       	ldd	r25, Y+2	; 0x02
    29e2:	82 17       	cp	r24, r18
    29e4:	93 07       	cpc	r25, r19
    29e6:	9c f2       	brlt	.-90     	; 0x298e <Blink+0x2e>
		while(!BIT_IS_SET(TIFR, OCF1A));

		SET_BIT(TIFR, OCF1A);		// clear the flag
	}

	Timer1_Stop();
    29e8:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <Timer1_Stop>
}
    29ec:	27 96       	adiw	r28, 0x07	; 7
    29ee:	0f b6       	in	r0, 0x3f	; 63
    29f0:	f8 94       	cli
    29f2:	de bf       	out	0x3e, r29	; 62
    29f4:	0f be       	out	0x3f, r0	; 63
    29f6:	cd bf       	out	0x3d, r28	; 61
    29f8:	cf 91       	pop	r28
    29fa:	df 91       	pop	r29
    29fc:	08 95       	ret

000029fe <APP_start>:


void APP_start(void){
    29fe:	df 93       	push	r29
    2a00:	cf 93       	push	r28
    2a02:	00 d0       	rcall	.+0      	; 0x2a04 <APP_start+0x6>
    2a04:	0f 92       	push	r0
    2a06:	cd b7       	in	r28, 0x3d	; 61
    2a08:	de b7       	in	r29, 0x3e	; 62
	uint8 i;

	//if normal mode or need transition (i.e. car green led or yellow is on)
	if(normalmode || carLED==0 || carLED==1){
    2a0a:	80 91 a5 01 	lds	r24, 0x01A5
    2a0e:	88 23       	and	r24, r24
    2a10:	49 f4       	brne	.+18     	; 0x2a24 <APP_start+0x26>
    2a12:	80 91 b5 01 	lds	r24, 0x01B5
    2a16:	88 23       	and	r24, r24
    2a18:	29 f0       	breq	.+10     	; 0x2a24 <APP_start+0x26>
    2a1a:	80 91 b5 01 	lds	r24, 0x01B5
    2a1e:	81 30       	cpi	r24, 0x01	; 1
    2a20:	09 f0       	breq	.+2      	; 0x2a24 <APP_start+0x26>
    2a22:	c7 c0       	rjmp	.+398    	; 0x2bb2 <APP_start+0x1b4>
		if(!normalmode){
    2a24:	80 91 a5 01 	lds	r24, 0x01A5
    2a28:	88 23       	and	r24, r24
    2a2a:	19 f4       	brne	.+6      	; 0x2a32 <APP_start+0x34>
			carLED=1;
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
    2a2e:	80 93 b5 01 	sts	0x01B5, r24
		}
		//Configuring Pedestrian LEDs
		LED_Off(&pedGreen);
    2a32:	8c e9       	ldi	r24, 0x9C	; 156
    2a34:	91 e0       	ldi	r25, 0x01	; 1
    2a36:	0e 94 ca 13 	call	0x2794	; 0x2794 <LED_Off>
		LED_Off(&pedYellow);
    2a3a:	8e e9       	ldi	r24, 0x9E	; 158
    2a3c:	91 e0       	ldi	r25, 0x01	; 1
    2a3e:	0e 94 ca 13 	call	0x2794	; 0x2794 <LED_Off>

		switch(carLED){
    2a42:	80 91 b5 01 	lds	r24, 0x01B5
    2a46:	28 2f       	mov	r18, r24
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	3b 83       	std	Y+3, r19	; 0x03
    2a4c:	2a 83       	std	Y+2, r18	; 0x02
    2a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a50:	9b 81       	ldd	r25, Y+3	; 0x03
    2a52:	81 30       	cpi	r24, 0x01	; 1
    2a54:	91 05       	cpc	r25, r1
    2a56:	71 f1       	breq	.+92     	; 0x2ab4 <APP_start+0xb6>
    2a58:	2a 81       	ldd	r18, Y+2	; 0x02
    2a5a:	3b 81       	ldd	r19, Y+3	; 0x03
    2a5c:	22 30       	cpi	r18, 0x02	; 2
    2a5e:	31 05       	cpc	r19, r1
    2a60:	09 f4       	brne	.+2      	; 0x2a64 <APP_start+0x66>
    2a62:	7c c0       	rjmp	.+248    	; 0x2b5c <APP_start+0x15e>
    2a64:	8a 81       	ldd	r24, Y+2	; 0x02
    2a66:	9b 81       	ldd	r25, Y+3	; 0x03
    2a68:	00 97       	sbiw	r24, 0x00	; 0
    2a6a:	09 f0       	breq	.+2      	; 0x2a6e <APP_start+0x70>
    2a6c:	9b c0       	rjmp	.+310    	; 0x2ba4 <APP_start+0x1a6>
		//Case GREEN LED
		case 0:
			LED_On(&carGreen);
    2a6e:	83 eb       	ldi	r24, 0xB3	; 179
    2a70:	91 e0       	ldi	r25, 0x01	; 1
    2a72:	0e 94 aa 13 	call	0x2754	; 0x2754 <LED_On>
			LED_Off(&carYellow);
    2a76:	88 e9       	ldi	r24, 0x98	; 152
    2a78:	91 e0       	ldi	r25, 0x01	; 1
    2a7a:	0e 94 ca 13 	call	0x2794	; 0x2794 <LED_Off>
			LED_Off(&carRed);
    2a7e:	8a e9       	ldi	r24, 0x9A	; 154
    2a80:	91 e0       	ldi	r25, 0x01	; 1
    2a82:	0e 94 ca 13 	call	0x2794	; 0x2794 <LED_Off>

			for(i=0;i<1;i++){
    2a86:	19 82       	std	Y+1, r1	; 0x01
    2a88:	0c c0       	rjmp	.+24     	; 0x2aa2 <APP_start+0xa4>
				Timer0_Sleep(SEC(5), CS0_1024); // delay for 1 seconds
    2a8a:	88 e8       	ldi	r24, 0x88	; 136
    2a8c:	93 e1       	ldi	r25, 0x13	; 19
    2a8e:	65 e0       	ldi	r22, 0x05	; 5
    2a90:	0e 94 c8 09 	call	0x1390	; 0x1390 <Timer0_Sleep>
				if(!normalmode)break;          //check if ISR was called
    2a94:	80 91 a5 01 	lds	r24, 0x01A5
    2a98:	88 23       	and	r24, r24
    2a9a:	31 f0       	breq	.+12     	; 0x2aa8 <APP_start+0xaa>
		case 0:
			LED_On(&carGreen);
			LED_Off(&carYellow);
			LED_Off(&carRed);

			for(i=0;i<1;i++){
    2a9c:	89 81       	ldd	r24, Y+1	; 0x01
    2a9e:	8f 5f       	subi	r24, 0xFF	; 255
    2aa0:	89 83       	std	Y+1, r24	; 0x01
    2aa2:	89 81       	ldd	r24, Y+1	; 0x01
    2aa4:	88 23       	and	r24, r24
    2aa6:	89 f3       	breq	.-30     	; 0x2a8a <APP_start+0x8c>
				Timer0_Sleep(SEC(5), CS0_1024); // delay for 1 seconds
				if(!normalmode)break;          //check if ISR was called
			}
			carLED=1;
    2aa8:	81 e0       	ldi	r24, 0x01	; 1
    2aaa:	80 93 b5 01 	sts	0x01B5, r24
			prevcarLED=0;
    2aae:	10 92 a6 01 	sts	0x01A6, r1
    2ab2:	bc c0       	rjmp	.+376    	; 0x2c2c <APP_start+0x22e>
			break;
			//Case YELLOW LED
		case 1:
			//if not normalmode then we need to blink both

			if(!normalmode){
    2ab4:	80 91 a5 01 	lds	r24, 0x01A5
    2ab8:	88 23       	and	r24, r24
    2aba:	d9 f4       	brne	.+54     	; 0x2af2 <APP_start+0xf4>
				if(prevcarLED!=2){
    2abc:	80 91 a6 01 	lds	r24, 0x01A6
    2ac0:	82 30       	cpi	r24, 0x02	; 2
    2ac2:	61 f0       	breq	.+24     	; 0x2adc <APP_start+0xde>
					LED_On(&pedRed);
    2ac4:	80 ea       	ldi	r24, 0xA0	; 160
    2ac6:	91 e0       	ldi	r25, 0x01	; 1
    2ac8:	0e 94 aa 13 	call	0x2754	; 0x2754 <LED_On>
					//blink both yellow leds
					Blink(&carYellow, &pedYellow, 5);
    2acc:	88 e9       	ldi	r24, 0x98	; 152
    2ace:	91 e0       	ldi	r25, 0x01	; 1
    2ad0:	2e e9       	ldi	r18, 0x9E	; 158
    2ad2:	31 e0       	ldi	r19, 0x01	; 1
    2ad4:	b9 01       	movw	r22, r18
    2ad6:	45 e0       	ldi	r20, 0x05	; 5
    2ad8:	0e 94 b0 14 	call	0x2960	; 0x2960 <Blink>
				}
				prevcarLED=1;//to go to Ped lights logic
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	80 93 a6 01 	sts	0x01A6, r24
				carLED=2;
    2ae2:	82 e0       	ldi	r24, 0x02	; 2
    2ae4:	80 93 b5 01 	sts	0x01B5, r24
				LED_On(&carRed);
    2ae8:	8a e9       	ldi	r24, 0x9A	; 154
    2aea:	91 e0       	ldi	r25, 0x01	; 1
    2aec:	0e 94 aa 13 	call	0x2754	; 0x2754 <LED_On>
    2af0:	17 c0       	rjmp	.+46     	; 0x2b20 <APP_start+0x122>
			}else{
				//blink car yellow led
				for(i=0;i<1;i++){
    2af2:	19 82       	std	Y+1, r1	; 0x01
    2af4:	12 c0       	rjmp	.+36     	; 0x2b1a <APP_start+0x11c>
					Blink(&carYellow, NULL,  5);	// blinks for 5 seconds. BLOCKS
    2af6:	88 e9       	ldi	r24, 0x98	; 152
    2af8:	91 e0       	ldi	r25, 0x01	; 1
    2afa:	60 e0       	ldi	r22, 0x00	; 0
    2afc:	70 e0       	ldi	r23, 0x00	; 0
    2afe:	45 e0       	ldi	r20, 0x05	; 5
    2b00:	0e 94 b0 14 	call	0x2960	; 0x2960 <Blink>
					if(!normalmode){//check if ISR was called
    2b04:	80 91 a5 01 	lds	r24, 0x01A5
    2b08:	88 23       	and	r24, r24
    2b0a:	21 f4       	brne	.+8      	; 0x2b14 <APP_start+0x116>
						prevcarLED=1;
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	80 93 a6 01 	sts	0x01A6, r24
    2b12:	06 c0       	rjmp	.+12     	; 0x2b20 <APP_start+0x122>
				prevcarLED=1;//to go to Ped lights logic
				carLED=2;
				LED_On(&carRed);
			}else{
				//blink car yellow led
				for(i=0;i<1;i++){
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
    2b16:	8f 5f       	subi	r24, 0xFF	; 255
    2b18:	89 83       	std	Y+1, r24	; 0x01
    2b1a:	89 81       	ldd	r24, Y+1	; 0x01
    2b1c:	88 23       	and	r24, r24
    2b1e:	59 f3       	breq	.-42     	; 0x2af6 <APP_start+0xf8>
						prevcarLED=1;
						break;
					}
				}
			}
			LED_Off(&carYellow);
    2b20:	88 e9       	ldi	r24, 0x98	; 152
    2b22:	91 e0       	ldi	r25, 0x01	; 1
    2b24:	0e 94 ca 13 	call	0x2794	; 0x2794 <LED_Off>
			LED_Off(&pedYellow);
    2b28:	8e e9       	ldi	r24, 0x9E	; 158
    2b2a:	91 e0       	ldi	r25, 0x01	; 1
    2b2c:	0e 94 ca 13 	call	0x2794	; 0x2794 <LED_Off>
			//Configure variables for correct switching
			if(prevcarLED==0){
    2b30:	80 91 a6 01 	lds	r24, 0x01A6
    2b34:	88 23       	and	r24, r24
    2b36:	39 f4       	brne	.+14     	; 0x2b46 <APP_start+0x148>
				carLED=2;
    2b38:	82 e0       	ldi	r24, 0x02	; 2
    2b3a:	80 93 b5 01 	sts	0x01B5, r24
				prevcarLED=1;
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	80 93 a6 01 	sts	0x01A6, r24
    2b44:	73 c0       	rjmp	.+230    	; 0x2c2c <APP_start+0x22e>
			}else if(prevcarLED==2){
    2b46:	80 91 a6 01 	lds	r24, 0x01A6
    2b4a:	82 30       	cpi	r24, 0x02	; 2
    2b4c:	09 f0       	breq	.+2      	; 0x2b50 <APP_start+0x152>
    2b4e:	6e c0       	rjmp	.+220    	; 0x2c2c <APP_start+0x22e>
				carLED=0;
    2b50:	10 92 b5 01 	sts	0x01B5, r1
				prevcarLED=1;
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	80 93 a6 01 	sts	0x01A6, r24
    2b5a:	68 c0       	rjmp	.+208    	; 0x2c2c <APP_start+0x22e>
			}
			break;
			//Case RED LED
		case 2:
			LED_Off(&carGreen);
    2b5c:	83 eb       	ldi	r24, 0xB3	; 179
    2b5e:	91 e0       	ldi	r25, 0x01	; 1
    2b60:	0e 94 ca 13 	call	0x2794	; 0x2794 <LED_Off>
			LED_Off(&carYellow);
    2b64:	88 e9       	ldi	r24, 0x98	; 152
    2b66:	91 e0       	ldi	r25, 0x01	; 1
    2b68:	0e 94 ca 13 	call	0x2794	; 0x2794 <LED_Off>
			LED_On(&carRed);
    2b6c:	8a e9       	ldi	r24, 0x9A	; 154
    2b6e:	91 e0       	ldi	r25, 0x01	; 1
    2b70:	0e 94 aa 13 	call	0x2754	; 0x2754 <LED_On>
			for(i=0;i<1;i++){
    2b74:	19 82       	std	Y+1, r1	; 0x01
    2b76:	0c c0       	rjmp	.+24     	; 0x2b90 <APP_start+0x192>
				Timer0_Sleep(SEC(5), CS0_1024); // delay for 1 seconds
    2b78:	88 e8       	ldi	r24, 0x88	; 136
    2b7a:	93 e1       	ldi	r25, 0x13	; 19
    2b7c:	65 e0       	ldi	r22, 0x05	; 5
    2b7e:	0e 94 c8 09 	call	0x1390	; 0x1390 <Timer0_Sleep>
				if(!normalmode)break;          //check if ISR was called
    2b82:	80 91 a5 01 	lds	r24, 0x01A5
    2b86:	88 23       	and	r24, r24
    2b88:	31 f0       	breq	.+12     	; 0x2b96 <APP_start+0x198>
			//Case RED LED
		case 2:
			LED_Off(&carGreen);
			LED_Off(&carYellow);
			LED_On(&carRed);
			for(i=0;i<1;i++){
    2b8a:	89 81       	ldd	r24, Y+1	; 0x01
    2b8c:	8f 5f       	subi	r24, 0xFF	; 255
    2b8e:	89 83       	std	Y+1, r24	; 0x01
    2b90:	89 81       	ldd	r24, Y+1	; 0x01
    2b92:	88 23       	and	r24, r24
    2b94:	89 f3       	breq	.-30     	; 0x2b78 <APP_start+0x17a>
				Timer0_Sleep(SEC(5), CS0_1024); // delay for 1 seconds
				if(!normalmode)break;          //check if ISR was called
			}
			prevcarLED=2;
    2b96:	82 e0       	ldi	r24, 0x02	; 2
    2b98:	80 93 a6 01 	sts	0x01A6, r24
			carLED=1;
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	80 93 b5 01 	sts	0x01B5, r24
    2ba2:	44 c0       	rjmp	.+136    	; 0x2c2c <APP_start+0x22e>
			break;
		default:
			carLED=2;
    2ba4:	82 e0       	ldi	r24, 0x02	; 2
    2ba6:	80 93 b5 01 	sts	0x01B5, r24
			prevcarLED=1;
    2baa:	81 e0       	ldi	r24, 0x01	; 1
    2bac:	80 93 a6 01 	sts	0x01A6, r24
    2bb0:	3d c0       	rjmp	.+122    	; 0x2c2c <APP_start+0x22e>
			break;
		}
	}else{
		//Configure PED LEDs
		LED_On(&pedGreen);
    2bb2:	8c e9       	ldi	r24, 0x9C	; 156
    2bb4:	91 e0       	ldi	r25, 0x01	; 1
    2bb6:	0e 94 aa 13 	call	0x2754	; 0x2754 <LED_On>
		LED_Off(&pedYellow);
    2bba:	8e e9       	ldi	r24, 0x9E	; 158
    2bbc:	91 e0       	ldi	r25, 0x01	; 1
    2bbe:	0e 94 ca 13 	call	0x2794	; 0x2794 <LED_Off>
		LED_Off(&pedRed);
    2bc2:	80 ea       	ldi	r24, 0xA0	; 160
    2bc4:	91 e0       	ldi	r25, 0x01	; 1
    2bc6:	0e 94 ca 13 	call	0x2794	; 0x2794 <LED_Off>

		//Configure CAR LEDs
		LED_Off(&carGreen);
    2bca:	83 eb       	ldi	r24, 0xB3	; 179
    2bcc:	91 e0       	ldi	r25, 0x01	; 1
    2bce:	0e 94 ca 13 	call	0x2794	; 0x2794 <LED_Off>
		LED_Off(&carYellow);
    2bd2:	88 e9       	ldi	r24, 0x98	; 152
    2bd4:	91 e0       	ldi	r25, 0x01	; 1
    2bd6:	0e 94 ca 13 	call	0x2794	; 0x2794 <LED_Off>
		LED_On(&carRed);
    2bda:	8a e9       	ldi	r24, 0x9A	; 154
    2bdc:	91 e0       	ldi	r25, 0x01	; 1
    2bde:	0e 94 aa 13 	call	0x2754	; 0x2754 <LED_On>
		Timer0_Sleep(SEC(5), CS0_1024); // delay for 5 seconds
    2be2:	88 e8       	ldi	r24, 0x88	; 136
    2be4:	93 e1       	ldi	r25, 0x13	; 19
    2be6:	65 e0       	ldi	r22, 0x05	; 5
    2be8:	0e 94 c8 09 	call	0x1390	; 0x1390 <Timer0_Sleep>
		//make sure car red light is off
		LED_Off(&carRed);
    2bec:	8a e9       	ldi	r24, 0x9A	; 154
    2bee:	91 e0       	ldi	r25, 0x01	; 1
    2bf0:	0e 94 ca 13 	call	0x2794	; 0x2794 <LED_Off>

		//blink both yellow while ped green is on
		Blink(&carYellow, &pedYellow, 5);	// blinks for 5 seconds. BLOCKS
    2bf4:	88 e9       	ldi	r24, 0x98	; 152
    2bf6:	91 e0       	ldi	r25, 0x01	; 1
    2bf8:	2e e9       	ldi	r18, 0x9E	; 158
    2bfa:	31 e0       	ldi	r19, 0x01	; 1
    2bfc:	b9 01       	movw	r22, r18
    2bfe:	45 e0       	ldi	r20, 0x05	; 5
    2c00:	0e 94 b0 14 	call	0x2960	; 0x2960 <Blink>

		//Turn off yellow LEDs
		LED_Off(&carYellow);
    2c04:	88 e9       	ldi	r24, 0x98	; 152
    2c06:	91 e0       	ldi	r25, 0x01	; 1
    2c08:	0e 94 ca 13 	call	0x2794	; 0x2794 <LED_Off>
		LED_Off(&pedYellow);
    2c0c:	8e e9       	ldi	r24, 0x9E	; 158
    2c0e:	91 e0       	ldi	r25, 0x01	; 1
    2c10:	0e 94 ca 13 	call	0x2794	; 0x2794 <LED_Off>
		//turn on PED red LED
		LED_On(&pedRed);
    2c14:	80 ea       	ldi	r24, 0xA0	; 160
    2c16:	91 e0       	ldi	r25, 0x01	; 1
    2c18:	0e 94 aa 13 	call	0x2754	; 0x2754 <LED_On>
		//reset normalmode
		normalmode=1;
    2c1c:	81 e0       	ldi	r24, 0x01	; 1
    2c1e:	80 93 a5 01 	sts	0x01A5, r24
		//Configure carLED variables
		carLED=0;
    2c22:	10 92 b5 01 	sts	0x01B5, r1
		prevcarLED=1;
    2c26:	81 e0       	ldi	r24, 0x01	; 1
    2c28:	80 93 a6 01 	sts	0x01A6, r24
	}
}
    2c2c:	0f 90       	pop	r0
    2c2e:	0f 90       	pop	r0
    2c30:	0f 90       	pop	r0
    2c32:	cf 91       	pop	r28
    2c34:	df 91       	pop	r29
    2c36:	08 95       	ret

00002c38 <__vector_1>:

ISR(INT0_vect){
    2c38:	1f 92       	push	r1
    2c3a:	0f 92       	push	r0
    2c3c:	0f b6       	in	r0, 0x3f	; 63
    2c3e:	0f 92       	push	r0
    2c40:	11 24       	eor	r1, r1
    2c42:	df 93       	push	r29
    2c44:	cf 93       	push	r28
    2c46:	cd b7       	in	r28, 0x3d	; 61
    2c48:	de b7       	in	r29, 0x3e	; 62
	normalmode=0;
    2c4a:	10 92 a5 01 	sts	0x01A5, r1
}
    2c4e:	cf 91       	pop	r28
    2c50:	df 91       	pop	r29
    2c52:	0f 90       	pop	r0
    2c54:	0f be       	out	0x3f, r0	; 63
    2c56:	0f 90       	pop	r0
    2c58:	1f 90       	pop	r1
    2c5a:	18 95       	reti

00002c5c <test_button_init>:
/*******************************************************************************
 *                             TEST Functions                                  *
 *******************************************************************************/

BUTTON_STATE test_button_init()
{
    2c5c:	df 93       	push	r29
    2c5e:	cf 93       	push	r28
    2c60:	00 d0       	rcall	.+0      	; 0x2c62 <test_button_init+0x6>
    2c62:	0f 92       	push	r0
    2c64:	cd b7       	in	r28, 0x3d	; 61
    2c66:	de b7       	in	r29, 0x3e	; 62
	st_Button button={.port = PORTB_ID, .pin = PIN0_ID};
    2c68:	83 e0       	ldi	r24, 0x03	; 3
    2c6a:	fe 01       	movw	r30, r28
    2c6c:	31 96       	adiw	r30, 0x01	; 1
    2c6e:	df 01       	movw	r26, r30
    2c70:	98 2f       	mov	r25, r24
    2c72:	1d 92       	st	X+, r1
    2c74:	9a 95       	dec	r25
    2c76:	e9 f7       	brne	.-6      	; 0x2c72 <test_button_init+0x16>
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	89 83       	std	Y+1, r24	; 0x01
	return BUTTON_Init(&button);
    2c7c:	ce 01       	movw	r24, r28
    2c7e:	01 96       	adiw	r24, 0x01	; 1
    2c80:	0e 94 09 14 	call	0x2812	; 0x2812 <BUTTON_Init>
}
    2c84:	0f 90       	pop	r0
    2c86:	0f 90       	pop	r0
    2c88:	0f 90       	pop	r0
    2c8a:	cf 91       	pop	r28
    2c8c:	df 91       	pop	r29
    2c8e:	08 95       	ret

00002c90 <test_button_state>:

BUTTON_STATE test_button_state(en_BUTTON_SETUP _setup)
{
    2c90:	df 93       	push	r29
    2c92:	cf 93       	push	r28
    2c94:	00 d0       	rcall	.+0      	; 0x2c96 <test_button_state+0x6>
    2c96:	00 d0       	rcall	.+0      	; 0x2c98 <test_button_state+0x8>
    2c98:	00 d0       	rcall	.+0      	; 0x2c9a <test_button_state+0xa>
    2c9a:	cd b7       	in	r28, 0x3d	; 61
    2c9c:	de b7       	in	r29, 0x3e	; 62
    2c9e:	8d 83       	std	Y+5, r24	; 0x05
	
	st_Button button = {.port = PORTB_ID, .pin = PIN0_ID, .setup = _setup };
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	8a 83       	std	Y+2, r24	; 0x02
    2ca4:	1b 82       	std	Y+3, r1	; 0x03
    2ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca8:	8c 83       	std	Y+4, r24	; 0x04
	BUTTON_STATE state = BUTTON_SUCCESS;
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	89 83       	std	Y+1, r24	; 0x01
	
	state = BUTTON_Init_p(&button);
    2cae:	ce 01       	movw	r24, r28
    2cb0:	02 96       	adiw	r24, 0x02	; 2
    2cb2:	0e 94 29 14 	call	0x2852	; 0x2852 <BUTTON_Init_p>
    2cb6:	89 83       	std	Y+1, r24	; 0x01
	if(state == BUTTON_FAILURE)
    2cb8:	89 81       	ldd	r24, Y+1	; 0x01
    2cba:	88 23       	and	r24, r24
    2cbc:	11 f4       	brne	.+4      	; 0x2cc2 <test_button_state+0x32>
		return BUTTON_FAILURE;
    2cbe:	1e 82       	std	Y+6, r1	; 0x06
    2cc0:	05 c0       	rjmp	.+10     	; 0x2ccc <test_button_state+0x3c>
		
	return BUTTON_State(&button);
    2cc2:	ce 01       	movw	r24, r28
    2cc4:	02 96       	adiw	r24, 0x02	; 2
    2cc6:	0e 94 49 14 	call	0x2892	; 0x2892 <BUTTON_State>
    2cca:	8e 83       	std	Y+6, r24	; 0x06
    2ccc:	8e 81       	ldd	r24, Y+6	; 0x06

}
    2cce:	26 96       	adiw	r28, 0x06	; 6
    2cd0:	0f b6       	in	r0, 0x3f	; 63
    2cd2:	f8 94       	cli
    2cd4:	de bf       	out	0x3e, r29	; 62
    2cd6:	0f be       	out	0x3f, r0	; 63
    2cd8:	cd bf       	out	0x3d, r28	; 61
    2cda:	cf 91       	pop	r28
    2cdc:	df 91       	pop	r29
    2cde:	08 95       	ret

00002ce0 <test_led_init>:
/*******************************************************************************
 *                             TEST Functions                                  *
 *******************************************************************************/

LED_STATE test_led_init()
{
    2ce0:	df 93       	push	r29
    2ce2:	cf 93       	push	r28
    2ce4:	00 d0       	rcall	.+0      	; 0x2ce6 <test_led_init+0x6>
    2ce6:	cd b7       	in	r28, 0x3d	; 61
    2ce8:	de b7       	in	r29, 0x3e	; 62
	st_Led _led = { .port = PORTB_ID, .pin = PIN0_ID };
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	89 83       	std	Y+1, r24	; 0x01
    2cee:	1a 82       	std	Y+2, r1	; 0x02
	return LED_Init(&_led);
    2cf0:	ce 01       	movw	r24, r28
    2cf2:	01 96       	adiw	r24, 0x01	; 1
    2cf4:	0e 94 8a 13 	call	0x2714	; 0x2714 <LED_Init>
}
    2cf8:	0f 90       	pop	r0
    2cfa:	0f 90       	pop	r0
    2cfc:	cf 91       	pop	r28
    2cfe:	df 91       	pop	r29
    2d00:	08 95       	ret

00002d02 <test_led_on>:

LED_STATE test_led_on()
{
    2d02:	df 93       	push	r29
    2d04:	cf 93       	push	r28
    2d06:	00 d0       	rcall	.+0      	; 0x2d08 <test_led_on+0x6>
    2d08:	00 d0       	rcall	.+0      	; 0x2d0a <test_led_on+0x8>
    2d0a:	cd b7       	in	r28, 0x3d	; 61
    2d0c:	de b7       	in	r29, 0x3e	; 62
	st_Led _led = { .port = PORTB_ID, .pin = PIN0_ID };
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	8a 83       	std	Y+2, r24	; 0x02
    2d12:	1b 82       	std	Y+3, r1	; 0x03
	LED_STATE status = LED_SUCCESS;
    2d14:	81 e0       	ldi	r24, 0x01	; 1
    2d16:	89 83       	std	Y+1, r24	; 0x01
	
	status = LED_Init(&_led);
    2d18:	ce 01       	movw	r24, r28
    2d1a:	02 96       	adiw	r24, 0x02	; 2
    2d1c:	0e 94 8a 13 	call	0x2714	; 0x2714 <LED_Init>
    2d20:	89 83       	std	Y+1, r24	; 0x01
	if(status == LED_FAILURE)
    2d22:	89 81       	ldd	r24, Y+1	; 0x01
    2d24:	88 23       	and	r24, r24
    2d26:	11 f4       	brne	.+4      	; 0x2d2c <test_led_on+0x2a>
		return LED_FAILURE;
    2d28:	1c 82       	std	Y+4, r1	; 0x04
    2d2a:	05 c0       	rjmp	.+10     	; 0x2d36 <test_led_on+0x34>
		
	return LED_On(&_led);
    2d2c:	ce 01       	movw	r24, r28
    2d2e:	02 96       	adiw	r24, 0x02	; 2
    2d30:	0e 94 aa 13 	call	0x2754	; 0x2754 <LED_On>
    2d34:	8c 83       	std	Y+4, r24	; 0x04
    2d36:	8c 81       	ldd	r24, Y+4	; 0x04
	
}
    2d38:	0f 90       	pop	r0
    2d3a:	0f 90       	pop	r0
    2d3c:	0f 90       	pop	r0
    2d3e:	0f 90       	pop	r0
    2d40:	cf 91       	pop	r28
    2d42:	df 91       	pop	r29
    2d44:	08 95       	ret

00002d46 <test_led_off>:

LED_STATE test_led_off()
{
    2d46:	df 93       	push	r29
    2d48:	cf 93       	push	r28
    2d4a:	00 d0       	rcall	.+0      	; 0x2d4c <test_led_off+0x6>
    2d4c:	00 d0       	rcall	.+0      	; 0x2d4e <test_led_off+0x8>
    2d4e:	cd b7       	in	r28, 0x3d	; 61
    2d50:	de b7       	in	r29, 0x3e	; 62
	st_Led _led = { .port = PORTB_ID, .pin = PIN0_ID };
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	8a 83       	std	Y+2, r24	; 0x02
    2d56:	1b 82       	std	Y+3, r1	; 0x03
	LED_STATE status = LED_SUCCESS;
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	89 83       	std	Y+1, r24	; 0x01
	
	status = LED_Init(&_led);
    2d5c:	ce 01       	movw	r24, r28
    2d5e:	02 96       	adiw	r24, 0x02	; 2
    2d60:	0e 94 8a 13 	call	0x2714	; 0x2714 <LED_Init>
    2d64:	89 83       	std	Y+1, r24	; 0x01
	if(status == LED_FAILURE)
    2d66:	89 81       	ldd	r24, Y+1	; 0x01
    2d68:	88 23       	and	r24, r24
    2d6a:	11 f4       	brne	.+4      	; 0x2d70 <test_led_off+0x2a>
		return LED_FAILURE;
    2d6c:	1c 82       	std	Y+4, r1	; 0x04
    2d6e:	05 c0       	rjmp	.+10     	; 0x2d7a <test_led_off+0x34>
	
	return LED_Off(&_led);	
    2d70:	ce 01       	movw	r24, r28
    2d72:	02 96       	adiw	r24, 0x02	; 2
    2d74:	0e 94 ca 13 	call	0x2794	; 0x2794 <LED_Off>
    2d78:	8c 83       	std	Y+4, r24	; 0x04
    2d7a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2d7c:	0f 90       	pop	r0
    2d7e:	0f 90       	pop	r0
    2d80:	0f 90       	pop	r0
    2d82:	0f 90       	pop	r0
    2d84:	cf 91       	pop	r28
    2d86:	df 91       	pop	r29
    2d88:	08 95       	ret

00002d8a <test_led_toggle>:

LED_STATE test_led_toggle()
{
    2d8a:	df 93       	push	r29
    2d8c:	cf 93       	push	r28
    2d8e:	00 d0       	rcall	.+0      	; 0x2d90 <test_led_toggle+0x6>
    2d90:	00 d0       	rcall	.+0      	; 0x2d92 <test_led_toggle+0x8>
    2d92:	cd b7       	in	r28, 0x3d	; 61
    2d94:	de b7       	in	r29, 0x3e	; 62
	st_Led _led = { .port = PORTB_ID, .pin = PIN0_ID };
    2d96:	81 e0       	ldi	r24, 0x01	; 1
    2d98:	8a 83       	std	Y+2, r24	; 0x02
    2d9a:	1b 82       	std	Y+3, r1	; 0x03
	LED_STATE status = LED_SUCCESS;
    2d9c:	81 e0       	ldi	r24, 0x01	; 1
    2d9e:	89 83       	std	Y+1, r24	; 0x01
	
	status = LED_Init(&_led);
    2da0:	ce 01       	movw	r24, r28
    2da2:	02 96       	adiw	r24, 0x02	; 2
    2da4:	0e 94 8a 13 	call	0x2714	; 0x2714 <LED_Init>
    2da8:	89 83       	std	Y+1, r24	; 0x01
	if(status == LED_FAILURE)
    2daa:	89 81       	ldd	r24, Y+1	; 0x01
    2dac:	88 23       	and	r24, r24
    2dae:	11 f4       	brne	.+4      	; 0x2db4 <test_led_toggle+0x2a>
		return LED_FAILURE;
    2db0:	1c 82       	std	Y+4, r1	; 0x04
    2db2:	05 c0       	rjmp	.+10     	; 0x2dbe <test_led_toggle+0x34>
	
	return LED_Toggle(&_led);
    2db4:	ce 01       	movw	r24, r28
    2db6:	02 96       	adiw	r24, 0x02	; 2
    2db8:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <LED_Toggle>
    2dbc:	8c 83       	std	Y+4, r24	; 0x04
    2dbe:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2dc0:	0f 90       	pop	r0
    2dc2:	0f 90       	pop	r0
    2dc4:	0f 90       	pop	r0
    2dc6:	0f 90       	pop	r0
    2dc8:	cf 91       	pop	r28
    2dca:	df 91       	pop	r29
    2dcc:	08 95       	ret

00002dce <test_IO_PortInit>:
/*******************************************************************************
 *                             TEST Functions                                  *
 *******************************************************************************/

GPIO_STATE	test_IO_PortInit	(const uint8 port_num, GPIO_PinDirectionType direction)
{
    2dce:	df 93       	push	r29
    2dd0:	cf 93       	push	r28
    2dd2:	00 d0       	rcall	.+0      	; 0x2dd4 <test_IO_PortInit+0x6>
    2dd4:	cd b7       	in	r28, 0x3d	; 61
    2dd6:	de b7       	in	r29, 0x3e	; 62
    2dd8:	89 83       	std	Y+1, r24	; 0x01
    2dda:	6a 83       	std	Y+2, r22	; 0x02
	return GPIO_setupPortDirection(port_num, direction);
    2ddc:	89 81       	ldd	r24, Y+1	; 0x01
    2dde:	6a 81       	ldd	r22, Y+2	; 0x02
    2de0:	0e 94 49 12 	call	0x2492	; 0x2492 <GPIO_setupPortDirection>
}
    2de4:	0f 90       	pop	r0
    2de6:	0f 90       	pop	r0
    2de8:	cf 91       	pop	r28
    2dea:	df 91       	pop	r29
    2dec:	08 95       	ret

00002dee <test_IO_PortWrite>:
GPIO_STATE	test_IO_PortWrite	(const uint8 port_num, uint8 value)
{
    2dee:	df 93       	push	r29
    2df0:	cf 93       	push	r28
    2df2:	00 d0       	rcall	.+0      	; 0x2df4 <test_IO_PortWrite+0x6>
    2df4:	cd b7       	in	r28, 0x3d	; 61
    2df6:	de b7       	in	r29, 0x3e	; 62
    2df8:	89 83       	std	Y+1, r24	; 0x01
    2dfa:	6a 83       	std	Y+2, r22	; 0x02
	return GPIO_writePort(port_num, value);
    2dfc:	89 81       	ldd	r24, Y+1	; 0x01
    2dfe:	6a 81       	ldd	r22, Y+2	; 0x02
    2e00:	0e 94 97 12 	call	0x252e	; 0x252e <GPIO_writePort>
}
    2e04:	0f 90       	pop	r0
    2e06:	0f 90       	pop	r0
    2e08:	cf 91       	pop	r28
    2e0a:	df 91       	pop	r29
    2e0c:	08 95       	ret

00002e0e <test_IO_PortRead>:
uint8		test_IO_PortRead	(const uint8 port_num)
{
    2e0e:	df 93       	push	r29
    2e10:	cf 93       	push	r28
    2e12:	0f 92       	push	r0
    2e14:	cd b7       	in	r28, 0x3d	; 61
    2e16:	de b7       	in	r29, 0x3e	; 62
    2e18:	89 83       	std	Y+1, r24	; 0x01
	return GPIO_readPort(port_num);
    2e1a:	89 81       	ldd	r24, Y+1	; 0x01
    2e1c:	0e 94 e5 12 	call	0x25ca	; 0x25ca <GPIO_readPort>
}
    2e20:	0f 90       	pop	r0
    2e22:	cf 91       	pop	r28
    2e24:	df 91       	pop	r29
    2e26:	08 95       	ret

00002e28 <test_IO_PortToggle>:
GPIO_STATE	test_IO_PortToggle	(const const uint8 port_num)
{
    2e28:	df 93       	push	r29
    2e2a:	cf 93       	push	r28
    2e2c:	0f 92       	push	r0
    2e2e:	cd b7       	in	r28, 0x3d	; 61
    2e30:	de b7       	in	r29, 0x3e	; 62
    2e32:	89 83       	std	Y+1, r24	; 0x01
	return GPIO_PortToggle(port_num);
    2e34:	89 81       	ldd	r24, Y+1	; 0x01
    2e36:	0e 94 33 13 	call	0x2666	; 0x2666 <GPIO_PortToggle>
}
    2e3a:	0f 90       	pop	r0
    2e3c:	cf 91       	pop	r28
    2e3e:	df 91       	pop	r29
    2e40:	08 95       	ret

00002e42 <test_IO_PinInit>:
GPIO_STATE	test_IO_PinInit		(const uint8 port_num,const uint8 pin_num, GPIO_PinDirectionType directionr)
{
    2e42:	df 93       	push	r29
    2e44:	cf 93       	push	r28
    2e46:	00 d0       	rcall	.+0      	; 0x2e48 <test_IO_PinInit+0x6>
    2e48:	0f 92       	push	r0
    2e4a:	cd b7       	in	r28, 0x3d	; 61
    2e4c:	de b7       	in	r29, 0x3e	; 62
    2e4e:	89 83       	std	Y+1, r24	; 0x01
    2e50:	6a 83       	std	Y+2, r22	; 0x02
    2e52:	4b 83       	std	Y+3, r20	; 0x03
	return GPIO_setupPinDirection(port_num, pin_num, directionr);
    2e54:	89 81       	ldd	r24, Y+1	; 0x01
    2e56:	6a 81       	ldd	r22, Y+2	; 0x02
    2e58:	4b 81       	ldd	r20, Y+3	; 0x03
    2e5a:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <GPIO_setupPinDirection>
}
    2e5e:	0f 90       	pop	r0
    2e60:	0f 90       	pop	r0
    2e62:	0f 90       	pop	r0
    2e64:	cf 91       	pop	r28
    2e66:	df 91       	pop	r29
    2e68:	08 95       	ret

00002e6a <test_IO_PinWrite>:
GPIO_STATE	test_IO_PinWrite	(const uint8 port_num,const uint8 pin_num, uint8 value)
{
    2e6a:	df 93       	push	r29
    2e6c:	cf 93       	push	r28
    2e6e:	00 d0       	rcall	.+0      	; 0x2e70 <test_IO_PinWrite+0x6>
    2e70:	0f 92       	push	r0
    2e72:	cd b7       	in	r28, 0x3d	; 61
    2e74:	de b7       	in	r29, 0x3e	; 62
    2e76:	89 83       	std	Y+1, r24	; 0x01
    2e78:	6a 83       	std	Y+2, r22	; 0x02
    2e7a:	4b 83       	std	Y+3, r20	; 0x03
	return GPIO_writePin(port_num, pin_num, value);
    2e7c:	89 81       	ldd	r24, Y+1	; 0x01
    2e7e:	6a 81       	ldd	r22, Y+2	; 0x02
    2e80:	4b 81       	ldd	r20, Y+3	; 0x03
    2e82:	0e 94 29 10 	call	0x2052	; 0x2052 <GPIO_writePin>
}
    2e86:	0f 90       	pop	r0
    2e88:	0f 90       	pop	r0
    2e8a:	0f 90       	pop	r0
    2e8c:	cf 91       	pop	r28
    2e8e:	df 91       	pop	r29
    2e90:	08 95       	ret

00002e92 <test_IO_PinRead>:
uint8		test_IO_PinRead		(const uint8 port_num,const uint8 pin_num)
{
    2e92:	df 93       	push	r29
    2e94:	cf 93       	push	r28
    2e96:	00 d0       	rcall	.+0      	; 0x2e98 <test_IO_PinRead+0x6>
    2e98:	cd b7       	in	r28, 0x3d	; 61
    2e9a:	de b7       	in	r29, 0x3e	; 62
    2e9c:	89 83       	std	Y+1, r24	; 0x01
    2e9e:	6a 83       	std	Y+2, r22	; 0x02
	return GPIO_readPin(port_num, pin_num);
    2ea0:	89 81       	ldd	r24, Y+1	; 0x01
    2ea2:	6a 81       	ldd	r22, Y+2	; 0x02
    2ea4:	0e 94 1b 11 	call	0x2236	; 0x2236 <GPIO_readPin>
}
    2ea8:	0f 90       	pop	r0
    2eaa:	0f 90       	pop	r0
    2eac:	cf 91       	pop	r28
    2eae:	df 91       	pop	r29
    2eb0:	08 95       	ret

00002eb2 <test_IO_PinToggle>:
GPIO_STATE	test_IO_PinToggle	(const uint8 port_num,const uint8 pin_num)
{
    2eb2:	df 93       	push	r29
    2eb4:	cf 93       	push	r28
    2eb6:	00 d0       	rcall	.+0      	; 0x2eb8 <test_IO_PinToggle+0x6>
    2eb8:	cd b7       	in	r28, 0x3d	; 61
    2eba:	de b7       	in	r29, 0x3e	; 62
    2ebc:	89 83       	std	Y+1, r24	; 0x01
    2ebe:	6a 83       	std	Y+2, r22	; 0x02
	return GPIO_PinToggle(port_num, pin_num);
    2ec0:	89 81       	ldd	r24, Y+1	; 0x01
    2ec2:	6a 81       	ldd	r22, Y+2	; 0x02
    2ec4:	0e 94 bc 11 	call	0x2378	; 0x2378 <GPIO_PinToggle>
}
    2ec8:	0f 90       	pop	r0
    2eca:	0f 90       	pop	r0
    2ecc:	cf 91       	pop	r28
    2ece:	df 91       	pop	r29
    2ed0:	08 95       	ret

00002ed2 <test_INT_ENABLE_ALL>:
/*******************************************************************************
 *                             TEST Functions                                  *
 *******************************************************************************/

void  test_INT_ENABLE_ALL(void)
{
    2ed2:	df 93       	push	r29
    2ed4:	cf 93       	push	r28
    2ed6:	cd b7       	in	r28, 0x3d	; 61
    2ed8:	de b7       	in	r29, 0x3e	; 62
	INT_ENABLE_ALL();
    2eda:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <INT_ENABLE_ALL>
}
    2ede:	cf 91       	pop	r28
    2ee0:	df 91       	pop	r29
    2ee2:	08 95       	ret

00002ee4 <test_INT_DISABLE_ALL>:
void  test_INT_DISABLE_ALL(void)
{
    2ee4:	df 93       	push	r29
    2ee6:	cf 93       	push	r28
    2ee8:	cd b7       	in	r28, 0x3d	; 61
    2eea:	de b7       	in	r29, 0x3e	; 62
	INT_DISABLE_ALL();
    2eec:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <INT_DISABLE_ALL>
}
    2ef0:	cf 91       	pop	r28
    2ef2:	df 91       	pop	r29
    2ef4:	08 95       	ret

00002ef6 <test_INT0_Init>:
INT_STATE  test_INT0_Init(en_ISC0 _ISC0)
{
    2ef6:	df 93       	push	r29
    2ef8:	cf 93       	push	r28
    2efa:	0f 92       	push	r0
    2efc:	cd b7       	in	r28, 0x3d	; 61
    2efe:	de b7       	in	r29, 0x3e	; 62
    2f00:	89 83       	std	Y+1, r24	; 0x01
	return INT0_Init(_ISC0);
    2f02:	89 81       	ldd	r24, Y+1	; 0x01
    2f04:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <INT0_Init>
}
    2f08:	0f 90       	pop	r0
    2f0a:	cf 91       	pop	r28
    2f0c:	df 91       	pop	r29
    2f0e:	08 95       	ret

00002f10 <test_INT1_Init>:
INT_STATE  test_INT1_Init(en_ISC1 _ISC1)
{
    2f10:	df 93       	push	r29
    2f12:	cf 93       	push	r28
    2f14:	0f 92       	push	r0
    2f16:	cd b7       	in	r28, 0x3d	; 61
    2f18:	de b7       	in	r29, 0x3e	; 62
    2f1a:	89 83       	std	Y+1, r24	; 0x01
	return INT1_Init(_ISC1);
    2f1c:	89 81       	ldd	r24, Y+1	; 0x01
    2f1e:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <INT1_Init>
}
    2f22:	0f 90       	pop	r0
    2f24:	cf 91       	pop	r28
    2f26:	df 91       	pop	r29
    2f28:	08 95       	ret

00002f2a <test_INT2_Init>:
INT_STATE  test_INT2_Init(en_ISC2 _ISC2)
{
    2f2a:	df 93       	push	r29
    2f2c:	cf 93       	push	r28
    2f2e:	0f 92       	push	r0
    2f30:	cd b7       	in	r28, 0x3d	; 61
    2f32:	de b7       	in	r29, 0x3e	; 62
    2f34:	89 83       	std	Y+1, r24	; 0x01
	return INT2_Init(_ISC2);
    2f36:	89 81       	ldd	r24, Y+1	; 0x01
    2f38:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <INT2_Init>
}
    2f3c:	0f 90       	pop	r0
    2f3e:	cf 91       	pop	r28
    2f40:	df 91       	pop	r29
    2f42:	08 95       	ret

00002f44 <test_INT0_Disable>:
INT_STATE  test_INT0_Disable(void)
{
    2f44:	df 93       	push	r29
    2f46:	cf 93       	push	r28
    2f48:	cd b7       	in	r28, 0x3d	; 61
    2f4a:	de b7       	in	r29, 0x3e	; 62
	return INT0_Disable();
    2f4c:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <INT0_Disable>
}
    2f50:	cf 91       	pop	r28
    2f52:	df 91       	pop	r29
    2f54:	08 95       	ret

00002f56 <test_INT1_Disable>:
INT_STATE  test_INT1_Disable(void)
{
    2f56:	df 93       	push	r29
    2f58:	cf 93       	push	r28
    2f5a:	cd b7       	in	r28, 0x3d	; 61
    2f5c:	de b7       	in	r29, 0x3e	; 62
	return INT1_Disable();
    2f5e:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <INT1_Disable>
}
    2f62:	cf 91       	pop	r28
    2f64:	df 91       	pop	r29
    2f66:	08 95       	ret

00002f68 <test_INT2_Disable>:
INT_STATE  test_INT2_Disable(void)
{
    2f68:	df 93       	push	r29
    2f6a:	cf 93       	push	r28
    2f6c:	cd b7       	in	r28, 0x3d	; 61
    2f6e:	de b7       	in	r29, 0x3e	; 62
	return INT2_Disable();
    2f70:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <INT2_Disable>
}
    2f74:	cf 91       	pop	r28
    2f76:	df 91       	pop	r29
    2f78:	08 95       	ret

00002f7a <test_Timer0_Init>:
#include"timer.h"
/*******************************************************************************
 *                             TEST Functions                                  *
 *******************************************************************************/
TIMER_STATE test_Timer0_Init(en_WGM0 _WGM, en_COM0 _COM, uint8 _setInterrupt)
{
    2f7a:	df 93       	push	r29
    2f7c:	cf 93       	push	r28
    2f7e:	00 d0       	rcall	.+0      	; 0x2f80 <test_Timer0_Init+0x6>
    2f80:	0f 92       	push	r0
    2f82:	cd b7       	in	r28, 0x3d	; 61
    2f84:	de b7       	in	r29, 0x3e	; 62
    2f86:	89 83       	std	Y+1, r24	; 0x01
    2f88:	6a 83       	std	Y+2, r22	; 0x02
    2f8a:	4b 83       	std	Y+3, r20	; 0x03
	return Timer0_Init(_WGM, _COM, _setInterrupt);
    2f8c:	89 81       	ldd	r24, Y+1	; 0x01
    2f8e:	6a 81       	ldd	r22, Y+2	; 0x02
    2f90:	4b 81       	ldd	r20, Y+3	; 0x03
    2f92:	0e 94 71 08 	call	0x10e2	; 0x10e2 <Timer0_Init>
}
    2f96:	0f 90       	pop	r0
    2f98:	0f 90       	pop	r0
    2f9a:	0f 90       	pop	r0
    2f9c:	cf 91       	pop	r28
    2f9e:	df 91       	pop	r29
    2fa0:	08 95       	ret

00002fa2 <test_Timer0_Sleep>:
TIMER_STATE test_Timer0_Sleep(uint16 _duration, en_CS0 _clk)
{
    2fa2:	df 93       	push	r29
    2fa4:	cf 93       	push	r28
    2fa6:	00 d0       	rcall	.+0      	; 0x2fa8 <test_Timer0_Sleep+0x6>
    2fa8:	0f 92       	push	r0
    2faa:	cd b7       	in	r28, 0x3d	; 61
    2fac:	de b7       	in	r29, 0x3e	; 62
    2fae:	9a 83       	std	Y+2, r25	; 0x02
    2fb0:	89 83       	std	Y+1, r24	; 0x01
    2fb2:	6b 83       	std	Y+3, r22	; 0x03
	return Timer0_Sleep(_duration, _clk);
    2fb4:	89 81       	ldd	r24, Y+1	; 0x01
    2fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb8:	6b 81       	ldd	r22, Y+3	; 0x03
    2fba:	0e 94 c8 09 	call	0x1390	; 0x1390 <Timer0_Sleep>
}
    2fbe:	0f 90       	pop	r0
    2fc0:	0f 90       	pop	r0
    2fc2:	0f 90       	pop	r0
    2fc4:	cf 91       	pop	r28
    2fc6:	df 91       	pop	r29
    2fc8:	08 95       	ret

00002fca <test_Timer0_Start>:
TIMER_STATE test_Timer0_Start(en_CS0 _clk, uint16 _count)
{
    2fca:	df 93       	push	r29
    2fcc:	cf 93       	push	r28
    2fce:	00 d0       	rcall	.+0      	; 0x2fd0 <test_Timer0_Start+0x6>
    2fd0:	0f 92       	push	r0
    2fd2:	cd b7       	in	r28, 0x3d	; 61
    2fd4:	de b7       	in	r29, 0x3e	; 62
    2fd6:	89 83       	std	Y+1, r24	; 0x01
    2fd8:	7b 83       	std	Y+3, r23	; 0x03
    2fda:	6a 83       	std	Y+2, r22	; 0x02
	return Timer0_Start(_clk, _count);
    2fdc:	2a 81       	ldd	r18, Y+2	; 0x02
    2fde:	3b 81       	ldd	r19, Y+3	; 0x03
    2fe0:	89 81       	ldd	r24, Y+1	; 0x01
    2fe2:	b9 01       	movw	r22, r18
    2fe4:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Timer0_Start>
}
    2fe8:	0f 90       	pop	r0
    2fea:	0f 90       	pop	r0
    2fec:	0f 90       	pop	r0
    2fee:	cf 91       	pop	r28
    2ff0:	df 91       	pop	r29
    2ff2:	08 95       	ret

00002ff4 <test_Timer0_Stop>:
TIMER_STATE test_Timer0_Stop()
{
    2ff4:	df 93       	push	r29
    2ff6:	cf 93       	push	r28
    2ff8:	cd b7       	in	r28, 0x3d	; 61
    2ffa:	de b7       	in	r29, 0x3e	; 62
	return Timer0_Stop();
    2ffc:	0e 94 2e 0a 	call	0x145c	; 0x145c <Timer0_Stop>
}
    3000:	cf 91       	pop	r28
    3002:	df 91       	pop	r29
    3004:	08 95       	ret

00003006 <test_Timer2_Init>:
TIMER_STATE test_Timer2_Init(en_WGM2 _WGM, en_COM2 _COM, uint8 _setInterrupt)
{
    3006:	df 93       	push	r29
    3008:	cf 93       	push	r28
    300a:	00 d0       	rcall	.+0      	; 0x300c <test_Timer2_Init+0x6>
    300c:	0f 92       	push	r0
    300e:	cd b7       	in	r28, 0x3d	; 61
    3010:	de b7       	in	r29, 0x3e	; 62
    3012:	89 83       	std	Y+1, r24	; 0x01
    3014:	6a 83       	std	Y+2, r22	; 0x02
    3016:	4b 83       	std	Y+3, r20	; 0x03
	return Timer2_Init(_WGM, _COM, _setInterrupt);
    3018:	89 81       	ldd	r24, Y+1	; 0x01
    301a:	6a 81       	ldd	r22, Y+2	; 0x02
    301c:	4b 81       	ldd	r20, Y+3	; 0x03
    301e:	0e 94 41 0a 	call	0x1482	; 0x1482 <Timer2_Init>
}
    3022:	0f 90       	pop	r0
    3024:	0f 90       	pop	r0
    3026:	0f 90       	pop	r0
    3028:	cf 91       	pop	r28
    302a:	df 91       	pop	r29
    302c:	08 95       	ret

0000302e <test_Timer2_Sleep>:
TIMER_STATE test_Timer2_Sleep(uint16 _duration, en_CS2 _clk)
{
    302e:	df 93       	push	r29
    3030:	cf 93       	push	r28
    3032:	00 d0       	rcall	.+0      	; 0x3034 <test_Timer2_Sleep+0x6>
    3034:	0f 92       	push	r0
    3036:	cd b7       	in	r28, 0x3d	; 61
    3038:	de b7       	in	r29, 0x3e	; 62
    303a:	9a 83       	std	Y+2, r25	; 0x02
    303c:	89 83       	std	Y+1, r24	; 0x01
    303e:	6b 83       	std	Y+3, r22	; 0x03
	return Timer2_Sleep(_duration, _clk);
    3040:	89 81       	ldd	r24, Y+1	; 0x01
    3042:	9a 81       	ldd	r25, Y+2	; 0x02
    3044:	6b 81       	ldd	r22, Y+3	; 0x03
    3046:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <Timer2_Sleep>
}
    304a:	0f 90       	pop	r0
    304c:	0f 90       	pop	r0
    304e:	0f 90       	pop	r0
    3050:	cf 91       	pop	r28
    3052:	df 91       	pop	r29
    3054:	08 95       	ret

00003056 <test_Timer2_Start>:
TIMER_STATE test_Timer2_Start(en_CS2 _clk, uint16 _count)
{
    3056:	df 93       	push	r29
    3058:	cf 93       	push	r28
    305a:	00 d0       	rcall	.+0      	; 0x305c <test_Timer2_Start+0x6>
    305c:	0f 92       	push	r0
    305e:	cd b7       	in	r28, 0x3d	; 61
    3060:	de b7       	in	r29, 0x3e	; 62
    3062:	89 83       	std	Y+1, r24	; 0x01
    3064:	7b 83       	std	Y+3, r23	; 0x03
    3066:	6a 83       	std	Y+2, r22	; 0x02
	return Timer2_Start(_clk, _count);
    3068:	2a 81       	ldd	r18, Y+2	; 0x02
    306a:	3b 81       	ldd	r19, Y+3	; 0x03
    306c:	89 81       	ldd	r24, Y+1	; 0x01
    306e:	b9 01       	movw	r22, r18
    3070:	0e 94 bf 0b 	call	0x177e	; 0x177e <Timer2_Start>
}
    3074:	0f 90       	pop	r0
    3076:	0f 90       	pop	r0
    3078:	0f 90       	pop	r0
    307a:	cf 91       	pop	r28
    307c:	df 91       	pop	r29
    307e:	08 95       	ret

00003080 <test_Timer2_Stop>:
TIMER_STATE test_Timer2_Stop()
{
    3080:	df 93       	push	r29
    3082:	cf 93       	push	r28
    3084:	cd b7       	in	r28, 0x3d	; 61
    3086:	de b7       	in	r29, 0x3e	; 62
	return Timer2_Stop();
    3088:	0e 94 08 0c 	call	0x1810	; 0x1810 <Timer2_Stop>
}
    308c:	cf 91       	pop	r28
    308e:	df 91       	pop	r29
    3090:	08 95       	ret

00003092 <test_Timer1_Init>:
TIMER_STATE test_Timer1_Init(en_WGM1 _WGM, en_COM1 _COM, uint8 _setInterrupt)
{
    3092:	df 93       	push	r29
    3094:	cf 93       	push	r28
    3096:	00 d0       	rcall	.+0      	; 0x3098 <test_Timer1_Init+0x6>
    3098:	0f 92       	push	r0
    309a:	cd b7       	in	r28, 0x3d	; 61
    309c:	de b7       	in	r29, 0x3e	; 62
    309e:	89 83       	std	Y+1, r24	; 0x01
    30a0:	6a 83       	std	Y+2, r22	; 0x02
    30a2:	4b 83       	std	Y+3, r20	; 0x03
	return Timer1_Init(_WGM, _COM, _setInterrupt);
    30a4:	89 81       	ldd	r24, Y+1	; 0x01
    30a6:	6a 81       	ldd	r22, Y+2	; 0x02
    30a8:	4b 81       	ldd	r20, Y+3	; 0x03
    30aa:	0e 94 18 0c 	call	0x1830	; 0x1830 <Timer1_Init>
}
    30ae:	0f 90       	pop	r0
    30b0:	0f 90       	pop	r0
    30b2:	0f 90       	pop	r0
    30b4:	cf 91       	pop	r28
    30b6:	df 91       	pop	r29
    30b8:	08 95       	ret

000030ba <test_Timer1_Sleep>:
TIMER_STATE test_Timer1_Sleep(uint16 _duration, en_CS1 _clk)
{
    30ba:	df 93       	push	r29
    30bc:	cf 93       	push	r28
    30be:	00 d0       	rcall	.+0      	; 0x30c0 <test_Timer1_Sleep+0x6>
    30c0:	00 d0       	rcall	.+0      	; 0x30c2 <test_Timer1_Sleep+0x8>
    30c2:	cd b7       	in	r28, 0x3d	; 61
    30c4:	de b7       	in	r29, 0x3e	; 62
    30c6:	9a 83       	std	Y+2, r25	; 0x02
    30c8:	89 83       	std	Y+1, r24	; 0x01
    30ca:	6b 83       	std	Y+3, r22	; 0x03
	Timer1_Sleep(_duration, _clk);
    30cc:	89 81       	ldd	r24, Y+1	; 0x01
    30ce:	9a 81       	ldd	r25, Y+2	; 0x02
    30d0:	6b 81       	ldd	r22, Y+3	; 0x03
    30d2:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <Timer1_Sleep>
}
    30d6:	0f 90       	pop	r0
    30d8:	0f 90       	pop	r0
    30da:	0f 90       	pop	r0
    30dc:	0f 90       	pop	r0
    30de:	cf 91       	pop	r28
    30e0:	df 91       	pop	r29
    30e2:	08 95       	ret

000030e4 <test_Timer1_Start>:
TIMER_STATE test_Timer1_Start(en_CS1 _clk, uint16 _count)
{
    30e4:	df 93       	push	r29
    30e6:	cf 93       	push	r28
    30e8:	00 d0       	rcall	.+0      	; 0x30ea <test_Timer1_Start+0x6>
    30ea:	0f 92       	push	r0
    30ec:	cd b7       	in	r28, 0x3d	; 61
    30ee:	de b7       	in	r29, 0x3e	; 62
    30f0:	89 83       	std	Y+1, r24	; 0x01
    30f2:	7b 83       	std	Y+3, r23	; 0x03
    30f4:	6a 83       	std	Y+2, r22	; 0x02
	return Timer1_Start(_clk, _count);
    30f6:	2a 81       	ldd	r18, Y+2	; 0x02
    30f8:	3b 81       	ldd	r19, Y+3	; 0x03
    30fa:	89 81       	ldd	r24, Y+1	; 0x01
    30fc:	b9 01       	movw	r22, r18
    30fe:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <Timer1_Start>
}
    3102:	0f 90       	pop	r0
    3104:	0f 90       	pop	r0
    3106:	0f 90       	pop	r0
    3108:	cf 91       	pop	r28
    310a:	df 91       	pop	r29
    310c:	08 95       	ret

0000310e <test_Timer1_Stop>:
TIMER_STATE test_Timer1_Stop()
{
    310e:	df 93       	push	r29
    3110:	cf 93       	push	r28
    3112:	cd b7       	in	r28, 0x3d	; 61
    3114:	de b7       	in	r29, 0x3e	; 62
	return Timer1_Stop();
    3116:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <Timer1_Stop>
}
    311a:	cf 91       	pop	r28
    311c:	df 91       	pop	r29
    311e:	08 95       	ret

00003120 <init_test_leds>:

st_Led test_ledRed		= {.port = PORTA_ID, .pin = PIN0_ID};
st_Led test_ledGreen	= {.port = PORTA_ID, .pin = PIN1_ID};

void init_test_leds()
{
    3120:	df 93       	push	r29
    3122:	cf 93       	push	r28
    3124:	cd b7       	in	r28, 0x3d	; 61
    3126:	de b7       	in	r29, 0x3e	; 62


	LED_Init(&test_ledRed); LED_Init(&test_ledGreen);
    3128:	86 eb       	ldi	r24, 0xB6	; 182
    312a:	91 e0       	ldi	r25, 0x01	; 1
    312c:	0e 94 8a 13 	call	0x2714	; 0x2714 <LED_Init>
    3130:	87 ea       	ldi	r24, 0xA7	; 167
    3132:	91 e0       	ldi	r25, 0x01	; 1
    3134:	0e 94 8a 13 	call	0x2714	; 0x2714 <LED_Init>

}
    3138:	cf 91       	pop	r28
    313a:	df 91       	pop	r29
    313c:	08 95       	ret

0000313e <main>:
#include "./Application/app.h"
#include "./Helpers/tests.h"
int main(void)
{
    313e:	df 93       	push	r29
    3140:	cf 93       	push	r28
    3142:	cd b7       	in	r28, 0x3d	; 61
    3144:	de b7       	in	r29, 0x3e	; 62
	//Initialize
    APP_init();
    3146:	0e 94 83 14 	call	0x2906	; 0x2906 <APP_init>

	//Main loop
	while(1){
		APP_start();
    314a:	0e 94 ff 14 	call	0x29fe	; 0x29fe <APP_start>
    314e:	fd cf       	rjmp	.-6      	; 0x314a <main+0xc>

00003150 <__prologue_saves__>:
    3150:	2f 92       	push	r2
    3152:	3f 92       	push	r3
    3154:	4f 92       	push	r4
    3156:	5f 92       	push	r5
    3158:	6f 92       	push	r6
    315a:	7f 92       	push	r7
    315c:	8f 92       	push	r8
    315e:	9f 92       	push	r9
    3160:	af 92       	push	r10
    3162:	bf 92       	push	r11
    3164:	cf 92       	push	r12
    3166:	df 92       	push	r13
    3168:	ef 92       	push	r14
    316a:	ff 92       	push	r15
    316c:	0f 93       	push	r16
    316e:	1f 93       	push	r17
    3170:	cf 93       	push	r28
    3172:	df 93       	push	r29
    3174:	cd b7       	in	r28, 0x3d	; 61
    3176:	de b7       	in	r29, 0x3e	; 62
    3178:	ca 1b       	sub	r28, r26
    317a:	db 0b       	sbc	r29, r27
    317c:	0f b6       	in	r0, 0x3f	; 63
    317e:	f8 94       	cli
    3180:	de bf       	out	0x3e, r29	; 62
    3182:	0f be       	out	0x3f, r0	; 63
    3184:	cd bf       	out	0x3d, r28	; 61
    3186:	09 94       	ijmp

00003188 <__epilogue_restores__>:
    3188:	2a 88       	ldd	r2, Y+18	; 0x12
    318a:	39 88       	ldd	r3, Y+17	; 0x11
    318c:	48 88       	ldd	r4, Y+16	; 0x10
    318e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3190:	6e 84       	ldd	r6, Y+14	; 0x0e
    3192:	7d 84       	ldd	r7, Y+13	; 0x0d
    3194:	8c 84       	ldd	r8, Y+12	; 0x0c
    3196:	9b 84       	ldd	r9, Y+11	; 0x0b
    3198:	aa 84       	ldd	r10, Y+10	; 0x0a
    319a:	b9 84       	ldd	r11, Y+9	; 0x09
    319c:	c8 84       	ldd	r12, Y+8	; 0x08
    319e:	df 80       	ldd	r13, Y+7	; 0x07
    31a0:	ee 80       	ldd	r14, Y+6	; 0x06
    31a2:	fd 80       	ldd	r15, Y+5	; 0x05
    31a4:	0c 81       	ldd	r16, Y+4	; 0x04
    31a6:	1b 81       	ldd	r17, Y+3	; 0x03
    31a8:	aa 81       	ldd	r26, Y+2	; 0x02
    31aa:	b9 81       	ldd	r27, Y+1	; 0x01
    31ac:	ce 0f       	add	r28, r30
    31ae:	d1 1d       	adc	r29, r1
    31b0:	0f b6       	in	r0, 0x3f	; 63
    31b2:	f8 94       	cli
    31b4:	de bf       	out	0x3e, r29	; 62
    31b6:	0f be       	out	0x3f, r0	; 63
    31b8:	cd bf       	out	0x3d, r28	; 61
    31ba:	ed 01       	movw	r28, r26
    31bc:	08 95       	ret

000031be <ceil>:
    31be:	3b d0       	rcall	.+118    	; 0x3236 <__fp_trunc>
    31c0:	80 f0       	brcs	.+32     	; 0x31e2 <ceil+0x24>
    31c2:	9f 37       	cpi	r25, 0x7F	; 127
    31c4:	40 f4       	brcc	.+16     	; 0x31d6 <ceil+0x18>
    31c6:	91 11       	cpse	r25, r1
    31c8:	0e f4       	brtc	.+2      	; 0x31cc <ceil+0xe>
    31ca:	4d c0       	rjmp	.+154    	; 0x3266 <__fp_szero>
    31cc:	60 e0       	ldi	r22, 0x00	; 0
    31ce:	70 e0       	ldi	r23, 0x00	; 0
    31d0:	80 e8       	ldi	r24, 0x80	; 128
    31d2:	9f e3       	ldi	r25, 0x3F	; 63
    31d4:	08 95       	ret
    31d6:	26 f0       	brts	.+8      	; 0x31e0 <ceil+0x22>
    31d8:	1b 16       	cp	r1, r27
    31da:	61 1d       	adc	r22, r1
    31dc:	71 1d       	adc	r23, r1
    31de:	81 1d       	adc	r24, r1
    31e0:	01 c0       	rjmp	.+2      	; 0x31e4 <__fp_mintl>
    31e2:	1b c0       	rjmp	.+54     	; 0x321a <__fp_mpack>

000031e4 <__fp_mintl>:
    31e4:	88 23       	and	r24, r24
    31e6:	71 f4       	brne	.+28     	; 0x3204 <__fp_mintl+0x20>
    31e8:	77 23       	and	r23, r23
    31ea:	21 f0       	breq	.+8      	; 0x31f4 <__fp_mintl+0x10>
    31ec:	98 50       	subi	r25, 0x08	; 8
    31ee:	87 2b       	or	r24, r23
    31f0:	76 2f       	mov	r23, r22
    31f2:	07 c0       	rjmp	.+14     	; 0x3202 <__fp_mintl+0x1e>
    31f4:	66 23       	and	r22, r22
    31f6:	11 f4       	brne	.+4      	; 0x31fc <__fp_mintl+0x18>
    31f8:	99 27       	eor	r25, r25
    31fa:	0d c0       	rjmp	.+26     	; 0x3216 <__fp_mintl+0x32>
    31fc:	90 51       	subi	r25, 0x10	; 16
    31fe:	86 2b       	or	r24, r22
    3200:	70 e0       	ldi	r23, 0x00	; 0
    3202:	60 e0       	ldi	r22, 0x00	; 0
    3204:	2a f0       	brmi	.+10     	; 0x3210 <__fp_mintl+0x2c>
    3206:	9a 95       	dec	r25
    3208:	66 0f       	add	r22, r22
    320a:	77 1f       	adc	r23, r23
    320c:	88 1f       	adc	r24, r24
    320e:	da f7       	brpl	.-10     	; 0x3206 <__fp_mintl+0x22>
    3210:	88 0f       	add	r24, r24
    3212:	96 95       	lsr	r25
    3214:	87 95       	ror	r24
    3216:	97 f9       	bld	r25, 7
    3218:	08 95       	ret

0000321a <__fp_mpack>:
    321a:	9f 3f       	cpi	r25, 0xFF	; 255
    321c:	31 f0       	breq	.+12     	; 0x322a <__fp_mpack_finite+0xc>

0000321e <__fp_mpack_finite>:
    321e:	91 50       	subi	r25, 0x01	; 1
    3220:	20 f4       	brcc	.+8      	; 0x322a <__fp_mpack_finite+0xc>
    3222:	87 95       	ror	r24
    3224:	77 95       	ror	r23
    3226:	67 95       	ror	r22
    3228:	b7 95       	ror	r27
    322a:	88 0f       	add	r24, r24
    322c:	91 1d       	adc	r25, r1
    322e:	96 95       	lsr	r25
    3230:	87 95       	ror	r24
    3232:	97 f9       	bld	r25, 7
    3234:	08 95       	ret

00003236 <__fp_trunc>:
    3236:	25 d0       	rcall	.+74     	; 0x3282 <__fp_splitA>
    3238:	a0 f0       	brcs	.+40     	; 0x3262 <__fp_trunc+0x2c>
    323a:	be e7       	ldi	r27, 0x7E	; 126
    323c:	b9 17       	cp	r27, r25
    323e:	88 f4       	brcc	.+34     	; 0x3262 <__fp_trunc+0x2c>
    3240:	bb 27       	eor	r27, r27
    3242:	9f 38       	cpi	r25, 0x8F	; 143
    3244:	60 f4       	brcc	.+24     	; 0x325e <__fp_trunc+0x28>
    3246:	16 16       	cp	r1, r22
    3248:	b1 1d       	adc	r27, r1
    324a:	67 2f       	mov	r22, r23
    324c:	78 2f       	mov	r23, r24
    324e:	88 27       	eor	r24, r24
    3250:	98 5f       	subi	r25, 0xF8	; 248
    3252:	f7 cf       	rjmp	.-18     	; 0x3242 <__fp_trunc+0xc>
    3254:	86 95       	lsr	r24
    3256:	77 95       	ror	r23
    3258:	67 95       	ror	r22
    325a:	b1 1d       	adc	r27, r1
    325c:	93 95       	inc	r25
    325e:	96 39       	cpi	r25, 0x96	; 150
    3260:	c8 f3       	brcs	.-14     	; 0x3254 <__fp_trunc+0x1e>
    3262:	08 95       	ret

00003264 <__fp_zero>:
    3264:	e8 94       	clt

00003266 <__fp_szero>:
    3266:	bb 27       	eor	r27, r27
    3268:	66 27       	eor	r22, r22
    326a:	77 27       	eor	r23, r23
    326c:	cb 01       	movw	r24, r22
    326e:	97 f9       	bld	r25, 7
    3270:	08 95       	ret

00003272 <__fp_split3>:
    3272:	57 fd       	sbrc	r21, 7
    3274:	90 58       	subi	r25, 0x80	; 128
    3276:	44 0f       	add	r20, r20
    3278:	55 1f       	adc	r21, r21
    327a:	59 f0       	breq	.+22     	; 0x3292 <__fp_splitA+0x10>
    327c:	5f 3f       	cpi	r21, 0xFF	; 255
    327e:	71 f0       	breq	.+28     	; 0x329c <__fp_splitA+0x1a>
    3280:	47 95       	ror	r20

00003282 <__fp_splitA>:
    3282:	88 0f       	add	r24, r24
    3284:	97 fb       	bst	r25, 7
    3286:	99 1f       	adc	r25, r25
    3288:	61 f0       	breq	.+24     	; 0x32a2 <__fp_splitA+0x20>
    328a:	9f 3f       	cpi	r25, 0xFF	; 255
    328c:	79 f0       	breq	.+30     	; 0x32ac <__fp_splitA+0x2a>
    328e:	87 95       	ror	r24
    3290:	08 95       	ret
    3292:	12 16       	cp	r1, r18
    3294:	13 06       	cpc	r1, r19
    3296:	14 06       	cpc	r1, r20
    3298:	55 1f       	adc	r21, r21
    329a:	f2 cf       	rjmp	.-28     	; 0x3280 <__fp_split3+0xe>
    329c:	46 95       	lsr	r20
    329e:	f1 df       	rcall	.-30     	; 0x3282 <__fp_splitA>
    32a0:	08 c0       	rjmp	.+16     	; 0x32b2 <__fp_splitA+0x30>
    32a2:	16 16       	cp	r1, r22
    32a4:	17 06       	cpc	r1, r23
    32a6:	18 06       	cpc	r1, r24
    32a8:	99 1f       	adc	r25, r25
    32aa:	f1 cf       	rjmp	.-30     	; 0x328e <__fp_splitA+0xc>
    32ac:	86 95       	lsr	r24
    32ae:	71 05       	cpc	r23, r1
    32b0:	61 05       	cpc	r22, r1
    32b2:	08 94       	sec
    32b4:	08 95       	ret

000032b6 <_exit>:
    32b6:	f8 94       	cli

000032b8 <__stop_program>:
    32b8:	ff cf       	rjmp	.-2      	; 0x32b8 <__stop_program>
